
@{ ViewBag.Title = "MTBF";
    Layout = "~/Views/Shared/_Layout.cshtml"; }

<script src="~/Scripts/d3.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.css">
@*<link href="~/Content/bootstrap.css" type="text/css" rel="stylesheet" />*@
<link href="~/Content/bootstrapmodel.css" rel="stylesheet" />
<header class="page-header">
    <h2>Mean Time Between Failure for Alarms</h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("MainDashboard","MainDashboard")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            @*<li><span>Maintenance</span></li>
                <li><span>Historic Data & Analytics</span></li>
                <li><span>Alarm Analysis</span></li>
                <li><span>MTBF</span></li>*@
        </ol>
    </div>
</header>

@if (ViewContext.Controller.HasPermission("ParetoAnalysisHistoric-View"))
{
    <div class="row">
        <div class="col-md-12">
            @*<div class="btn-group">
                    <label class="control-label" style="float:right; font-weight:bold;"> Select Line </label>
                </div>
                <div class="btn-group">
                    <select id="linecode" class="form-control" name="linecode" title="*"></select>
                </div>&nbsp;&nbsp;*@
            <div class="btn-group">
                <label class="control-label" style="float: right; font-weight: bold; "> Select Machine <span class="required">*</span></label>
            </div>
            <div class="btn-group">
                <select id="machinecode" class="form-control" name="machinecode" title="Select Machine">
                    <option value="">Select Line First</option>
                </select>
            </div>
            <div class="btn-group">
                <label class="control-label" style="float: right; font-weight: bold; margin-left: 35px;"> No of Records <span class="required">*</span></label>
            </div>
            <div class="btn-group">
                <input type="text" class="form-control record" name="records" title="Enter no. of records" required style="margin-left: 10px;" />
            </div>
            <div class="btn-group">
                <span style="color: red; margin-left: 20px;">Note : Type 'All' or number (eg: all or 10 or 20)</span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabs tabs-danger">
                <ul class="nav nav-tabs">
                    <li class="active" id="custom_report">
                        <a href="#custom" data-toggle="tab">Custom</a>
                    </li>
                    <li id="yearly_report">
                        <a href="#yearly" data-toggle="tab"> Yearly</a>
                    </li>
                    <li id="monthly_report">
                        <a href="#monthly" data-toggle="tab">Monthly</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="custom" class="tab-pane active">
                        <section class="panel">
                            <div class="form-group">
                                <label class="col-md-1 control-label">Date range</label>
                                <div class="col-md-5">
                                    <div class="input-daterange input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                                        <span class="input-group-addon">to</span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4" style="left: 105px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchcustomwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetcustom" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="custom_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Machine : <span id="custom_subsystem"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Mean time between failure for machine : <span id="custom_msg"></span>mins</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No Of Stoppages : <span id="custom_stoppage"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Downtime : <span id="custom_downtime"></span> </button>

                                </div>
                            </header>
                            <div class="panel-body">
                                @*<div class="chart chart-md" id="custom1"></div>*@
                                <div id='container' style="height:650px;width:100%">
                                </div>

                            </div>
                        </section>
                    </div>

                    <div id="yearly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-labe" style="right: 189px;">Select Year</label>
                              <div class="col-md-4" style="right: 288px;">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="date-own form-control" style="width: 150px;z-index:0;" type="text" id="year" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4" style="right: 89px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchyearwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetyear" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="yearly_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Machine : <span id="yearly_subsystem"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Mean time between failure for subsystem : <span id="yearly_msg"></span>mins</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No Of Stoppages : <span id="yearly_stoppage"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Downtime : <span id="yearly_downtime"></span> </button>

                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="year_report" style="height:650px;width:100%">
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="monthly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-label"style="right: 189px;">Select Month</label>
                                <div class="col-md-4" style="right: 287px;">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="month-own form-control" style="width: 150px;z-index:0;" type="text" id="month" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4" style="right: 89px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchmonthwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetmonth" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="monthly_line"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Machine : <span id="monthly_subsystem"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Mean time between failure for subsystem : <span id="monthly_msg"></span>mins</button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No Of Stoppages : <span id="monthly_stoppage"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Downtime : <span id="monthly_downtime"></span> </button>

                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="monthly_report" style="height:700px;width:100%">
                                </div>

                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div> }
else
{
    <div class="row">
        <h2 class="panel-title">View Permission is denied</h2>
    </div>}
<!-- end: page -->
<script src="~/assets1/javascripts/swal.js"></script>
<script src="~/assets1/javascripts/swal_alert.js"></script>
<script src="~/assets1/datepicker_normal/datepicker_normal_jquery.min.js"></script>
<script src="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    $(".datepic").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        endDate: '+0d'
    });

    $('.month-own').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.date-own').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        endDate: '+0y',
        startView: 2,
        orientation: "bottom"
    });
    $(function () {
        var todaydt = new Date();
        $("#start").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate());
            $('#end').datepicker('setStartDate', minDate);
        });

        $("#end").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() - 1);
            $('#start').datepicker('setEndDate', minDate);
        });
    });
</script>
<script type="text/javascript">
    $(function () {
        var CompanyCode = '@Session["CompanyCode"]';
        var PlantCode = '@Session["PlantCode"]';
        var LineCode = '@Session["LineCode"]';
        if (CompanyCode == "" && PlantCode == "" && LineCode == "") {
            swal({
                icon: "error",
                title: "Please Select Customer, Plant and Line...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else
            if (CompanyCode == "") {
                swal({
                    icon: "error",
                    title: "Please Select Customer...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            else
                if (PlantCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Plant...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                if (LineCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Line...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                else {
                    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
                    @*var myData = {
                        "Flag": "LineCode",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                     var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                    //$.ajax({
                    //    type: 'Get',
                    //    url: URL + 'api/UserSettings/GetEmployee',
                    //    headers: {
                    //        Authorization: 'Bearer ' + user1
                    //    },
                    //    dataType: 'json'
                    //}).success(function (response) {
                    $.ajax({
                        type: "POST",
                        url: '/Main/GetSettingdatas1',
                        data: myData,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Line</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#linecode").html(s);
                        },
                        error: function (response) {
                            if (response.status == "401") {
                                swal({
                                    icon: "warning",
                                    title: "Session Timeout",
                                    button: true,
                                    closeModal: false
                                })
                                window.location = R_url;
                            }
                            else {
                                swal({
                                    icon: "warning",
                                    title: response.responseText,
                                    button: true,
                                    closeModal: false
                                })

                            }
                        }
                    });
                    //}).error(function (response) {
                    //    swal({
                    //        icon: "warning",
                    //        title: "Session Timeout",
                    //        button: true,
                    //        closeModal: false
                    //    })
                    //    window.location = R_url;
                    //});*@

                     var myData1 = {
                        "Flag": "Subsystem",
                        "CompanyCode": '@Session["CompanyCode"]',
                      "PlantCode": '@Session["PlantCode"]',
                        "LineCode":'@Session["LineCode"]',
                    };
                     var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                    //$.ajax({
                    //    type: 'Get',
                    //    url: URL + 'api/UserSettings/GetEmployee',
                    //    headers: {
                    //        Authorization: 'Bearer ' + user1
                    //    },
                    //    dataType: 'json'
                    //}).success(function (response) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetSettingdatas1", "Main")',
                        data: myData1,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Machine</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                console.log(response.data.length);
                                if (response.data.length == 1) {
                                    s += '<option value="' + response.data[i].Code + '" selected=selected>' + response.data[i].Name + '</option>';
                                }
                                else {
                                    s += '<option value="' + response.data[i].Code + '">' + response.data[i].Code + "-" + response.data[i].Name + '</option>';
                                }
                            }
                            $("#machinecode").html(s);
                        },
                        error: function (response) {
                            if (response.status == "401") {
                                swal({
                                    icon: "warning",
                                    title: "Session Timeout",
                                    button: true,
                                    closeModal: false
                                })
                                window.location = R_url;
                            }
                            else {
                                swal({
                                    icon: "warning",
                                    title: response.responseText,
                                    button: true,
                                    closeModal: false
                                })

                            }
                        }
                    });



                }

    });
    document.getElementById("resetcustom").addEventListener("click", function () {
        $('#start').val('');
        $('#end').val('');
        d3.select("#container svg").remove();
    })
    document.getElementById("resetyear").addEventListener("click", function () {
        $('#year').val('');
        d3.select(".year_report svg").remove();
    })
    document.getElementById("resetmonth").addEventListener("click", function () {
        $('#month').val('');
        d3.select(".monthly_report svg").remove();
    })

</script>


<script type="text/javascript">
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';

    document.getElementById("searchcustomwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();
        var start = $('#start').val();
        var end = $('#end').val();
        var year = $('#year').val();
        var month = $('#month').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear && end!='') {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();
            return;
        }


        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Machine details",
                button: false,
                timer: 4500
            })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }
        else if (start == '') {
            swal({
                icon: "error",
                title: "Please Provide start date",
                button: false,
                timer: 4500
            })
        }
        else if (end == '') {
            swal({
                icon: "error",
                title: "Please Provide End date",
                button: false,
                timer: 4500
            })
        }
        else {
            if (start > end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,
                "FromDate": start,
                "ToDate": end,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                'QueryType': 'Get_MTBF'
            };
            var sample;
            var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTBF_CustomReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {

                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        $('#custom_msg').text(response.data.Table1[0].MTBF);


                        $("#custom_stoppage").html(response.data.Table2[0].no_of_stopage);
                        $("#custom_downtime").html(response.data.Table2[0].dtime + " mins");


                        $('#custom_line').text(linecode);
                        $('#custom_subsystem').text(machinecode);
                        sample = response.data.Table;
                        d3.select("#container").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('#container');

                        const a = $('#container').height();
                        const b = $('#container').width();

                        const margin = 150;
                        const width = b - 2 * margin;
                        const height = a - 2 * margin;


                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.Frequency; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select("#container")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")
                        tooltip = d3.select("body").append("div").style("width", "120px").style("height", "50px").style("background-color", "#898584").style("color","white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");
                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-25)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.Frequency))
                            .attr('height', (g) => height - yScale(g.Frequency))
                            .attr('width', xScale.bandwidth())

                            .on("mouseout", function () {
                                //d3.select(this).attr('fill', function(d) { return colorScale(window.bandClassifier(d.perChange,100));});
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })
                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                var text = 'Freq: ' + d.Frequency + 'Count<br/>MTBF: ' + d.MTBF + ' Min <br>';

                                tooltip.select("div").html(text)

                            })

                            //.on('mouseleave', function () {
                            //    d3.selectAll('.value')
                            //        .attr('opacity', 1)

                            //    d3.select(this)
                            //        .transition()
                            //        .duration(300)
                            //        .attr('opacity', 1)
                            //        .attr('x', (a) => xScale(a.Alarm_Description))
                            //        .attr('width', xScale.bandwidth())

                            //    chart.selectAll('#limit').remove()
                            //    chart.selectAll('.divergence').remove()
                            //    chart.selectAll('.value').remove()
                            //})


                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.Frequency) - 10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.MTBF}`)
                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('Occurrence')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else {
                        $("#container").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select("#container").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");

                        $('#custom_msg').text("");


                        $("#custom_stoppage").html("");
                        $("#custom_downtime").html("" + " mins");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })
                    }
                }
            });
        }
    })

    document.getElementById("searchyearwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();
        var year = $('#year').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }
        else if (year == '') {
                swal({
                    icon: "error",
                    title: "Please Provide year",
                    button: false,
                    timer: 4500
                })
        }
        else {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,
                "Year": year,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                'QueryType': 'Get_MTBF'
            };
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTBF_YearwiseReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    $('#yearly_line').text(linecode);
                    $('#yearly_subsystem').text(machinecode);
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        $('#yearly_msg').text(response.data.Table1[0].MTBF);

                        $("#yearly_stoppage").html(response.data.Table2[0].no_of_stopage);
                        $("#yearly_downtime").html(response.data.Table2[0].dtime + " mins");


                        sample = response.data.Table;
                        d3.select(".year_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.year_report');

                        const a = $('.year_report').height();
                        const b = $('.year_report').width();

                        const margin = 150;
                        const width = b - 2 * margin;
                        const height = a - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.Frequency; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                         var tooltip = d3.select(".year_report")
                             .append("div")
                             .style("opacity", 0)
                             .attr("class", "tooltip")
                             .style("background-color", "tranparent")
                             .style("border", "solid")
                             .style("border-width", "2px")
                             .style("border-radius", "5px")
                             .style("padding", "5px")

                        tooltip = d3.select("body").append("div").style("width", "120px").style("height", "50px").style("background-color", "#898584").style("color", "white")
                                 .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-25)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.Frequency))
                            .attr('height', (g) => height - yScale(g.Frequency))
                            .attr('width', xScale.bandwidth())



                             .on("mouseout", function () {
                                 //d3.select(this).attr('fill', function(d) { return colorScale(window.bandClassifier(d.perChange,100));});
                                 d3.select(this).style("stroke", "none");
                                 tooltip.style("visibility", "hidden");
                             })
                             .on("mousemove", function (d) {
                                 tooltip.style("visibility", "visible")
                                     .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                 var text = 'Freq: ' + d.Frequency + '<br/>MTBF: ' + d.MTBF +' Min <br>';

                                 //console.log(d3.mouse(this)[0])
                                 tooltip.select("div").html(text)

                             })


                            //.on('mouseleave', function () {
                            //    d3.selectAll('.value')
                            //        .attr('opacity', 1)

                            //    d3.select(this)
                            //        .transition()
                            //        .duration(300)
                            //        .attr('opacity', 1)
                            //        .attr('x', (a) => xScale(a.Alarm_Description))
                            //        .attr('width', xScale.bandwidth())

                            //    chart.selectAll('#limit').remove()
                            //    chart.selectAll('.divergence').remove()
                            //    chart.selectAll('.value').remove()
                            //})
                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.Frequency) -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.MTBF}`)
                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('Occurrence')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else {
                        $(".year_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".year_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");

                        $("#yearly_stoppage").html("");
                        $("#yearly_downtime").html("" + " mins");

                        $('#yearly_msg').text("");

                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });

        }

    })

    document.getElementById("searchmonthwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();
        var month = $('#month').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }
        else if (month == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Month",
                    button: false,
                    timer: 4500
                })
        }
        else
        {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,
                "Year": month,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                'QueryType': 'Get_MTBF'
            };
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTBF_MonthwiseReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {

                    d3.select("svg").remove();
                    $('#monthly_line').text(linecode);
                    $('#monthly_subsystem').text(machinecode);

                    if (response.status != "Error") {

                        $('#monthly_msg').text(response.data.Table1[0].MTBF);

                        $("#monthly_stoppage").html(response.data.Table2[0].no_of_stopage);
                        $("#monthly_downtime").html(response.data.Table2[0].dtime + " mins");


                        sample = response.data.Table;
                        // $('#custom_msg').text(response.data.Table1[0].MTBF);
                        d3.select(".monthly_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.monthly_report');

                        const a = $('.monthly_report').height();
                        const b = $('.monthly_report').width();

                        const margin = 150;
                        const width = b - 2 * margin;
                        const height = a - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.Frequency; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".monthly_report")
                             .append("div")
                             .style("opacity", 0)
                             .attr("class", "tooltip")
                             .style("background-color", "tranparent")
                             .style("border", "solid")
                             .style("border-width", "2px")
                             .style("border-radius", "5px")
                             .style("padding", "5px")



                        tooltip = d3.select("body").append("div").style("width", "120px").style("height", "50px").style("background-color", "#898584").style("color", "white")
                                 .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-25)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                        )
                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')
                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.Frequency))
                            .attr('height', (g) => height - yScale(g.Frequency))
                            .attr('width', xScale.bandwidth())

                            .on("mouseout", function () {
                                 //d3.select(this).attr('fill', function(d) { return colorScale(window.bandClassifier(d.perChange,100));});
                                 d3.select(this).style("stroke", "none");
                                 tooltip.style("visibility", "hidden");
                             })
                             .on("mousemove", function (d) {
                                 tooltip.style("visibility", "visible")
                                     .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                 var text = 'Freq: ' + d.Frequency + '<br/> MTBF: ' + d.MTBF +' Min <br>';

                                 //console.log(d3.mouse(this)[0])
                                 tooltip.select("div").html(text)

                             })


                            //.on('mouseleave', function () {
                            //    d3.selectAll('.value')
                            //        .attr('opacity', 1)

                            //    d3.select(this)
                            //        .transition()
                            //        .duration(300)
                            //        .attr('opacity', 1)
                            //        .attr('x', (a) => xScale(a.Alarm_Description))
                            //        .attr('width', xScale.bandwidth())

                            //    chart.selectAll('#limit').remove()
                            //    chart.selectAll('.divergence').remove()
                            //    chart.selectAll('.value').remove()
                            //})

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.Frequency)-10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.MTBF}`)
                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('Occurrence')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else {
                        $(".monthly_report").empty();
                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".monthly_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");

                        $("#monthly_stoppage").html("");
                        $("#monthly_downtime").html("" + " mins");

                        $('#monthly_msg').text("");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });

        }

    })

</script>
