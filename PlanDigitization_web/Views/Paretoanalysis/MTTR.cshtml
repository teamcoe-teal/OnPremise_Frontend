
@{
    ViewBag.Title = "MTTR";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<script src="~/Scripts/d3.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.css">
<link href="~/Content/bootstrapmodel.css" rel="stylesheet" />

<header class="page-header" ">
    <h2>Maintenance-MTTR</h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("MainDashboard","MainDashboard")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            @*<li><span>Maintenance</span></li>
                <li><span>Historic Data & Analytics</span></li>
                <li><span>Alarm Analysis</span></li>
                <li><span>MTTR</span></li>*@
        </ol>
    </div>
</header>




@{
    ViewBag.Title = "ProductionHistoricDashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .highlight {
        left: 50px;
        transform: scale(1.5) translate(25px);
        outline: 2px blue dashed;
    }
</style>

@*<script src="~/Scripts/d3.min.js"></script>*@
<script src="~/Scripts/d3_v4.min.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>
@*<script src="https://d3js.org/d3-interpolate.v2.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v2.min.js"></script>*@
<link rel="stylesheet" type="text/css" href="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.css">
<header class="page-header">
    <h2>MTTR Analysis - Rejection Reason Pareto </h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("Dashboard","Main")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            @*<li><span>Quality</span></li>
                <li><span>Historic Data & Analytics</span></li>
                <li><span>Quality Analysis</span></li>
                <li><span>Pareto</span></li>*@
        </ol>
    </div>
</header>

@if (ViewContext.Controller.HasPermission("ParetoAnalysisHistoric-View"))
{
    <div class="row">
        <div class="col-md-12">
            @*<div class="btn-group">
                    <label class="control-label" style="float:right; font-weight:bold;"> Select Line </label>
                </div>
                <div class="btn-group">
                    <select id="linecode" class="form-control" name="linecode" title="*"></select>
                </div>&nbsp;&nbsp;*@
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Machine <span class="required">*</span></label>
            </div>
            <div class="btn-group">
                <select id="machinecode" class="form-control" name="machinecode" title="Select Machine">
                    <option value="">Select Line First</option>
                </select>
            </div>
            <div class="btn-group">
                <label class="control-label" style="float: right; font-weight: bold; margin-left: 30px;"> No of Records <span class="required">*</span></label>
            </div>
            <div class="btn-group">
                <input type="text" class="form-control record" name="records" title="Enter no. of records" required style="margin-left: 15px;" />

            </div>
            <div class="btn-group">
                <span style="color:red; margin-left: 30px;">Note : Type 'All' or number (eg: all or 10 or 20)</span>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabs tabs-danger">
                <ul class="nav nav-tabs">
                    <li class="active" id="today_report">
                        <a href="#today" data-toggle="tab">Today</a>
                    </li>
                    <li id="yesterday_report">
                        <a href="#yesterday" data-toggle="tab">Yesterday</a>
                    </li>
                    <li id="custom_report">
                        <a href="#custom" data-toggle="tab">Custom</a>
                    </li>
                    <li id="yearly_report">
                        <a href="#yearly" data-toggle="tab"> Yearly</a>
                    </li>
                    <li id="monthly_report">
                        <a href="#monthly" data-toggle="tab">Monthly</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <!--Today-->

                    <div id="today" class="tab-pane active">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-8">

                                </div>

                                <div class="col-md-4" style="right: 83px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchtoday" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>

                                </div>
                            </div>
                            <!--<header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">-->
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="today_line"></span></button>*@

                                <!--</div>
                            </header>-->
                            <div class="panel-body">

                                <div id='container' class="today_report" style="height:600px;width:100%;">
                                </div>
                            </div>
                        </section>
                    </div>

                    <!-- Yesterday-->

                    <div id="yesterday" class="tab-pane ">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-8">

                                </div>

                                <div class="col-md-4" style="right: 89px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchyesterday" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>

                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="yesterday_line"></span></button>*@

                                </div>
                            </header>
                            <div class="panel-body">

                                <div id='container' class="yesterday_report" style="height:800px;width:100%;">
                                </div>
                            </div>
                        </section>
                    </div>

                    <!--Custom-->

                    <div id="custom" class="tab-pane ">
                        <section class="panel">
                            <div class="form-group">
                                <label class="col-md-2 control-label">Date range <span class="required">*</span></label>
                                <div class="col-md-6" style="right: 87px;">
                                    <div class="input-daterange input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input type="text" class="form-control datepics" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                                        <span class="input-group-addon">to</span>
                                        <input type="text" class="form-control datepice" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4" style="right: 83px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchcustomwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetcustom" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="custom_line"></span></button>*@
                                    @* <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Subsystem : <span id="custom_subsystem"></span></button>*@
                                </div>
                            </header>
                            <div class="panel-body">
                                @*<div class="chart chart-md" id="custom1"></div>*@
                                <div id='container' class="custom_report" style="height:800px;width:100%;">
                                </div>
                            </div>
                        </section>
                    </div>

                    <!--Yearly-->

                    <div id="yearly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-labe" style="right: 189px;">Select Year <span class="required">*</span></label>
                                <div class="col-md-4">
                                    <div class="input-group" style="right: 287px;">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="date-own form-control" style="width: 150px;z-index:0;" type="text" id="year" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4" style="right: 83px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchyearwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetyear" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="yearly_line"></span></button>*@
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Subsystem : <span id="yearly_subsystem"></span></button>*@
                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="year_report" style="height:800px;width:100%;">
                                </div>
                            </div>
                        </section>
                    </div>
                    <!--Monthly-->

                    <div id="monthly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-label" style="right: 189px;">Select Month <span class="required">*</span></label>
                                <div class="col-md-4" style="right: 283px;">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="month-own form-control" style="width: 150px;z-index:0;" type="text" id="month" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4" style="right: 87px;">
                                    <div class="btn-group">
                                        <button type="button" id="searchmonthwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetmonth" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group" style="width:100%;padding:10px;padding-right:50px;">
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="monthly_line"></span></button>*@
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="float:right;">Subsystem : <span id="monthly_subsystem"></span></button>*@
                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="monthly_report" style="height:800px;width:100%;">
                                </div>
                            </div>
                        </section>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <h2 class="panel-title">View Permission is denied</h2>
    </div>
}
<!-- end: page -->
<script src="~/assets1/javascripts/swal.js"></script>
<script src="~/assets1/javascripts/swal_alert.js"></script>
<script src="~/assets1/datepicker_normal/datepicker_normal_jquery.min.js"></script>
<script src="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    $(function () {
        var todaydt = new Date();

        $(".datepics").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate());
            $('.datepice').datepicker('setStartDate', minDate);
        });

        var Fdate = $(".datepics").val();

        $(".datepice").datepicker({
            autoclose: true,
            startDate: Fdate,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate()-1);
            $('.datepics').datepicker('setEndDate', minDate);
        });
    });


    $('.month-own').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.date-own').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        endDate: '+0y',
        startView: 2,
        orientation: "bottom"
    });
</script>
<script type="text/javascript">
    $(function () {
        var CompanyCode = '@Session["CompanyCode"]';
        var PlantCode = '@Session["PlantCode"]';
        var LineCode = '@Session["LineCode"]';
        if (CompanyCode == "" && PlantCode == "" && LineCode == "") {
            swal({
                icon: "error",
                title: "Please Select Customer, Plant and Line...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else
            if (CompanyCode == "") {
                swal({
                    icon: "error",
                    title: "Please Select Customer...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
            else
                if (PlantCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Plant...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                if (LineCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Line...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                else {
                    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';

                    var myData1 = {
                        "Flag": "Subsystem",
                        "CompanyCode": '@Session["CompanyCode"]',
                       "PlantCode": '@Session["PlantCode"]',
                        "LineCode":'@Session["LineCode"]',
                    };
                     var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                    //$.ajax({
                    //    type: 'Get',
                    //    url: URL + 'api/UserSettings/GetEmployee',
                    //    headers: {
                    //        Authorization: 'Bearer ' + user1
                    //    },
                    //    dataType: 'json'
                    //}).success(function (response) {
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetSettingdatas1", "Main")',
                        data: myData1,
                        dataType: "json",
                        success: function (response) {
                            var s = '<option value="">Select Machine</option>';

                            for (var i = 0; i < response.data.length; i++) {
                                console.log(response.data.length);
                                if (response.data.length == 1) {
                                    s += '<option value="' + response.data[i].Code + '" selected=selected>' + response.data[i].Name + '</option>';
                                }
                                else {
                                    s += '<option value="' + response.data[i].Code + '">' + response.data[i].Code + "-" + response.data[i].Name + '</option>';
                                }
                            }
                            $("#machinecode").html(s);
                            //$(".record").text("10");
                            $(".record").val(10);
                        },
                        error: function (response) {
                            if (response.status == "401") {
                                swal({
                                    icon: "warning",
                                    title: "Session Timeout",
                                    button: true,
                                    closeModal: false
                                })
                                window.location = R_url;
                            }
                            else {
                                swal({
                                    icon: "warning",
                                    title: response.responseText,
                                    button: true,
                                    closeModal: false
                                })

                            }
                        }
                    });
                    //}).error(function (response) {
                    //    swal({
                    //        icon: "warning",
                    //        title: "Session Timeout",
                    //        button: true,
                    //        closeModal: false
                    //    })
                    //    window.location = R_url;
                    //});

                }

    });
    document.getElementById("resetcustom").addEventListener("click", function () {
        $('#start').val('');
        $('#end').val('');
        d3.select(".custom_report svg").remove();
    })
    document.getElementById("resetyear").addEventListener("click", function () {
        $('#year').val('');
        d3.select(".year_report svg").remove();
    })
    document.getElementById("resetmonth").addEventListener("click", function () {
        $('#month').val('');
        d3.select(".monthly_report svg").remove();
    })


</script>

<script type="text/javascript">
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
    document.getElementById("searchcustomwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();
        var start = $('#start').val();
        var end = $('#end').val();
        var year = $('#year').val();
        var month = $('#month').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear && end!='') {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();
            return;
        }


        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }
        else if (start == '') {
                swal({
                    icon: "error",
                    title: "Please Provide start date",
                    button: false,
                    timer: 4500
                })
        }
        else if (end == '') {
                swal({
                    icon: "error",
                    title: "Please Provide End date",
                    button: false,
                    timer: 4500
                })
        }
        else {
            if (start>end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,
                "FromDate": start,
                "ToDate": end,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
            var sample;
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                    //$.ajax({
                    //    type: 'Get',
                    //    url: URL + 'api/UserSettings/GetEmployee',
                    //    headers: {
                    //        Authorization: 'Bearer ' + user1
                    //    },
                    //    dataType: 'json'
                    //}).success(function (response) {
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_CustomReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    if (response.status != "Error") {


                        sample = response.data.Table;
                        var lineName = sample[0].lineName;

                        //$('#custom_line').text(lineName);
                        //$('#custom_subsystem').text(machinecode);
                        d3.select(".custom_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.custom_report');

                        const a = $('.custom_report').height();
                        const b = $('.custom_report').width();

                        const margin = 150;
                        const width = b - 2 * margin-10;
                        const height = a - 2 * margin-100;

                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 700 - 2 * margin;

                       /* console.log(a+" : "+b);*/

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".custom_report")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")

                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "100px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-70)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups.append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) - 10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on("mouseout", function () {
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })

                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 5) + "px");

                                var text = 'Downtime: ' + d.tot_downtime + ' Min <br/> No of Occurence: ' + d.no_of_occurence + ' <br/> Downtime Reason: ' + d.Alarm_Description + '';

                                tooltip.select("div").html(text)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.MTTR) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.MTTR}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            //.text('Time(in minutes)')
                            .text('MTTR (in Minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else
                    {
                        $(".custom_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".custom_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });
                    //}).error(function (response) {
                    //    swal({
                    //        icon: "warning",
                    //        title: "Session Timeout",
                    //        button: true,
                    //        closeModal: false
                    //    })
                    //    window.location = R_url;
                    //});
        }

    })
    document.getElementById("searchyearwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();
        var year = $('#year').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }
        else if (year == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Year",
                    button: false,
                    timer: 4500
                })
        }
        else {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,
                "Year": year,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                    //$.ajax({
                    //    type: 'Get',
                    //    url: URL + 'api/UserSettings/GetEmployee',
                    //    headers: {
                    //        Authorization: 'Bearer ' + user1
                    //    },
                    //    dataType: 'json'
                    //}).success(function (response) {
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_YearwiseReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {

                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        sample = response.data.Table;
                        var lineName = sample[0].lineName;
                        //$('#yearly_line').text(lineName);
                        //$('#yearly_subsystem').text(machinecode);
                        d3.select(".year_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.year_report');

                        const a = $('.year_report').height();
                        const b = $('.year_report').width();

                        const margin = 150;
                        const width = b - 2 * margin-10;
                        const height = a - 2 * margin-200;

                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 700 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".year_report")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")



                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "100px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-70)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on("mouseout", function () {
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })

                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 5) + "px");

                                  var text = 'Downtime: ' + d.tot_downtime + ' Min <br/> No of Occurence: ' + d.no_of_occurence + ' <br/> Downtime Reason: ' + d.Alarm_Description + '';

                                tooltip.select("div").html(text)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        //barGroups
                        //    .append('text')
                        //    .attr('class', 'value')
                        //    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                        //    .attr('y', (a) => yScale(a.MTTR) + 30)
                        //    .attr('text-anchor', 'middle')
                        //    .text((a) => `${a.MTTR}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            //.text('Time(in minutes)')
                            .text('MTTR (in Minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else {
                         $(".year_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".year_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });
                    //}).error(function (response) {
                    //    swal({
                    //        icon: "warning",
                    //        title: "Session Timeout",
                    //        button: true,
                    //        closeModal: false
                    //    })
                    //    window.location = R_url;
                    //});
        }

    })
    document.getElementById("searchmonthwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();
        var month = $('#month').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }
        else if (month == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Month",
                    button: false,
                    timer: 4500
                })
        }
        else
        {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,
                "Year": month,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                    //$.ajax({
                    //    type: 'Get',
                    //    url: URL + 'api/UserSettings/GetEmployee',
                    //    headers: {
                    //        Authorization: 'Bearer ' + user1
                    //    },
                    //    dataType: 'json'
                    //}).success(function (response) {
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_MonthwiseReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();

                    if (response.status != "Error") {
                        sample = response.data.Table;
                        var lineName = sample[0].lineName;
                        //$('#monthly_line').text(lineName);
                       // $('#monthly_subsystem').text(machinecode);
                        d3.select(".monthly_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.monthly_report');

                        const a = $('.monthly_report').height();
                        const b = $('.monthly_report').width();

                        const margin = 150;
                        const width = b - 2 * margin -10;
                        const height = a - 2 * margin-200;


                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 700 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".monthly_report")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")



                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "100px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-70)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on("mouseout", function () {
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })

                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 5) + "px");

                                  var text = 'Downtime: ' + d.tot_downtime + ' Min <br/> No of Occurence: ' + d.no_of_occurence + ' <br/> Downtime Reason: ' + d.Alarm_Description + '';

                                tooltip.select("div").html(text)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        //barGroups
                        //    .append('text')
                        //    .attr('class', 'value')
                        //    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                        //    .attr('y', (a) => yScale(a.MTTR) + 30)
                        //    .attr('text-anchor', 'middle')
                        //    .text((a) => `${a.MTTR}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                           // .text('Time(in minutes)')
                            .text('MTTR(in Minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else
                    {
                        $(".monthly_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".monthly_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });
                    //}).error(function (response) {
                    //    swal({
                    //        icon: "warning",
                    //        title: "Session Timeout",
                    //        button: true,
                    //        closeModal: false
                    //    })
                    //    window.location = R_url;
                    //});
        }

    })



    //-----------------Today--------------------------//

    document.getElementById("searchtoday").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();

        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }

        else
        {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,

                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_TodayReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();

                    if (response.status != "Error") {
                        sample = response.data.Table;
                        var lineName = sample[0].lineName;
                       /* $('#today_line').text(lineName);*/

                        d3.select(".today_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.today_report');

                        const a = $('.today_report').height();
                        const b = $('.today_report').width();

                        const margin = 80;
                        const width = b - 2 * margin -10;
                        const height = a - 2 * margin-80;


                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 700 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".today_report")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")



                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "100px").style("height", "100px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-70)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on("mouseout", function () {
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })

                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 5) + "px");

                                  var text = 'Downtime: ' + d.tot_downtime + ' Min <br/> No of Occurence: ' + d.no_of_occurence + ' <br/> Downtime Reason: ' + d.Alarm_Description + '';

                                tooltip.select("div").html(text)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })



                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')

                            .text('MTTR(in Minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else
                    {
                        $(".today_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".today_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });

        }

    })


    //------------------Yesterday--------------------//

    document.getElementById("searchyesterday").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var records = $('.record').val();

        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (machinecode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Machine details",
                    button: false,
                    timer: 4500
                })
        }
        else if (records == '') {
            swal({
                icon: "error",
                title: "Please Provide No. of records",
                button: false,
                timer: 4500
            })
        }

        else
        {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "records": records,

                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/GetMTTR_YesterdayReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();

                    if (response.status != "Error") {
                        sample = response.data.Table;
                        var lineName = sample[0].lineName;
                       // $('#yesterday_line').text(lineName);

                        d3.select(".yesterday_report").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('.yesterday_report');

                        const a = $('.yesterday_report').height();
                        const b = $('.yesterday_report').width();

                        const margin = 150;
                        const width = b - 2 * margin -10;
                        const height = a - 2 * margin-200;


                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 700 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".yesterday_report")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")



                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "100px").style("height", "100px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        chart.append('g')
                            .attr('transform', `translate(10, ${height})`)
                            .call(d3.axisBottom(xScale))
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("dx", "-.8em")
                            .attr("dy", ".15em")
                            .attr("transform", function (d) {
                                return "rotate(-70)"
                            });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on("mouseout", function () {
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })

                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 5) + "px");

                                  var text = 'Downtime: ' + d.tot_downtime + 'Min <br/> No of Occurence: ' + d.no_of_occurence + ' <br/> Downtime Reason: ' + d.Alarm_Description + '';

                                tooltip.select("div").html(text)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })



                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')

                            .text('MTTR(in Minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else
                    {
                        $(".yesterday_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".yesterday_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });

        }

    })


</script>


