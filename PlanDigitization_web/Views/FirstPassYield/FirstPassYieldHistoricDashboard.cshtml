
@{
    ViewBag.Title = "FirstPassYieldHistoricDashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/d3.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.css">
<header class="page-header">
    <h2>First Pass Yield</h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("NewDash","Main")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            @*<li><span>Quality</span></li>
                <li><span>Historic Data & Analytics</span></li>
                <li><span>FirstPass Yield</span></li>*@
        </ol>
    </div>
</header>
@if (ViewContext.Controller.HasPermission("FirstPassHistoric-View"))
{
    <div class="form-group">
        <div class="row">
            @*<div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Line </label>
            </div>
            <div class="btn-group">
                <select id="linecode" class="form-control" name="linecode" title="*"></select>
            </div>&nbsp;&nbsp;*@
            <div class="btn-group">
                <label class="control-label" style="float:right; font-weight:bold;"> Select Variant </label>
            </div>
            <div class="btn-group">
                <select id="variantcode" class="form-control" name="variantcode" title="*">
                    <option value="">Select Line First</option>
                </select>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12">
            <div class="tabs tabs-danger">
                <ul class="nav nav-tabs">
                    <li class="active" id="custom_report">
                        <a href="#custom" data-toggle="tab">Custom</a>
                    </li>
                    <li id="yearly_report">
                        <a href="#yearly" data-toggle="tab"> Yearly</a>
                    </li>
                    <li id="monthly_report">
                        <a href="#monthly" data-toggle="tab">Monthly</a>
                    </li>
                </ul>
                <div class="tab-content">
                    <div id="custom" class="tab-pane active">
                        <section class="panel">
                            <div class="form-group">
                                <label class="col-md-2 control-label">Date range</label>
                                <div class="col-md-6">
                                    <div class="input-daterange input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                                        <span class="input-group-addon">to</span>
                                        <input type="text" class="form-control datepic" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" id="searchcustomwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetcustom" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="custom_line"></span></button>
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Subsystem : <span id="custom_subsystem"></span> </button>*@
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total OK Parts : <span id="custom_ok"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total NOK Parts : <span id="custom_notok"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total Reworked Parts : <span id="custom_rework"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">COPQ : <span id="custom_copq"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Quality : <span id="custom_quality"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant : <span id="custom_variant"></span></button>
                                </div>
                            </header>
                            <div class="panel-body">
                                @*<div class="chart chart-md" id="custom1"></div>*@
                                <div id='container' style="height:500px;width:100%">
                                    <svg style="height:100%;width:100%"></svg>
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="yearly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-labe">Select Year</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="date-own form-control" style="width: 150px;z-index:0;" type="text" id="year" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" id="searchyearwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetyear" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="yearly_line"></span></button>
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Subsystem : <span id="yearly_subsystem"></span> </button>*@
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total OK Parts : <span id="yearly_ok"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total NOK Parts : <span id="yearly_notok"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total Reworked Parts : <span id="yearly_rework"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">COPQ : <span id="yearly_copq"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Quality : <span id="yearly_quality"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant : <span id="yearly_variant"></span></button>
                                </div>
                            </header>
                            <div class="panel-body">
                                <div id='container' class="year_report" style="height:500px;width:100%">
                                    <svg style="height:100%;width:100%"></svg>
                                </div>
                            </div>
                        </section>
                    </div>

                    <div id="monthly" class="tab-pane">
                        <section class="panel">
                            <div class="form-group">
                                <div class="col-md-2"></div>
                                <label class="col-md-2 control-label">Select Month</label>
                                <div class="col-md-4">
                                    <div class="input-group">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                        <input class="month-own form-control" style="width: 150px;z-index:0;" type="text" id="month" readonly>
                                    </div>
                                </div>
                                <div class="col-md-4">
                                    <div class="btn-group">
                                        <button type="button" id="searchmonthwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                    </div>
                                    <div class="btn-group">
                                        <button type="button" id="resetmonth" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                    </div>
                                </div>
                            </div>
                            <header class="panel-heading">
                                <div class="btn-group">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line : <span id="monthly_line"></span></button>
                                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Subsystem : <span id="monthly_subsystem"></span></button>*@
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total OK Parts : <span id="monthly_ok"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total NOK Parts : <span id="monthly_notok"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total Reworked Parts : <span id="monthly_rework"></span> </button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">COPQ : <span id="monthly_copq"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Quality : <span id="monthly_quality"></span></button>
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant : <span id="monthly_variant"></span></button>
                                </div>
                            </header>
                            <div class="tabs">
                                <ul class="nav nav-tabs" id="nav">
                                    <li class="active" id="month_weekly">
                                        <a href="#weekly" data-toggle="tab">Weekly</a>
                                    </li>
                                    <li id="month_daily">
                                        <a href="#daily" data-toggle="tab">Daily</a>
                                    </li>
                                    <li id="month_shift">
                                        <a href="#shift" data-toggle="tab">Shift-wise</a>
                                    </li>
                                    <li id="month_shift">
                                        <a href="#hourly" data-toggle="tab">Hourly</a>
                                    </li>
                                </ul>
                                <div class="tab-content">
                                    <div id="weekly" class="tab-pane active">
                                        <!-- Flot: Basic -->
                                        <div id='container' class="monthly_week month" style="height:500px;width:100%">

                                        </div>
                                    </div>
                                    <div id="daily" class="tab-pane">
                                        <div id='container1' class="month_daily month" style="height:500px;width:100%">

                                        </div>
                                    </div>
                                    <div id="shift" class="tab-pane">
                                        <div id='container2' class="month_shift month" style="height:500px;width:100%">

                                        </div>
                                    </div>
                                    <div id="hourly" class="tab-pane">
                                        <div class="table-responsive">
                                            <div class="fa-hover mb-sm mt-sm col-md-6 col-lg-4 col-xl-3" style="float:right"><i class="fa fa-circle" style="color:#ffd800"></i>Shift Change</div>
                                            <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-hourly">
                                                <thead style="background-color:cadetblue">
                                                    <tr>
                                                        <th>Date</th>
                                                        <th>Variant</th>
                                                        <th>Type</th>
                                                        <th>Hr 0</th>
                                                        <th>Hr 1</th>
                                                        <th>Hr 2</th>
                                                        <th>Hr 3</th>
                                                        <th>Hr 4</th>
                                                        <th>Hr 5</th>
                                                        <th>Hr 6</th>
                                                        <th>Hr 7</th>
                                                        <th>Hr 8</th>
                                                        <th>Hr 9</th>
                                                        <th>Hr 10</th>
                                                        <th>Hr 11</th>
                                                        <th>Hr 12</th>
                                                        <th>Hr 13</th>
                                                        <th>Hr 14</th>
                                                        <th>Hr 15</th>
                                                        <th>Hr 16</th>
                                                        <th>Hr 17</th>
                                                        <th>Hr 18</th>
                                                        <th>Hr 19</th>
                                                        <th>Hr 20</th>
                                                        <th>Hr 21</th>
                                                        <th>Hr 22</th>
                                                        <th>Hr 23</th>
                                                    </tr>
                                                </thead>
                                                <tbody id="details1"></tbody>

                                                @*<span class="custom_error" style="color:red;font-size:13px;font-weight:bold;"></span>*@
                                            </table>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </section>

                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>First Pass Yield</h2>
            </div>

            <div class="modal-body" id="breakdown">

                <div class="panel-body">

                    <h4 style="font-family:'Times New Roman';font-weight:bold;">First Pass Yield Breakdown</h4>

                    <table class="table table-bordered no-wrap" id="reasons_table" style="border-style:solid;border-width:thin;">
                        <thead style="background-color:teal;color:white;">
                            <tr>
                                <th>Total OK Parts</th>
                                <th>Total NOK Parts</th>
                                <th>Total Rework Parts</th>

                            </tr>
                        </thead>
                        <tbody class="body mtable"></tbody>
                    </table>

                    <h4 style="font-family:'Times New Roman';font-weight:bold;">Rejection Reason Pareto</h4>

                    <div id='container' class="year_reportmodal" style="height:400px;width:70%">
                        <svg style="height:100%;width:100%" class="svgmodal"></svg>
                    </div>
                </div>

                @*<div class="panel-body">
                        <div class="modal-header">

                            <h2>Rejection Reason Pareto</h2>
                        </div>
                        <div id='container' class="year_reportmodal" style="height:400px;width:70%">
                            <svg style="height:100%;width:100%" class="svgmodal"></svg>
                        </div>
                    </div>*@
            </div>



        </div>
    </div>
}
else
{
    <div class="row">
        <h2 class="panel-title">View Permission is denied</h2>
    </div>
}
<!-- end: page -->
<script src="~/assets1/javascripts/swal.js"></script>
<script src="~/assets1/javascripts/swal_alert.js"></script>
<script src="~/assets1/datepicker_normal/datepicker_normal_jquery.min.js"></script>
<script src="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
@*<script src="https://code.jquery.com/jquery-3.5.1.js"></script>*@
<script src="~/assets1/javascripts/jquery.dataTables.min.js"></script>


<script type="text/javascript">
    $(".datepic").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        endDate: '+0d'
    });

    $('.month-own').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.date-own').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        startView: 2,
        endDate: '+0y',
        orientation: "bottom"
    });
</script>
<script type="text/javascript">
    $(function () {
        var CompanyCode = '@Session["CompanyCode"]';
        var PlantCode = '@Session["PlantCode"]';
        var LineCode = '@Session["LineCode"]';
         if (CompanyCode == "" && PlantCode == "" && LineCode == "") {
            swal({
                icon: "error",
                title: "Please Select Customer, Plant and Line...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else
            if (CompanyCode == "")
            {
                swal({
                    icon: "error",
                    title: "Please Select Customer...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
             
            else
                if (PlantCode == "")
                {
                    swal({
                        icon: "error",
                        title: "Please Select Plant...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                if (LineCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Line...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                else
                {
                    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
                    @*var myData = {
                        "Flag": "LineCode",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                    };
                     var R_url = '@Url.Action("Login", "Main")';
                    var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                    
                    $.ajax({
                        type: "POST",
                        url: '/Main/GetSettingdatas1',
                        data: myData,
                        dataType: "json",
                        success: function (response) {
                            //alert(response.data[0].Code);
                            var s = '<option value="">Select Line</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#linecode").html(s);
                        },
                        error: function (response) {
                            swal({
                                icon: "warning",
                                title: "Session Timeout",
                                button: true,
                                closeModal: false
                            })
                            window.location = R_url;
                        }
                    });*@
                    
                     var myData1 = {
                        "Flag": "Variant",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "LineCode":'@Session["LineCode"]',
                    };
                    var R_url = '@Url.Action("Login", "Main")';
                    var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';


                 $.ajax({
                        type: "POST",
                        url: '/Main/GetSettingdatas1',
                        data: myData1,
                        dataType: "json",
                        success: function (response) {
                            //alert(response.data[0].Code);
                            var s = '<option value="">Select Variant</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#variantcode").html(s);
                        },
                        error: function (response) {
                            swal({
                                icon: "warning",
                                title: "Session Timeout",
                                button: true,
                                closeModal: false
                            })
                            window.location = R_url;
                        }
                    });


                }

    });

    document.getElementById("resetcustom").addEventListener("click", function () {
        $('#start').val('');
        $('#end').val('');
        d3.select("#container svg").remove();
    })
    document.getElementById("resetyear").addEventListener("click", function () {
        $('#year').val('');
        d3.select(".year_report svg").remove();
    })
    document.getElementById("resetmonth").addEventListener("click", function () {
        $('#month').val('');
        d3.select(".monthly_week svg").remove();
        d3.select(".month_daily svg").remove();
        d3.select(".month_shift svg").remove();
    })

</script>


<script type="text/javascript">
    @*$('#linecode').on('change', function() {
        //alert(this.value);

           var myData1 = {
                        "Flag": "Variant",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "LineCode":this.value,
                    };
                    var R_url = '@Url.Action("Login", "Main")';
                    var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';


                 $.ajax({
                        type: "POST",
                        url: '/Main/GetSettingdatas1',
                        data: myData1,
                        dataType: "json",
                        success: function (response) {
                            //alert(response.data[0].Code);
                            var s = '<option value="">Select Variant</option>';
                            for (var i = 0; i < response.data.length; i++) {
                                s += '<option value="' + response.data[i].Code + '">' + response.data[i].Name + '</option>';
                            }
                            $("#variantcode").html(s);
                        },
                        error: function (response) {
                            swal({
                                icon: "warning",
                                title: "Session Timeout",
                                button: true,
                                closeModal: false
                            })
                            window.location = R_url;
                        }
                    });

    });*@

</script>


<script type="text/javascript">

    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
    document.getElementById("searchcustomwise").addEventListener("click", function () {

        var active_tab = $('ul .active').attr("id");
        var sub_active_tab = $('#nav .active').attr("id");
        var linecode = '@Session["LineCode"]';
        var variantcode = $('#variantcode').val();
        var start = $('#start').val();
        var end = $('#end').val();
        var year = $('#year').val();
        var month = $('#month').val();
        var modal = document.getElementById("myModal");
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear && end!='') {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();
            return;
        }

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (variantcode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Variant details",
                    button: false,
                    timer: 4500
                })
        }
        else if (start == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Start date",
                    button: false,
                    timer: 4500
                })
        }
        else if (end == '') {
                swal({
                    icon: "error",
                    title: "Please Provide End  Date",
                    button: false,
                    timer: 4500
                })
        }
        else
        {

            if (start>end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }
            var myData = {
                "linecode": linecode,
                "Variantcode": variantcode,
                "FromDate": start,
                "ToDate": end,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
            };
            var sample;
            var R_url = '@Url.Action("Login", "Main")';
             var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

              //$.ajax({
              //      type: 'Get',
              //      url: URL + 'api/UserSettings/GetEmployee',
              //      headers: {
              //             Authorization: 'Bearer ' + user1
              //         },
              //      dataType: 'json'
              //}).success(function (response) {
            $.ajax({
                type: "POST",
                url: URL + 'api/Firstpassyield/Getcustomwisereport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        $('#custom_line').text(response.data.Table[0].Linecode);
                        $('#custom_ok').text(response.data.Table[0].TotalOKParts);
                        $('#custom_notok').text(response.data.Table[0].TotalNOKParts);
                        $('#custom_rework').text(response.data.Table[0].TotalReworkParts);
                        $('#custom_copq').text(response.data.Table[0].COPQ);
                        $('#custom_quality').text(response.data.Table[0].Quality);
                        $('#custom_variant').text(response.data.Table[0].Variantcode);

                        sample = response.data.Table1;
                        d3.select("#container").append("svg");
                        const svg = d3.select('svg');
                        const svgContainer = d3.select('#container');

                        const a = $('#container').height();
                        const b = $('#container').width();

                        const margin = 80;
                        const width = b - 2 * margin;
                        const height = a - 2 * margin;

                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 600 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Name))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0,  d3.max(response.data.Table1, function (d) { return d.FirstPassFeild; })]);

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        if (response.data.Table[0].Type == "Date") {
                            chart.append('g')
                                .attr('transform', `translate(0, ${height})`)
                                .call(d3.axisBottom(xScale))
                                .selectAll("text")
                                .attr("y", 0)
                                .attr("x", -9)
                                .attr("dy", ".35em")
                                .attr("transform", "rotate(-45)")
                                .style("text-anchor", "end");
                        }
                        else {
                            chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale))
                        }

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Name))
                            .attr('y', (g) => yScale(g.FirstPassFeild))
                            .attr('height', (g) => height - yScale(g.FirstPassFeild))
                            .attr('width', xScale.bandwidth())

                            //.on('mouseenter', function (actual, i) {
                            //    d3.selectAll('.value')
                            //        .attr('opacity', 0)

                            //    d3.select(this)
                            //        .transition()
                            //        .duration(300)
                            //        .delay(300)
                            //        .attr('opacity', 0.6)
                            //        .attr('x', (a) => xScale(a.Name) - 5)
                            //        .attr('width', xScale.bandwidth() + 10)

                            //    const y = yScale(actual.FirstPassFeild)

                            //    line = chart.append('line')
                            //        .attr('id', 'limit')
                            //        .attr('x1', 0)
                            //        .attr('y1', y)
                            //        .attr('x2', width)
                            //        .attr('y2', y)

                            //    barGroups.append('text')
                            //        .attr('class', 'divergence')
                            //        .attr('x', (a) => xScale(a.Name) + xScale.bandwidth() / 2)
                            //        .attr('y', (a) => yScale(a.FirstPassFeild) + 30)
                            //        .attr('fill', 'white')
                            //        .attr('text-anchor', 'middle')
                            //        .text((a, idx) => {
                            //            const divergence = (a.FirstPassFeild - actual.FirstPassFeild).toFixed(1)

                            //            let text = ''
                            //            if (divergence > 0) text += '+'
                            //            text += `${divergence}%`

                            //            return idx !== i ? text : '';
                            //        })

                            //})

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Name))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                            })

                            .on('click', function (a) {

                                //alert(JSON.stringify(a))
                                var oee_myData = {};
                                if (response.data.Table[0].Type == "Month") {
                                    var xvalue = a.Month;
                                    var date = xvalue;
                                    var dates = new Date();
                                    //var year = dates.getFullYear();
                                    var year = a.Year;
                                    var totaldays = new Date(year, xvalue, 0).getDate();
                                    var firstDay = new Date(year, xvalue, -(totaldays - 1));
                                    var lastDay = new Date(year, xvalue, 0);
                                    var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                    var lday = lastDay.getFullYear() + "-" + (lastDay.getMonth() + 1) + "-" + lastDay.getDate();

                                    oee_myData = {
                                        "line": linecode,
                                        "variant": variantcode,
                                        "Fromdate": fday,
                                        "Todate": lday,
                                        "CompanyCode": '@Session["CompanyCode"]',
                                        "PlantCode": '@Session["PlantCode"]'
                                    };
                                }
                                else {
                                    var xvalue = a.Name;
                                    var date = xvalue;
                                    var datearray = date.split("-");
                                    var newdate = datearray[2] + '-' + datearray[1] + '-' + datearray[0];
                                    oee_myData = {
                                        "line": linecode,
                                        "variant": variantcode,
                                        "Fromdate": newdate,
                                        "Todate": newdate,
                                        "CompanyCode": '@Session["CompanyCode"]',
                                        "PlantCode": '@Session["PlantCode"]'
                                    };
                                }

                                oee_arr = [];
                                var R_url = '@Url.Action("Login", "Main")';
                                var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                                //$.ajax({
                                //    type: 'Get',
                                //    url: URL + 'api/UserSettings/GetEmployee',
                                //    headers: {
                                //        Authorization: 'Bearer ' + user1
                                //    },
                                //    dataType: 'json'
                                //}).success(function (response) {

                                $.ajax({
                                    type: "POST",
                                    url: URL + 'api/Firstpassyield/GetFPYBreakdown',
                                    data: oee_myData,
                                    headers: {
                                            Authorization: 'Bearer ' + user1
                                        },
                                    dataType: "json",
                                    success: function (breakdownresult) {

                                        modal.style.display = "block";
                                        //$('#breakdown').modal('show');
                                        if (response.status != "Error") {
                                            $(".mtable").html('');
                                            var j = 1;
                                            var cols = '';
                                            var sc = '';

                                                cols += "<tr>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalOKParts + "</td>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalNOKParts + "</td>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalReworkParts + "</td>";
                                                cols += "</tr>";

                                            $(".mtable").html(cols);
                                        }
                                        else {
                                            oee_sample = "";
                                        }

                                    },
                                    error: function (breakdownresult) {
                                        //console.log(breakdownresult);
                                        swal({
                                            icon: "warning",
                                            title: "Session Timeout",
                                            button: true,
                                            closeModal: false
                                        })
                                       window.location = R_url;
                                    }
                                });


                            $.ajax({
                                        type: "POST",
                                        dataType: "json",
                                        url: URL + 'api/Firstpassyield/GetFPYBreakdownPareto',
                                        data: oee_myData,
                                        headers: {
                                            Authorization: 'Bearer ' + user1
                                        },

                                        beforeSend: function () {
                                            $('.loading').show();
                                        },
                                        complete: function () {
                                            $('.loading').hide();
                                        },
                                    success: function (response) {


                                             d3.select(".year_reportmodal svg").remove();
                                        if (response.status != "Error") {
                                            sample_pareto = response.data.Table;

                                                const a = $('.year_reportmodal').height();
                                                const b = $('.year_reportmodal').width();



                                                var m = { top: 5, right: 50, bottom: 150, left: 50 }
                                                    , h = a - m.top - m.bottom
                                                    , w = b - m.left - m.right
                                                    , barWidth = 5;

                                                var dataset = null;
                                                //typecast Amount to #, calculate total, and cumulative amounts


                                                //Axes and scales
                                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                                xScale.domain(sample_pareto.map(function (d) { return d.RejectionDescription; }));

                                                var yhist = d3.scaleLinear()
                                                    .domain([0, d3.max(sample_pareto, function (d) { return d.Frequency; })])
                                                    .range([h, 0]);

                                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                                var xAxis = d3.axisBottom()
                                                    .scale(xScale);


                                                var yAxis = d3.axisLeft()
                                                    .scale(yhist)



                                                var yAxis2 = d3.axisRight()
                                                    .scale(ycum);
                                                d3.selectAll(".year_reportmodal > *").remove();

                                                ////Draw svg
                                                var svg_pareto = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", w + m.left + m.right)
                                                    .attr("height", h + m.top + m.bottom)
                                                    .append("g")
                                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                                //Draw histogram
                                                var bar_pareto = svg_pareto.selectAll(".bar")
                                                    .data(sample_pareto)
                                                    .enter().append("g")
                                                    .attr("class", "bar")




                                                bar_pareto.append("rect")
                                                    .attr("x", function (d) { return xScale(d.RejectionDescription); })
                                                    .attr("width", xScale.bandwidth() - 2)
                                                    .attr("y", function (d) { return yhist(d.Frequency); })
                                                    .attr("height", function (d) { return h - yhist(d.Frequency); })
                                                    .style("fill", function (d) {
                                                        console.log(color(d.Frequency))
                                                        return color(d.Frequency)
                                                    })
                                                    .attr("fill", color)
                                                    .attr("text", function (d) { return `${d.Frequency}` })



                                                ////Draw CDF line
                                            var guide = d3.line()
                                                .x(function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .y(function (d) { return ycum(d.Percentage) });



                                            var line = svg_pareto.append('path')
                                                .datum(sample_pareto)
                                                .attr('d', guide)
                                                .attr('class', 'line');

                                            svg_pareto.selectAll(".line")
                                                .data(sample_pareto)
                                                .enter().append("circle")
                                                .attr("r", 3.5)
                                                .attr("cx", function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .attr("cy", function (d) { return ycum(d.Percentage) })



                                                //Draw axes
                                                svg_pareto.append("g")
                                                    .attr("class", "x axis")
                                                    .attr("transform", "translate(0," + h + ")")
                                                    .call(xAxis)


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .call(yAxis)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", -50)
                                                    .attr("dy", ".71em")
                                                    .style("text-anchor", "end")
                                                    .text("Frequency");


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .call(yAxis2)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", 50)
                                                    .attr("dy", "-.71em")
                                                    .style("text-anchor", "end")
                                                    .text("Percentage %");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label")
                                                    //.attr("text-anchor", "end")
                                                    .attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "rotate(-90)")
                                                    .text("Frequency");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label2")
                                                    //.attr("text-anchor", "end")
                                                    //.attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", w+50)
                                                    .text("Percentage");


                                            }

                                            else {
                                                sample = "";

                                                $(".year_reportmodal").empty();

                                                var div_width = 400;
                                                var div_height = 400;
                                                var svg = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", div_width)
                                                    .attr("height", div_height)
                                                    .attr("preserveAspectRatio", "xMidYMid")
                                                    .append("g")
                                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                                svg.append("text")
                                                    .text("No Data Available")
                                                    .style("font-size", "40px");
                                            }
                                        },
                                        error: function (result) {
                                            swal({
                                                icon: "warning",
                                                title: "Session Timeout",
                                                button: true,
                                                closeModal: false
                                            })
                                            window.location = R_url;
                                        }
                                    });

                    //    }).error(function (response) {
                    //    swal({
                    //        icon: "warning",
                    //        title: "Session Timeout",
                    //        button: true,
                    //        closeModal: false
                    //    })
                    //    window.location = R_url;
                    //});
                                //d3.select(this)
                                //var xvalue = a.Name;
                                //var yvalue = a.OEE;

                                //console.log(xvalue);
                                //console.log(yvalue);
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Name) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.FirstPassFeild) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.FirstPassFeild}%`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('FirstPass Yield (%)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 2.0)
                            .attr('text-anchor', 'middle')
                            .text(response.data.Table[0].Type)
                    }
                    else
                    {
                        sample = "";
                        $('#custom_line').text('');
                        $('#custom_ok').text('');
                        $('#custom_notok').text('');
                        $('#custom_rework').text('');
                        $('#custom_copq').text('');
                        $('#custom_quality').text('');
                        $('#custom_variant').text('');
                        $("#container").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select("#container").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {

                }
            });
              //}).error(function (response) {
              //    swal({
              //        icon: "warning",
              //        title: "Session Timeout",
              //        button: true,
              //        closeModal: false
              //    })
              //    window.location = R_url;
              //});
        }

    })

    document.getElementById("searchyearwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var variantcode = $('#variantcode').val();
        var year = $('#year').val();
        var modal = document.getElementById("myModal");
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (variantcode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Variant details",
                    button: false,
                    timer: 4500
                })
        }
        else if (year == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Year",
                    button: false,
                    timer: 4500
                })
        }
        else {
             var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            //$.ajax({
            //    type: 'Get',
            //    url: URL + 'api/UserSettings/GetEmployee',
            //    headers: {
            //        Authorization: 'Bearer ' + user1
            //    },
            //    dataType: 'json'
            //}).success(function (response) {
            var myData = {
                "linecode": linecode,
                "Variantcode": variantcode,
                "date": year,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
            };

            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/Firstpassyield/Getyearwisereport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                   // console.log(response);
                    d3.select("svg").remove();
                    if (response.status != "Error") {

                        $('#yearly_line').text(response.data.Table[0].Linecode);
                        $('#yearly_ok').text(response.data.Table[0].TotalOK_Parts);
                        $('#yearly_notok').text(response.data.Table[0].TotalNOK_Parts);
                        $('#yearly_rework').text(response.data.Table[0].TotalRework_Parts);
                        $('#yearly_copq').text(response.data.Table[0].COPQ);
                        $('#yearly_quality').text(response.data.Table[0].Quality);
                        $('#yearly_variant').text(response.data.Table[0].Variantcode);

                        sample = response.data.Table1;
                        //const svg = d3.select('.year_report').append('svg');
                        d3.select(".year_report").append("svg");
                        const svg = d3.select('svg');

                        const svgContainer = d3.select('#container');

                        const a = $('.year_report').height();
                        const b = $('.year_report').width();

                        const margin = 80;
                        const width = b - 2 * margin;
                        const height = a - 2 * margin;

                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 600 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Name))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table1, function (d) { return d.FirstPassFeild; })]);

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale));

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )

                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')

                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Name))
                            .attr('y', (g) => yScale(g.FirstPassFeild))
                            .attr('height', (g) => height - yScale(g.FirstPassFeild))
                            .attr('width', xScale.bandwidth())

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Name))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                            })

                            .on('click', function (a) {
                                $("#myModal").modal({
                                    backdrop: 'static',
                                    keyboard: false
                                });
                                $('body').css({
                                    overflow: 'hidden'
                                });
                                var xvalue = a.Month;
                                var date = new Date();
                                var totaldays = new Date(year, xvalue, 0).getDate();
                                var firstDay = new Date(year, xvalue, -(totaldays - 1));
                                var lastDay = new Date(year, xvalue, 0);
                                var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                var lday = lastDay.getFullYear() + "-" + (lastDay.getMonth() + 1) + "-" + lastDay.getDate();

                                var oee_myData = {
                                    "line": linecode,
                                    "variant": variantcode,
                                    "Fromdate": fday,
                                    "Todate": lday,
                                    "CompanyCode": '@Session["CompanyCode"]',
                                    "PlantCode": '@Session["PlantCode"]',
                                };

                                oee_arr = [];
                                var R_url = '@Url.Action("Login", "Main")';
                                var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                                //    $.ajax({
                                //         type: 'Get',
                                //            url: URL + 'api/UserSettings/GetEmployee',
                                //        headers: {
                                //            Authorization: 'Bearer ' + user1
                                //        },
                                //        dataType: 'json'
                                //}).success(function (response) {
                                $.ajax({
                                    type: "POST",
                                    url: URL + 'api/Firstpassyield/GetFPYBreakdown',
                                    data: oee_myData,
                                    headers: {
                                            Authorization: 'Bearer ' + user1
                                        },
                                    dataType: "json",
                                    success: function (breakdownresult) {

                                        modal.style.display = "block";
                                        //$('#breakdown').modal('show');
                                        if (response.status != "Error") {
                                            $(".mtable").html('');
                                            var j = 1;
                                            var cols = '';
                                            var sc = '';

                                                cols += "<tr>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalOKParts + "</td>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalNOKParts + "</td>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalReworkParts + "</td>";
                                                cols += "</tr>";

                                            $(".mtable").html(cols);
                                        }
                                        else {
                                            oee_sample = "";
                                        }

                                    },
                                    error: function (breakdownresult) {
                                    }
                                }).error(function (response) {
                                    swal({
                                        icon: "warning",
                                        title: "Session Timeout",
                                        button: true,
                                        closeModal: false
                                    })
                                   // window.location = R_url;
                                });


                                $.ajax({
                                        type: "POST",
                                        dataType: "json",
                                        url: URL + 'api/Firstpassyield/GetFPYBreakdownPareto',
                                        data: oee_myData,
                                        headers: {
                                            Authorization: 'Bearer ' + user1
                                        },

                                        beforeSend: function () {
                                            $('.loading').show();
                                        },
                                        complete: function () {
                                            $('.loading').hide();
                                        },
                                    success: function (response) {


                                        d3.select(".year_reportmodal svg").remove();
                                       
                                        if (response.status != "Error") {
                                            sample_pareto = response.data.Table;

                                                const a = $('.year_reportmodal').height();
                                                const b = $('.year_reportmodal').width();



                                                var m = { top: 5, right: 50, bottom: 150, left: 50 }
                                                    , h = a - m.top - m.bottom
                                                    , w = b - m.left - m.right
                                                    , barWidth = 5;

                                                var dataset = null;
                                                //typecast Amount to #, calculate total, and cumulative amounts


                                                //Axes and scales
                                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                                xScale.domain(sample_pareto.map(function (d) { return d.RejectionDescription; }));

                                                var yhist = d3.scaleLinear()
                                                    .domain([0, d3.max(sample_pareto, function (d) { return d.Frequency; })])
                                                    .range([h, 0]);

                                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                                var xAxis = d3.axisBottom()
                                                    .scale(xScale);


                                                var yAxis = d3.axisLeft()
                                                    .scale(yhist)



                                                var yAxis2 = d3.axisRight()
                                                    .scale(ycum);
                                                d3.selectAll(".year_reportmodal > *").remove();

                                                ////Draw svg
                                                var svg_pareto = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", w + m.left + m.right)
                                                    .attr("height", h + m.top + m.bottom)
                                                    .append("g")
                                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                                //Draw histogram
                                                var bar_pareto = svg_pareto.selectAll(".bar")
                                                    .data(sample_pareto)
                                                    .enter().append("g")
                                                    .attr("class", "bar")




                                                bar_pareto.append("rect")
                                                    .attr("x", function (d) { return xScale(d.RejectionDescription); })
                                                    .attr("width", xScale.bandwidth() - 2)
                                                    .attr("y", function (d) { return yhist(d.Frequency); })
                                                    .attr("height", function (d) { return h - yhist(d.Frequency); })
                                                    .style("fill", function (d) {
                                                        console.log(color(d.Frequency))
                                                        return color(d.Frequency)
                                                    })
                                                    .attr("fill", color)
                                                    .attr("text", function (d) { return `${d.Frequency}` })



                                                ////Draw CDF line
                                            var guide = d3.line()
                                                .x(function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .y(function (d) { return ycum(d.Percentage) });



                                            var line = svg_pareto.append('path')
                                                .datum(sample_pareto)
                                                .attr('d', guide)
                                                .attr('class', 'line');

                                            svg_pareto.selectAll(".line")
                                                .data(sample_pareto)
                                                .enter().append("circle")
                                                .attr("r", 3.5)
                                                .attr("cx", function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .attr("cy", function (d) { return ycum(d.Percentage) })



                                                //Draw axes
                                                svg_pareto.append("g")
                                                    .attr("class", "x axis")
                                                    .attr("transform", "translate(0," + h + ")")
                                                    .call(xAxis)


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .call(yAxis)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", -50)
                                                    .attr("dy", ".71em")
                                                    .style("text-anchor", "end")
                                                    .text("Frequency");


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .call(yAxis2)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", 50)
                                                    .attr("dy", "-.71em")
                                                    .style("text-anchor", "end")
                                                    .text("Percentage %");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label")
                                                    //.attr("text-anchor", "end")
                                                    .attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "rotate(-90)")
                                                    .text("Frequency");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label2")
                                                    //.attr("text-anchor", "end")
                                                    //.attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", w+50)
                                                    .text("Percentage");


                                            }

                                            else {
                                                sample = "";

                                                $(".year_reportmodal").empty();

                                                var div_width = 400;
                                                var div_height = 400;
                                                var svg = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", div_width)
                                                    .attr("height", div_height)
                                                    .attr("preserveAspectRatio", "xMidYMid")
                                                    .append("g")
                                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                                svg.append("text")
                                                    .text("No Data Available")
                                                    .style("font-size", "40px");
                                            }
                                        },
                                    error: function (result) {
                                        console.log(JSON.stringify(result))
                                        if (result.status == "401") {
                                            swal({
                                                icon: "warning",
                                                title: "Session Timeout",
                                                button: true,
                                                closeModal: false
                                            })
                                            window.location = R_url;
                                        }
                                        else {
                                            swal({
                                                icon: "warning",
                                                title: result.responseText,
                                                button: true,
                                                closeModal: false
                                            })
                                            
                                        }
                                        }
                                    });


                            })


                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Name) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.FirstPassFeild) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.FirstPassFeild}%`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('FirstPass Yield (%)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text('Month')
                    }
                    else {
                        sample = "";
                        $('#yearly_line').text('');
                        $('#yearly_ok').text('');
                        $('#yearly_notok').text('');
                        $('#yearly_rework').text('');
                        $('#yearly_copq').text('');
                        $('#yearly_quality').text('');
                        $('#yearly_variant').text('');
                        $(".year_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".year_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }
                },
                error: function (result) {
                    if (result.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: result.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });




            //}).error(function (response) {
            //    swal({
            //        icon: "warning",
            //        title: "Session Timeout",
            //        button: true,
            //        closeModal: false
            //    })
            //    window.location = R_url;
            //});
        }

    })

    document.getElementById("searchmonthwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var variantcode = $('#variantcode').val();
        var month = $('#month').val();
        var modal = document.getElementById("myModal");
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        $("#daily").removeClass("active");
        $("#shift").removeClass("active");
        $("#weekly").addClass("active");

        $("#month_daily").removeClass("active");
        $("#month_shift").removeClass("active");
        $("#month_weekly").addClass("active");

         if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }
        else if (variantcode == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Variant details",
                    button: false,
                    timer: 4500
                })
         }
         else if (month == '') {
                swal({
                    icon: "error",
                    title: "Please Provide Month",
                    button: false,
                    timer: 4500
                })
        }
        else {
            var chartData = [];
            var myData = {
                "line": linecode,
                "Variantcode": variantcode,
                "date": month,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
            };
            var myData_daily = {
                "linecode": linecode,
                "Variantcode": variantcode,
                "date": month,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
             };
              var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            //$.ajax({
            //    type: 'Get',
            //    url: URL + 'api/UserSettings/GetEmployee',
            //    headers: {
            //        Authorization: 'Bearer ' + user1
            //    },
            //    dataType: 'json'
            //}).success(function (response) {
            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/Firstpassyield/GetWeekwisereport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    //console.log(response);
                    d3.select(".monthly_week svg").remove();
                    if (response.status != "Error") {
                        //$('#monthly_line').text(response.data.Table[0].Linecode);
                        //$('#monthly_ok').text(response.data.Table[0].TotalOK_Parts);
                        //$('#monthly_notok').text(response.data.Table[0].TotalNOK_Parts);
                        //$('#monthly_rework').text(response.data.Table[0].TotalRework_Parts);
                        //$('#monthly_copq').text(response.data.Table[0].COPQ);
                        //$('#monthly_quality').text(response.data.Table[0].Quality);
                        //$('#monthly_variant').text(response.data.Table[0].Variantcode);
                        //console.log(response.data.Table1);
                        sample = response.data.Table1;
                        //const svg = d3.select('.monthly_week').append('svg');
                        const svg = d3.select(".monthly_week").append("svg");
                        const svgContainer = d3.select('#container');

                        const a = $('.month').height();
                        const b = $('.month').width();

                        const margin = 80;
                        const width = b - 2 * margin;
                        const height = a - 2 * margin;

                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 600 - 2 * margin;

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Weekname))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table1, function (d) { return d.FirstPassFeild; })]);

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        chart.append('g')
                            .attr('transform', `translate(0, ${height})`)
                            .call(d3.axisBottom(xScale));

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )

                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')

                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Weekname))
                            .attr('y', (g) => yScale(g.FirstPassFeild))
                            .attr('height', (g) => height - yScale(g.FirstPassFeild))
                            .attr('width', xScale.bandwidth())
                            //.on('mouseenter', function (actual, i) {
                            //    d3.selectAll('.value')
                            //        .attr('opacity', 0)

                            //    d3.select(this)
                            //        .transition()
                            //        .duration(300)
                            //        .delay(300)
                            //        .attr('opacity', 0.6)
                            //        .attr('x', (a) => xScale(a.Weekname) - 5)
                            //        .attr('width', xScale.bandwidth() + 10)

                            //    const y = yScale(actual.FirstPassFeild)

                            //    line = chart.append('line')
                            //        .attr('id', 'limit')
                            //        .attr('x1', 0)
                            //        .attr('y1', y)
                            //        .attr('x2', width)
                            //        .attr('y2', y)

                            //    barGroups.append('text')
                            //        .attr('class', 'divergence')
                            //        .attr('x', (a) => xScale(a.Weekname) + xScale.bandwidth() / 2)
                            //        .attr('y', (a) => yScale(a.FirstPassFeild) + 30)
                            //        .attr('fill', 'white')
                            //        .attr('text-anchor', 'middle')
                            //        .text((a, idx) => {
                            //            const divergence = (a.FirstPassFeild - actual.FirstPassFeild).toFixed(1)

                            //            let text = ''
                            //            if (divergence > 0) text += '+'
                            //            text += `${divergence}%`

                            //            return idx !== i ? text : '';
                            //        })

                            //})

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Weekname))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                            })

                        .on('click', function (a) {
                                var xvalue = a.Week;
                                var datearray = month.split("-");
                                var totaldays = new Date(datearray[0], datearray[1], 0).getDate();
                                var firstDay = new Date(datearray[0], datearray[1], -(totaldays - 1));
                                var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                var oee_myData = {
                                    "line": linecode,
                                    "variant": variantcode,
                                    "Date": fday,
                                    "WeekNo": xvalue,
                                    "CompanyCode": '@Session["CompanyCode"]',
                                    "PlantCode": '@Session["PlantCode"]',
                                };
                                console.log(oee_myData);
                                oee_arr = [];
                                $.ajax({
                                    type: "POST",
                                    url: URL + 'api/Firstpassyield/GetFPYweekBreakdown',
                                    data: oee_myData,
                                     headers: {
                                        Authorization: 'Bearer ' + user1
                                    },
                                    dataType: "json",
                                    success: function (breakdownresult) {
                                        modal.style.display = "block";
                                        //$('#breakdown').modal('show');
                                        if (response.status != "Error") {
                                            $(".mtable").html('');
                                            var j = 1;
                                            var cols = '';
                                            var sc = '';

                                                cols += "<tr>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalOKParts + "</td>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalNOKParts + "</td>";
                                                cols += "<td>" + breakdownresult.data.Table[0].TotalReworkParts + "</td>";
                                                cols += "</tr>";

                                            $(".mtable").html(cols);
                                        }
                                        else {
                                            oee_sample = "";
                                        }

                                    },
                                    error: function (breakdownresult) {
                                    }
                                });


                                 $.ajax({
                                        type: "POST",
                                        dataType: "json",
                                        url: URL + 'api/Firstpassyield/GetFPYweekBreakdownPareto',
                                        data: oee_myData,
                                        headers: {
                                            Authorization: 'Bearer ' + user1
                                        },

                                        beforeSend: function () {
                                            $('.loading').show();
                                        },
                                        complete: function () {
                                            $('.loading').hide();
                                        },
                                    success: function (response) {


                                             d3.select(".year_reportmodal svg").remove();
                                        if (response.status != "Error") {
                                            sample_pareto = response.data.Table;

                                                const a = $('.year_reportmodal').height();
                                                const b = $('.year_reportmodal').width();



                                                var m = { top: 5, right: 50, bottom: 150, left: 50 }
                                                    , h = a - m.top - m.bottom
                                                    , w = b - m.left - m.right
                                                    , barWidth = 5;

                                                var dataset = null;
                                                //typecast Amount to #, calculate total, and cumulative amounts


                                                //Axes and scales
                                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                                xScale.domain(sample_pareto.map(function (d) { return d.RejectionDescription; }));

                                                var yhist = d3.scaleLinear()
                                                    .domain([0, d3.max(sample_pareto, function (d) { return d.Frequency; })])
                                                    .range([h, 0]);

                                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                                var xAxis = d3.axisBottom()
                                                    .scale(xScale);


                                                var yAxis = d3.axisLeft()
                                                    .scale(yhist)



                                                var yAxis2 = d3.axisRight()
                                                    .scale(ycum);
                                                d3.selectAll(".year_reportmodal > *").remove();

                                                ////Draw svg
                                                var svg_pareto = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", w + m.left + m.right)
                                                    .attr("height", h + m.top + m.bottom)
                                                    .append("g")
                                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                                //Draw histogram
                                                var bar_pareto = svg_pareto.selectAll(".bar")
                                                    .data(sample_pareto)
                                                    .enter().append("g")
                                                    .attr("class", "bar")




                                                bar_pareto.append("rect")
                                                    .attr("x", function (d) { return xScale(d.RejectionDescription); })
                                                    .attr("width", xScale.bandwidth() - 2)
                                                    .attr("y", function (d) { return yhist(d.Frequency); })
                                                    .attr("height", function (d) { return h - yhist(d.Frequency); })
                                                    .style("fill", function (d) {
                                                        console.log(color(d.Frequency))
                                                        return color(d.Frequency)
                                                    })
                                                    .attr("fill", color)
                                                    .attr("text", function (d) { return `${d.Frequency}` })



                                                ////Draw CDF line
                                            var guide = d3.line()
                                                .x(function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .y(function (d) { return ycum(d.Percentage) });



                                            var line = svg_pareto.append('path')
                                                .datum(sample_pareto)
                                                .attr('d', guide)
                                                .attr('class', 'line');

                                            svg_pareto.selectAll(".line")
                                                .data(sample_pareto)
                                                .enter().append("circle")
                                                .attr("r", 3.5)
                                                .attr("cx", function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .attr("cy", function (d) { return ycum(d.Percentage) })



                                                //Draw axes
                                                svg_pareto.append("g")
                                                    .attr("class", "x axis")
                                                    .attr("transform", "translate(0," + h + ")")
                                                    .call(xAxis)


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .call(yAxis)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", -50)
                                                    .attr("dy", ".71em")
                                                    .style("text-anchor", "end")
                                                    .text("Frequency");


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .call(yAxis2)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", 50)
                                                    .attr("dy", "-.71em")
                                                    .style("text-anchor", "end")
                                                    .text("Percentage %");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label")
                                                    //.attr("text-anchor", "end")
                                                    .attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "rotate(-90)")
                                                    .text("Frequency");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label2")
                                                    //.attr("text-anchor", "end")
                                                    //.attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", w+50)
                                                    .text("Percentage");


                                            }

                                            else {
                                                sample = "";

                                                $(".year_reportmodal").empty();

                                                var div_width = 400;
                                                var div_height = 400;
                                                var svg = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", div_width)
                                                    .attr("height", div_height)
                                                    .attr("preserveAspectRatio", "xMidYMid")
                                                    .append("g")
                                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                                svg.append("text")
                                                    .text("No Data Available")
                                                    .style("font-size", "40px");
                                            }
                                        },
                                        error: function (result) {
                                            if (result.status == "401") {
                                                swal({
                                                    icon: "warning",
                                                    title: "Session Timeout",
                                                    button: true,
                                                    closeModal: false
                                                })
                                                window.location = R_url;
                                            }
                                            else {
                                                swal({
                                                    icon: "warning",
                                                    title: result.responseText,
                                                    button: true,
                                                    closeModal: false
                                                })

                                            }
                                        }
                                    });

                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Weekname) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.FirstPassFeild) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.FirstPassFeild}%`)


                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('FirstPass Yield (%)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text('Week')
                    }
                    else {
                        sample = "";
                        //$('#monthly_line').text('');
                        //$('#monthly_ok').text('');
                        //$('#monthly_notok').text('');
                        //$('#monthly_rework').text('');
                        //$('#monthly_copq').text('');
                        //$('#monthly_quality').text('');
                        //$('#monthly_variant').text('');
                        $(".monthly_week").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".monthly_week").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                    //Daily Details
                    $.ajax({
                        type: "POST",
                        dataType: "json",
                        url: URL + 'api/Firstpassyield/GetDaywisereport',
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        data: myData_daily,
                        success: function (response) {
                            //console.log(response);
                            d3.select(".month_daily svg").remove();
                            if (response.status != "Error") {
                                $('#monthly_line').text(response.data.Table[0].Linecode);
                                $('#monthly_ok').text(response.data.Table[0].TotalOKParts);
                                $('#monthly_notok').text(response.data.Table[0].TotalNOKParts);
                                $('#monthly_rework').text(response.data.Table[0].TotalReworkParts);
                                $('#monthly_copq').text(response.data.Table[0].COPQ);
                                $('#monthly_quality').text(response.data.Table[0].Quality);
                                $('#monthly_variant').text(response.data.Table[0].Variantcode);

                                sample = response.data.Table1;
                                //  const svg = d3.select('.month_daily').append('svg');

                                const svg = d3.select(".month_daily").append("svg");
                                const svgContainer = d3.select('#container1');

                                const a = $('.month').height();
                                const b = $('.month').width();

                                const margin = 80;
                                const width = b - 2 * margin;
                                const height = a - 2 * margin;

                                //const margin = 80;
                                //const width = 1000 - 2 * margin;
                                //const height = 600 - 2 * margin;

                                const chart = svg.append('g')
                                    .attr('transform', `translate(${margin}, ${margin})`);

                                const xScale = d3.scaleBand()
                                    .range([0, width])
                                    .domain(sample.map((s) => s.date))
                                    .padding(0.4)

                                const yScale = d3.scaleLinear()
                                    .range([height, 0])
                                    .domain([0, d3.max(response.data.Table1, function (d) { return d.Firstpassyeild; })]);

                                const makeYLines = () => d3.axisLeft()
                                    .scale(yScale)

                                chart.append('g')
                                    .attr('transform', `translate(0, ${height})`)
                                    .call(d3.axisBottom(xScale))
                                    .selectAll("text")
                                    .attr("y", 0)
                                    .attr("x", -9)
                                    .attr("dy", ".35em")
                                    .attr("transform", "rotate(-45)")
                                    .style("text-anchor", "end");

                                chart.append('g')
                                    .call(d3.axisLeft(yScale));

                                chart.append('g')
                                    .attr('class', 'grid')
                                    .call(makeYLines()
                                        .tickSize(-width, 0, 0)
                                        .tickFormat('')
                                    )

                                const barGroups = chart.selectAll()
                                    .data(sample)
                                    .enter()
                                    .append('g')

                                barGroups
                                    .append('rect')
                                    .attr('class', 'bar')
                                    .attr('x', (g) => xScale(g.date))
                                    .attr('y', (g) => yScale(g.Firstpassyeild))
                                    .attr('height', (g) => height - yScale(g.Firstpassyeild))
                                    .attr('width', xScale.bandwidth())
                                    //.on('mouseenter', function (actual, i) {
                                    //    d3.selectAll('.value')
                                    //        .attr('opacity', 0)

                                    //    d3.select(this)
                                    //        .transition()
                                    //        .duration(300)
                                    //        .delay(300)
                                    //        .attr('opacity', 0.6)
                                    //        .attr('x', (a) => xScale(a.date) - 5)
                                    //        .attr('width', xScale.bandwidth() + 10)

                                    //    const y = yScale(actual.Firstpassyeild)

                                    //    line = chart.append('line')
                                    //        .attr('id', 'limit')
                                    //        .attr('x1', 0)
                                    //        .attr('y1', y)
                                    //        .attr('x2', width)
                                    //        .attr('y2', y)

                                    //    barGroups.append('text')
                                    //        .attr('class', 'divergence')
                                    //        .attr('x', (a) => xScale(a.date) + xScale.bandwidth() / 2)
                                    //        .attr('y', (a) => yScale(a.Firstpassyeild) + 30)
                                    //        .attr('fill', 'white')
                                    //        .attr('text-anchor', 'middle')
                                    //        .text((a, idx) => {
                                    //            const divergence = (a.Firstpassyeild - actual.Firstpassyeild).toFixed(1)

                                    //            let text = ''
                                    //            if (divergence > 0) text += '+'
                                    //            text += `${divergence}%`

                                    //            return idx !== i ? text : '';
                                    //        })

                                    //})

                                    .on('mouseleave', function () {
                                        d3.selectAll('.value')
                                            .attr('opacity', 1)

                                        d3.select(this)
                                            .transition()
                                            .duration(300)
                                            .attr('opacity', 1)
                                            .attr('x', (a) => xScale(a.date))
                                            .attr('width', xScale.bandwidth())

                                        chart.selectAll('#limit').remove()
                                        chart.selectAll('.divergence').remove()
                                    })

                                    .on('click', function (a) {
                                        var xvalue = a.date;
                                        var datearray = xvalue.split("-");

                                        var newdate = datearray[2] + '-' + datearray[1] + '-' + datearray[0];

                                        var oee_myData = {
                                            "line": linecode,
                                            "variant": variantcode,
                                            "Fromdate": newdate,
                                            "Todate": newdate,
                                            "CompanyCode": '@Session["CompanyCode"]',
                                            "PlantCode": '@Session["PlantCode"]',
                                        };
                                        var R_url = '@Url.Action("Login", "Main")';
                                        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                                        //$.ajax({
                                        //    type: 'Get',
                                        //    url: URL + 'api/UserSettings/GetEmployee',
                                        //    headers: {
                                        //        Authorization: 'Bearer ' + user1
                                        //    },
                                        //    dataType: 'json'
                                        //}).success(function (response) {

                                        oee_arr = [];
                                        $.ajax({
                                            type: "POST",
                                            url: URL + 'api/Firstpassyield/GetFPYBreakdown',
                                            data: oee_myData,
                                            headers: {
                                                Authorization: 'Bearer ' + user1
                                            },
                                            dataType: "json",
                                            success: function (breakdownresult) {
                                                modal.style.display = "block";
                                                //$('#breakdown').modal('show');
                                                if (response.status != "Error") {
                                                    $(".mtable").html('');
                                                    var j = 1;
                                                    var cols = '';
                                                    var sc = '';

                                                    cols += "<tr>";
                                                    cols += "<td>" + breakdownresult.data.Table[0].TotalOKParts + "</td>";
                                                    cols += "<td>" + breakdownresult.data.Table[0].TotalNOKParts + "</td>";
                                                    cols += "<td>" + breakdownresult.data.Table[0].TotalReworkParts + "</td>";
                                                    cols += "</tr>";

                                                    $(".mtable").html(cols);
                                                }
                                                else {
                                                    oee_sample = "";
                                                }

                                            },
                                            error: function (breakdownresult) {
                                            }
                                        });

                                        $.ajax({
                                    type: "POST",
                                    dataType: "json",
                                    url: URL + 'api/Firstpassyield/GetFPYBreakdownPareto',
                                    data: oee_myData,
                                    headers: {
                                        Authorization: 'Bearer ' + user1
                                    },

                                    beforeSend: function () {
                                        $('.loading').show();
                                    },
                                    complete: function () {
                                        $('.loading').hide();
                                    },
                                    success: function (response) {


                                        d3.select(".year_reportmodal svg").remove();
                                        if (response.status != "Error") {
                                            sample_pareto = response.data.Table;

                                            const a = $('.year_reportmodal').height();
                                            const b = $('.year_reportmodal').width();



                                            var m = { top: 5, right: 50, bottom: 150, left: 50 }
                                                , h = a - m.top - m.bottom
                                                , w = b - m.left - m.right
                                                , barWidth = 5;

                                            var dataset = null;
                                            //typecast Amount to #, calculate total, and cumulative amounts


                                            //Axes and scales
                                            var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                            xScale.domain(sample_pareto.map(function (d) { return d.RejectionDescription; }));

                                            var yhist = d3.scaleLinear()
                                                .domain([0, d3.max(sample_pareto, function (d) { return d.Frequency; })])
                                                .range([h, 0]);

                                            var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                            var xAxis = d3.axisBottom()
                                                .scale(xScale);


                                            var yAxis = d3.axisLeft()
                                                .scale(yhist)



                                            var yAxis2 = d3.axisRight()
                                                .scale(ycum);
                                            d3.selectAll(".year_reportmodal > *").remove();

                                            ////Draw svg
                                            var svg_pareto = d3.select(".year_reportmodal").append("svg")
                                                .attr("width", w + m.left + m.right)
                                                .attr("height", h + m.top + m.bottom)
                                                .append("g")
                                                .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                                            //Draw histogram
                                            var bar_pareto = svg_pareto.selectAll(".bar")
                                                .data(sample_pareto)
                                                .enter().append("g")
                                                .attr("class", "bar")




                                            bar_pareto.append("rect")
                                                .attr("x", function (d) { return xScale(d.RejectionDescription); })
                                                .attr("width", xScale.bandwidth() - 2)
                                                .attr("y", function (d) { return yhist(d.Frequency); })
                                                .attr("height", function (d) { return h - yhist(d.Frequency); })
                                                .style("fill", function (d) {
                                                    console.log(color(d.Frequency))
                                                    return color(d.Frequency)
                                                })
                                                .attr("fill", color)
                                                .attr("text", function (d) { return `${d.Frequency}` })



                                            ////Draw CDF line
                                            var guide = d3.line()
                                                .x(function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .y(function (d) { return ycum(d.Percentage) });



                                            var line = svg_pareto.append('path')
                                                .datum(sample_pareto)
                                                .attr('d', guide)
                                                .attr('class', 'line');

                                            svg_pareto.selectAll(".line")
                                                .data(sample_pareto)
                                                .enter().append("circle")
                                                .attr("r", 3.5)
                                                .attr("cx", function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .attr("cy", function (d) { return ycum(d.Percentage) })



                                            //Draw axes
                                            svg_pareto.append("g")
                                                .attr("class", "x axis")
                                                .attr("transform", "translate(0," + h + ")")
                                                .call(xAxis)


                                            svg_pareto.append("g")
                                                .attr("class", "y axis")
                                                .call(yAxis)
                                                .append("text")
                                                .attr("transform", "rotate(-90)")
                                                .attr("y", -50)
                                                .attr("dy", ".71em")
                                                .style("text-anchor", "end")
                                                .text("Frequency");


                                            svg_pareto.append("g")
                                                .attr("class", "y axis")
                                                .attr("transform", "translate(" + [w, 0] + ")")
                                                .call(yAxis2)
                                                .append("text")
                                                .attr("transform", "rotate(-90)")
                                                .attr("y", 50)
                                                .attr("dy", "-.71em")
                                                .style("text-anchor", "end")
                                                .text("Percentage %");

                                            svg_pareto.append("text")
                                                .attr("class", "y label")
                                                //.attr("text-anchor", "end")
                                                .attr("y", -50)
                                                .attr("dy", ".75em")
                                                .attr('text-anchor', 'end')

                                                .attr("transform", "rotate(-90)")
                                                .text("Frequency");

                                            svg_pareto.append("text")
                                                .attr("class", "y label2")
                                                //.attr("text-anchor", "end")
                                                //.attr("y", -50)
                                                .attr("dy", ".75em")
                                                .attr('text-anchor', 'end')

                                                .attr("transform", "translate(" + [w, 0] + ")")
                                                .attr("transform", "rotate(-90)")
                                                .attr("y", w + 50)
                                                .text("Percentage");


                                        }

                                        else {
                                            sample = "";

                                            $(".year_reportmodal").empty();

                                            var div_width = 400;
                                            var div_height = 400;
                                            var svg = d3.select(".year_reportmodal").append("svg")
                                                .attr("width", div_width)
                                                .attr("height", div_height)
                                                .attr("preserveAspectRatio", "xMidYMid")
                                                .append("g")
                                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                            svg.append("text")
                                                .text("No Data Available")
                                                .style("font-size", "40px");
                                        }
                                    },
                                    error: function (result) {
                                        if (result.status == "401") {
                                            swal({
                                                icon: "warning",
                                                title: "Session Timeout",
                                                button: true,
                                                closeModal: false
                                            })
                                            window.location = R_url;
                                        }
                                        else {
                                            swal({
                                                icon: "warning",
                                                title: result.responseText,
                                                button: true,
                                                closeModal: false
                                            })

                                        }
                                    }
                                });
                            

                                    })


                                

                                barGroups
                                    .append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.date) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.Firstpassyeild) + -10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.Firstpassyeild}%`)

                                svg.append('text')
                                    .attr('class', 'label')
                                    .attr('x', -(height / 2) - margin)
                                    .attr('y', margin / 2.4)
                                    .attr('transform', 'rotate(-90)')
                                    .attr('text-anchor', 'middle')
                                    .text('FirstPass Yield (%)')

                                svg.append('text')
                                    .attr('class', 'label')
                                    .attr('x', width / 2 + margin)
                                    .attr('y', height + margin * 2.0)
                                    .attr('text-anchor', 'middle')
                                    .text('Date')
                            }
                            else {
                                sample = "";
                                $('#monthly_line').text('');
                                $('#monthly_ok').text('');
                                $('#monthly_notok').text('');
                                $('#monthly_rework').text('');
                                $('#monthly_copq').text('');
                                $('#monthly_quality').text('');
                                $('#monthly_variant').text('');
                                $(".month_daily").empty();

                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select(".month_daily").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                    .style("font-size", "40px");
                            }

                            //Shift Wise Details

                            $.ajax({
                                type: "POST",
                                dataType: "json",
                                url: URL + 'api/Firstpassyield/Getshiftwisereport',
                                headers: {
                                    Authorization: 'Bearer ' + user1
                                },
                                data: myData,
                                success: function (response) {

                                    d3.select(".month_shift svg").remove();
                                    
                                    if (response.status != "Error") {
                                        //$('#monthly_line').text(response.data.Table[0].Linecode);
                                        //$('#monthly_ok').text(response.data.Table[0].TotalOK_Parts);
                                        //$('#monthly_notok').text(response.data.Table[0].TotalNOK_Parts);
                                        //$('#monthly_rework').text(response.data.Table[0].TotalRework_Parts);
                                        //$('#monthly_copq').text(response.data.Table[0].COPQ);
                                        //$('#monthly_quality').text(response.data.Table[0].Quality);
                                        //$('#monthly_variant').text(response.data.Table[0].Variantcode);

                                        sample = response.data.Table1;
                                        // const svg = d3.select('.month_shift').append('svg');
                                        const svg = d3.select(".month_shift").append("svg");
                                        const svgContainer = d3.select('#container2');

                                        const a = $('.month').height();
                                        const b = $('.month').width();

                                        const margin = 80;
                                        const width = b - 2 * margin;
                                        const height = a - 2 * margin;

                                        //const margin = 80;
                                        //const width = 1000 - 2 * margin;
                                        //const height = 600 - 2 * margin;

                                        const chart = svg.append('g')
                                            .attr('transform', `translate(${margin}, ${margin})`);

                                        const xScale = d3.scaleBand()
                                            .range([0, width])
                                            .domain(sample.map((s) => s.ShiftID))
                                            .padding(0.4)

                                        const yScale = d3.scaleLinear()
                                            .range([height, 0])
                                            .domain([0,  d3.max(response.data.Table1, function (d) { return d.FirstPassFeild; })]);

                                        const makeYLines = () => d3.axisLeft()
                                            .scale(yScale)

                                        chart.append('g')
                                            .attr('transform', `translate(0, ${height})`)
                                            .call(d3.axisBottom(xScale));

                                        chart.append('g')
                                            .call(d3.axisLeft(yScale));

                                        chart.append('g')
                                            .attr('class', 'grid')
                                            .call(makeYLines()
                                                .tickSize(-width, 0, 0)
                                                .tickFormat('')
                                            )

                                        const barGroups = chart.selectAll()
                                            .data(sample)
                                            .enter()
                                            .append('g')

                                        barGroups
                                            .append('rect')
                                            .attr('class', 'bar')
                                            .attr('x', (g) => xScale(g.ShiftID))
                                            .attr('y', (g) => yScale(g.FirstPassFeild))
                                            .attr('height', (g) => height - yScale(g.FirstPassFeild))
                                            .attr('width', xScale.bandwidth())
                                            //.on('mouseenter', function (actual, i) {
                                            //    d3.selectAll('.value')
                                            //        .attr('opacity', 0)

                                            //    d3.select(this)
                                            //        .transition()
                                            //        .duration(300)
                                            //        .delay(300)
                                            //        .attr('opacity', 0.6)
                                            //        .attr('x', (a) => xScale(a.ShiftID) - 5)
                                            //        .attr('width', xScale.bandwidth() + 10)

                                            //    const y = yScale(actual.FirstPassFeild)

                                            //    line = chart.append('line')
                                            //        .attr('id', 'limit')
                                            //        .attr('x1', 0)
                                            //        .attr('y1', y)
                                            //        .attr('x2', width)
                                            //        .attr('y2', y)

                                            //    barGroups.append('text')
                                            //        .attr('class', 'divergence')
                                            //        .attr('x', (a) => xScale(a.ShiftID) + xScale.bandwidth() / 2)
                                            //        .attr('y', (a) => yScale(a.FirstPassFeild) + 30)
                                            //        .attr('fill', 'white')
                                            //        .attr('text-anchor', 'middle')
                                            //        .text((a, idx) => {
                                            //            const divergence = (a.FirstPassFeild - actual.FirstPassFeild).toFixed(1)

                                            //            let text = ''
                                            //            if (divergence > 0) text += '+'
                                            //            text += `${divergence}%`

                                            //            return idx !== i ? text : '';
                                            //        })

                                            //})
                                            .on('mouseleave', function () {
                                                d3.selectAll('.value')
                                                    .attr('opacity', 1)

                                                d3.select(this)
                                                    .transition()
                                                    .duration(300)
                                                    .attr('opacity', 1)
                                                    .attr('x', (a) => xScale(a.ShiftID))
                                                    .attr('width', xScale.bandwidth())

                                                chart.selectAll('#limit').remove()
                                                chart.selectAll('.divergence').remove()
                                            })

                                            .on('click', function (a) {

                                                var xvalue = a.ShiftID;
                                                var datearray = month.split("-");
                                                var totaldays = new Date(datearray[0], datearray[1], 0).getDate();
                                                var firstDay = new Date(datearray[0], datearray[1], -(totaldays - 1));
                                                var fday = firstDay.getFullYear() + "-" + (firstDay.getMonth() + 1) + "-" + firstDay.getDate();
                                                var oee_myData = {
                                                    "line": linecode,
                                                    "variant": variantcode,
                                                    "Fromdate": fday,
                                                    "shift": xvalue,
                                                    "CompanyCode": '@Session["CompanyCode"]',
                                                    "PlantCode": '@Session["PlantCode"]'
                                                };
                                                var R_url = '@Url.Action("Login", "Main")';
                                                var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                                                //$.ajax({
                                                //        type: 'Get',
                                                //        url: URL + 'api/UserSettings/GetEmployee',
                                                //        headers: {
                                                //                Authorization: 'Bearer ' + user1
                                                //        },
                                                //        dataType: 'json'
                                                //}).success(function (response) {

                                                oee_arr = [];
                                                $.ajax({
                                                    type: "POST",
                                                    url: URL + 'api/Firstpassyield/GetFPYshiftkBreakdown',
                                                    data: oee_myData,
                                                    headers: {
                                                        Authorization: 'Bearer ' + user1
                                                    },
                                                    dataType: "json",
                                                    success: function (breakdownresult) {
                                                       modal.style.display = "block";
                                                        //$('#breakdown').modal('show');
                                                        if (response.status != "Error") {
                                                            $(".mtable").html('');
                                                            var j = 1;
                                                            var cols = '';
                                                            var sc = '';

                                                                cols += "<tr>";
                                                                cols += "<td>" + breakdownresult.data.Table[0].TotalOKParts + "</td>";
                                                                cols += "<td>" + breakdownresult.data.Table[0].TotalNOKParts + "</td>";
                                                                cols += "<td>" + breakdownresult.data.Table[0].TotalReworkParts + "</td>";
                                                                cols += "</tr>";

                                                            $(".mtable").html(cols);
                                                        }
                                                        else {
                                                            oee_sample = "";
                                                        }

                                                    },
                                                    error: function (breakdownresult) {

                                                    }
                                                });

                                                 $.ajax({
                                        type: "POST",
                                        dataType: "json",
                                        url: URL + 'api/Firstpassyield/GetFPYshiftkBreakdownPareto',
                                        data: oee_myData,
                                        headers: {
                                            Authorization: 'Bearer ' + user1
                                        },

                                        beforeSend: function () {
                                            $('.loading').show();
                                        },
                                        complete: function () {
                                            $('.loading').hide();
                                        },
                                    success: function (response) {


                                             d3.select(".year_reportmodal svg").remove();
                                        if (response.status != "Error") {
                                            sample_pareto = response.data.Table;

                                                const a = $('.year_reportmodal').height();
                                                const b = $('.year_reportmodal').width();



                                                var m = { top: 5, right: 50, bottom: 150, left: 50 }
                                                    , h = a - m.top - m.bottom
                                                    , w = b - m.left - m.right
                                                    , barWidth = 5;

                                                var dataset = null;
                                                //typecast Amount to #, calculate total, and cumulative amounts


                                                //Axes and scales
                                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                                xScale.domain(sample_pareto.map(function (d) { return d.RejectionDescription; }));

                                                var yhist = d3.scaleLinear()
                                                    .domain([0, d3.max(sample_pareto, function (d) { return d.Frequency; })])
                                                    .range([h, 0]);

                                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                                var xAxis = d3.axisBottom()
                                                    .scale(xScale);


                                                var yAxis = d3.axisLeft()
                                                    .scale(yhist)



                                                var yAxis2 = d3.axisRight()
                                                    .scale(ycum);
                                                d3.selectAll(".year_reportmodal > *").remove();

                                                ////Draw svg
                                                var svg_pareto = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", w + m.left + m.right)
                                                    .attr("height", h + m.top + m.bottom)
                                                    .append("g")
                                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                                //Draw histogram
                                                var bar_pareto = svg_pareto.selectAll(".bar")
                                                    .data(sample_pareto)
                                                    .enter().append("g")
                                                    .attr("class", "bar")




                                                bar_pareto.append("rect")
                                                    .attr("x", function (d) { return xScale(d.RejectionDescription); })
                                                    .attr("width", xScale.bandwidth() - 2)
                                                    .attr("y", function (d) { return yhist(d.Frequency); })
                                                    .attr("height", function (d) { return h - yhist(d.Frequency); })
                                                    .style("fill", function (d) {
                                                        console.log(color(d.Frequency))
                                                        return color(d.Frequency)
                                                    })
                                                    .attr("fill", color)
                                                    .attr("text", function (d) { return `${d.Frequency}` })



                                                ////Draw CDF line
                                            var guide = d3.line()
                                                .x(function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .y(function (d) { return ycum(d.Percentage) });



                                            var line = svg_pareto.append('path')
                                                .datum(sample_pareto)
                                                .attr('d', guide)
                                                .attr('class', 'line');

                                            svg_pareto.selectAll(".line")
                                                .data(sample_pareto)
                                                .enter().append("circle")
                                                .attr("r", 3.5)
                                                .attr("cx", function (d) { return xScale(d.RejectionDescription) + (xScale.bandwidth() / 2); })
                                                .attr("cy", function (d) { return ycum(d.Percentage) })



                                                //Draw axes
                                                svg_pareto.append("g")
                                                    .attr("class", "x axis")
                                                    .attr("transform", "translate(0," + h + ")")
                                                    .call(xAxis)


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .call(yAxis)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", -50)
                                                    .attr("dy", ".71em")
                                                    .style("text-anchor", "end")
                                                    .text("Frequency");


                                                svg_pareto.append("g")
                                                    .attr("class", "y axis")
                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .call(yAxis2)
                                                    .append("text")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", 50)
                                                    .attr("dy", "-.71em")
                                                    .style("text-anchor", "end")
                                                    .text("Percentage %");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label")
                                                    //.attr("text-anchor", "end")
                                                    .attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "rotate(-90)")
                                                    .text("Frequency");

                                                svg_pareto.append("text")
                                                    .attr("class", "y label2")
                                                    //.attr("text-anchor", "end")
                                                    //.attr("y", -50)
                                                    .attr("dy", ".75em")
                                                    .attr('text-anchor', 'end')

                                                    .attr("transform", "translate(" + [w, 0] + ")")
                                                    .attr("transform", "rotate(-90)")
                                                    .attr("y", w+50)
                                                    .text("Percentage");


                                            }

                                            else {
                                                sample = "";

                                                $(".year_reportmodal").empty();

                                                var div_width = 400;
                                                var div_height = 400;
                                                var svg = d3.select(".year_reportmodal").append("svg")
                                                    .attr("width", div_width)
                                                    .attr("height", div_height)
                                                    .attr("preserveAspectRatio", "xMidYMid")
                                                    .append("g")
                                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                                svg.append("text")
                                                    .text("No Data Available")
                                                    .style("font-size", "40px");
                                            }
                                        },
                                        error: function (result) {
                                            if (result.status == "401") {
                                                swal({
                                                    icon: "warning",
                                                    title: "Session Timeout",
                                                    button: true,
                                                    closeModal: false
                                                })
                                                window.location = R_url;
                                            }
                                            else {
                                                swal({
                                                    icon: "warning",
                                                    title: result.responseText,
                                                    button: true,
                                                    closeModal: false
                                                })

                                            }
                                        }
                                    });

                                        })




                                        barGroups
                                            .append('text')
                                            .attr('class', 'value')
                                            .attr('x', (a) => xScale(a.ShiftID) + xScale.bandwidth() / 2)
                                            .attr('y', (a) => yScale(a.FirstPassFeild) + -10)
                                            .attr('text-anchor', 'middle')
                                            .text((a) => `${a.FirstPassFeild}%`)

                                        svg.append('text')
                                            .attr('class', 'label')
                                            .attr('x', -(height / 2) - margin)
                                            .attr('y', margin / 2.4)
                                            .attr('transform', 'rotate(-90)')
                                            .attr('text-anchor', 'middle')
                                            .text('FirstPass Yield (%)')

                                        svg.append('text')
                                            .attr('class', 'label')
                                            .attr('x', width / 2 + margin)
                                            .attr('y', height + margin * 1.7)
                                            .attr('text-anchor', 'middle')
                                            .text('Shift Id')
                                    }
                                    else {
                                        sample = "";
                                        //$('#monthly_line').text('');
                                        //$('#monthly_ok').text('');
                                        //$('#monthly_notok').text('');
                                        //$('#monthly_rework').text('');
                                        //$('#monthly_copq').text('');
                                        //$('#monthly_quality').text('');
                                        //$('#monthly_variant').text('');
                                        $(".month_shift").empty();

                                        var div_width = 400;
                                        var div_height = 400;
                                        var svg = d3.select(".month_shift").append("svg")
                                            .attr("width", div_width)
                                            .attr("height", div_height)
                                            .attr("preserveAspectRatio", "xMidYMid")
                                            .append("g")
                                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                        svg.append("text")
                                            .text("No Data Available")
                                            .style("font-size", "40px");
                                    }
                                $.ajax({
                                    type: "POST",
                                    dataType: "json",
                                    url: URL + 'api/Firstpassyield/Gethourwisereport',
                                    headers: {
                                        Authorization: 'Bearer ' + user1
                                    },
                                    data: myData_daily,
                                    success: function (response) {
                                        console.log(response)
                                       //var rowsCnt = document.getElementById("datatable-hourly").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                                       // if (rowsCnt > 0) {
                                       //     for (var i = 0; i < rowsCnt; i++) {
                                       //         document.getElementById("datatable-hourly").deleteRow(1);
                                       //     }
                                       // }
                                         //$("#datatable-hourly").dataTable().fnDestroy();
                                        if (response.data.length != 0) {

                                            for (var i = 0; i < response.data.Table1.length; i++) {
                                                //for (var i = 0; i < 2; i++) {
                                                var newRow = $("<tr>");
                                                    var cols = '';
                                                     //var cols = $("<tr>");
                                                cols += "<td> " + response.data.Table1[i].Date + "</td> ";
                                                cols += "<td> " +response.data.Table1[i].Variant_code + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].Parts_Category + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR1 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR2 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR3 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR4 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR5 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR6 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR7 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR8 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR9 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR10 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR11+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR12 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR13 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR14 + "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR15+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR16+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR17+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR18+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR19+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR20+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR21+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR22+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR23+ "</td> ";
                                                cols += "<td> " + response.data.Table1[i].HR24 + "</td> ";
                                                cols+="</tr>"
                                                //cols += "</tr>";
                                                newRow.append(cols);
                                                $("#details1").append(newRow);


                                            }
                                        }
                                        else {
                                            //$(".custom_pre_error").text(response.msg);
                                            var newRow = $("<tr>");
                                            var cols = '';
                                            cols += "<td colspan='27' style='text-align:center'> No Data Available </td> ";
                                            cols += "</tr>";
                                            newRow.append(cols);
                                            $("#details1").append(newRow);
                                        }
                                         $('#datatable-hourly').DataTable({
                                                "ordering": false,
                                                 "info": false,
                                                "bDestroy": true,
                                                "pageLength": 3,
                                                "searching": false,
                                                "lengthChange": false,
                                                "columnDefs": [
                                                    { className: "my_class", "targets": [8, 16, 24] },
                                                    { className: "row-center", "targets": [0, 1] }
                                                ],
                                                "drawCallback": function () {
                                                    var dimension_cells = new Array();
                                                    var dimension_col = null;
                                                    var columnCount = ($("#datatable-hourly tr:first th").length);
                                                    for (dimension_col = 0; dimension_col <= 2; dimension_col++) {
                                                        // first_instance holds the first instance of identical td
                                                        var first_instance = null;
                                                        var rowspan = 1;
                                                        // iterate through rows
                                                        $("#datatable-hourly").find('tr').each(function () {

                                                            // find the td of the correct column (determined by the dimension_col set above)
                                                            var dimension_td = $(this).find('td:nth-child(' + dimension_col + ')');





                                                            if (first_instance === null) {
                                                                // must be the first row
                                                                first_instance = dimension_td;
                                                            }
                                                            else if (dimension_td.text() === first_instance.text()) {
                                                                // the current td is identical to the previous
                                                                // remove the current td
                                                                // dimension_td.remove();
                                                                dimension_td.attr('hidden', true);
                                                                ++rowspan;
                                                                // increment the rowspan attribute of the first instance
                                                                first_instance.attr('rowspan', rowspan);
                                                            }
                                                            else {
                                                                // this cell is different from the last
                                                                first_instance = dimension_td;
                                                                rowspan = 1;
                                                            }
                                                        });
                                                    }
                                             }
                                            });
                                    },
                                    error: function (result) {
                                        if (result.status == "401") {
                                            swal({
                                                icon: "warning",
                                                title: "Session Timeout",
                                                button: true,
                                                closeModal: false
                                            })
                                            window.location = R_url;
                                        }
                                        else {
                                            swal({
                                                icon: "warning",
                                                title: result.responseText,
                                                button: true,
                                                closeModal: false
                                            })

                                        }
                                    }
                                });
                                },
                                error: function (result) {
                                    if (result.status == "401") {
                                        swal({
                                            icon: "warning",
                                            title: "Session Timeout",
                                            button: true,
                                            closeModal: false
                                        })
                                        window.location = R_url;
                                    }
                                    else {
                                        swal({
                                            icon: "warning",
                                            title: result.responseText,
                                            button: true,
                                            closeModal: false
                                        })

                                    }
                                }
                            });
                        },
                        error: function (result) {
                            if (result.status == "401") {
                                swal({
                                    icon: "warning",
                                    title: "Session Timeout",
                                    button: true,
                                    closeModal: false
                                })
                                window.location = R_url;
                            }
                            else {
                                swal({
                                    icon: "warning",
                                    title: result.responseText,
                                    button: true,
                                    closeModal: false
                                })

                            }
                        }
                    });
                },
                error: function (result) {
                    if (result.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: result.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });
            //}).error(function (response) {
            //    swal({
            //        icon: "warning",
            //        title: "Session Timeout",
            //        button: true,
            //        closeModal: false
            //    })
            //    window.location = R_url;
            //});
        }

    })




</script>
<style>
    .my_class {
        background-color: #ffd800
    }

    .row-center {
        vertical-align: middle;
        text-align: center;
    }

    line {
        shape-rendering: crispEdges;
        /*stroke:#aeaeae;
    stroke-width:1;*/
    }

    /*.bar rect {
          fill: steelblue;
          shape-rendering: crispEdges;
      }*/

    .axis path, .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .line {
        fill: none;
        stroke: purple;
        stroke-width: 1.5px;
    }

    .grid .tick {
        stroke: lightgrey;
        opacity: 0.7;
    }

    .grid path {
        stroke-width: 0;
    }

    .x_label {
        border: solid;
        background-color: cornflowerblue;
    }

    #myModal {
        overflow-y: scroll;
    }

    .modal {
        overflow: auto !important;
    }
</style>
<script>
    function exportTableToExcel(tableID, filename = '') {
        var downloadLink;
        var dataType = 'application/vnd.ms-excel';
        var tableSelect = document.getElementById(tableID);
        var tableHTML = tableSelect.outerHTML.replace(/ /g, '%20');

        // Specify file name
        filename = filename ? filename + '.xls' : 'excel_data.xls';

        // Create download link element
        downloadLink = document.createElement("a");

        document.body.appendChild(downloadLink);

        if (navigator.msSaveOrOpenBlob) {
            var blob = new Blob(['\ufeff', tableHTML], {
                type: dataType
            });
            navigator.msSaveOrOpenBlob(blob, filename);
        } else {
            // Create a link to the file
            downloadLink.href = 'data:' + dataType + ', ' + tableHTML;

            // Setting the file name
            downloadLink.download = filename;

            //triggering the function
            downloadLink.click();
        }
    }
</script>

<script type="text/javascript">
    var modal = document.getElementById("myModal");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
</script>


