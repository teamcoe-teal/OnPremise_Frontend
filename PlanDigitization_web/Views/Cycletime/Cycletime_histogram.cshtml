
@{ ViewBag.Title = "Cycletime_histogram";
    Layout = "~/Views/Shared/_Layout.cshtml"; }

<script src="~/Scripts/d3_v3.min.js"></script>
<script src="~/Scripts/d3_v4.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.css">

<style type="text/css">
    .radiobtn {
        margin: 10px;
    }

    .line {
        fill: none;
        stroke: #007fd6;
        stroke-width: 4px;
    }

    .node {
        fill: #007fd6;
        stroke: #fff;
        stroke-width: 2px;
    }

    .tooltip {
        position: absolute;
        text-align: center;
        width: 60px;
        height: 28px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }

    <style >
    #container {
        margin: 20px;
        width: 50%;
    }

    #chart {
        background-color: #eee;
    }
</style>

</style>

<header class="page-header">
    <h2> Cycle Time Histogram Report </h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("MainDashboard","MainDashboard")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            <li><span>Historic</span></li>
        </ol>
    </div>
</header>

<div class="row" id="Historic" style="display:block;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                <h2 class="panel-title" style="color:white;"> Cycletime Historic </h2>
            </header>
            <div class="panel-body">
                <div class="form-group">

                    <label class="col-sm-2 control-label"> Select Machine  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <select class="form-control" id="Machine">
                            <option value="0">Select</option>
                        </select>
                    </div>

                    <label class="col-sm-2 control-label"> Select Variant  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <select class="form-control" id="Variant"></select>
                    </div>
                    <label style="display:none" id="Actual_cycle"></label>

                    <label class="col-sm-2 control-label"> Select Report  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <select class="form-control" id="Report_name">
                            <option value="0">Select </option>
                            <option value="1">Histogram</option>
                            <option value="2">Average Cycletime Table</option>
                            <option value="3">Partwise Cycletime</option>

                        </select>
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-sm-2 control-label"> Select Duration  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <select class="form-control" id="TimeSlot"></select>
                    </div>
                </div>

                <div class="form-group" style="display:none" id="Histrogram_Move">
                    <div>
                        <label class="col-sm-2 control-label"> Select Movement  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <select class="form-control" id="Move"></select>
                        </div>
                    </div>
                </div>

                <div class="form-group" style="display:none;" id="divshift">
                    <label class="col-sm-2 control-label"> Shift  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <select id="ShiftID" class="form-control"></select>
                    </div>
                    <label class="col-sm-2 control-label"> Date  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control datepic" id="ShiftDate" autocomplete="off" />
                    </div>
                </div>

                <div class="form-group" style="display:none;" id="divday">
                    <label class="col-sm-2 control-label"> Date  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control datepic" id="Date" autocomplete="off" />
                    </div>
                </div>

                <div class="form-group" style="display:none;" id="divmonth">
                    <label class="col-sm-2 control-label"> Month  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control monthpic" id="Month" autocomplete="off" />
                    </div>
                </div>

                <div class="form-group" style="display:none;" id="divyear">
                    <label class="col-sm-2 control-label"> Year  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control yearpic" id="Year" autocomplete="off" />
                    </div>
                </div>

                <div class="form-group" style="display:none;" id="divcustom">

                    <label class="col-sm-2 control-label"> FromDate  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" id="FromDate" autocomplete="off" />
                    </div>

                    <label class="col-sm-2 control-label"> ToDate  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control" id="ToDate" autocomplete="off" />
                    </div>
                </div>

                <div class="form-group" style="display:none;" id="divday_time">

                    <label class="col-sm-2 control-label"> Date  <span class="required">*</span></label>
                    <div class="col-sm-2">
                        <input type="text" class="form-control date_day" id="P_Date" autocomplete="off" />
                    </div>

                    <div class="form-group">
                        <label class="col-sm-2 control-label"> From time  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="time" class="form-control" id="P_From_time" />
                        </div>
                        <label class="col-sm-2 control-label"> To time  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="time" class="form-control" id="P_To_time" />
                        </div>
                    </div>
                </div>

            </div>
            <footer class="panel-footer">
                <div class="row">
                    <div class="col-sm-9 col-sm-offset-3" style="text-align:right;">
                        <button type="button" id="Search_Histogram" class="btn btn-primary">Search</button>
                        <button type="button" id="btn_cancel" class="btn btn-danger cancel">Reset</button>
                    </div>
                </div>
            </footer>
        </section>
    </div>
</div>

<!-- shiftwise Range  Charts -->
<div class="row" id="shiftwise_histogram" style="display:none;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                <!--<h2 class="panel-title" style="color:white;"> Shiftwise Frequency Chart </h2>-->
                <h2 class="panel-title" style="color:white;">
                    Shiftwise Cycletime Frequency Chart <span style="float:right"><span id="s_cycletime"></span></span>
                </h2>
            </header>

            <div class="panel-body">
                <div class="form-group">
                    <div class='Range_chart_shiftwise' style="height:500px;width:100%">
                        <div id="err_Range_chart_shiftwise" style="color:red;font-weight:bold;"></div>
                        <svg style="height:100%;width:100%"></svg>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

<!-- Daywise Range  Charts -->
<div class="row" id="daywise_histogram" style="display:none;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                <!--<h2 class="panel-title" style="color:white;"> Daywise Frequency Chart </h2>-->
                <h2 class="panel-title" style="color:white;">
                    Daywise Cycletime Frequency Chart <span style="float:right"> <span id="d_cycletime"></span> <span>
                </h2>
            </header>
            <div class="panel-body">
                <div class="form-group">
                    <div class='Range_chart_daywise' style="height:500px;width:100%">
                        <div id="err_Range_chart_daywise" style="color:red;font-weight:bold;"></div>
                        @*<svg style="height:100%;width:100%"></svg>*@
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

<!-- Monthwise Rage Charts-->
<div class="row" id="monthwise_histogram" style="display:none;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                @*<h2 class="panel-title" style="color:white;"> Monthwise Frequency Chart </h2>*@
                <h2 class="panel-title" style="color:white;">
                    Monthwise Cycletime Frequency Chart <span style="float:right"><span id="m_cycletime"></span> </span>
                </h2>
            </header>
            <div class="panel-body">
                <div class="form-group">
                    <div id='container' class="Range_chart_monthwise" style="height:500px;width:100%">
                        <svg style="height:100%;width:100%"></svg>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

<!-- Yearwise Range Chart-->
<div class="row" id="yearwise_histogram" style="display:none;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                @*<h2 class="panel-title" style="color:white;"> Yearwise Frequency Chart </h2>*@
                <h2 class="panel-title" style="color:white;">
                    Yearwise Cycletime Frequency Chart <span style="float:right"> <span id="y_cycletime"></span> </span>
                </h2>
            </header>
            <div class="panel-body">
                <div class="form-group">
                    <div id='container' class="Range_chart_yearwise" style="height:500px;width:100%">
                        <div id="err_Range_chart_yearwise" style="color:red;font-weight:bold;"></div>
                        <svg style="height:100%;width:100%"></svg>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>

<!-- Customwise Range Chart-->
<div class="row" id="customwise_histogram" style="display:none;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                <!--<h2 class="panel-title" style="color:white;"> Customwise Frequency Chart </h2>-->
                <h2 class="panel-title" style="color:white;">
                    Customwise Cycletime Frequency Chart <span style="float:right"> <span id="c_cycletime"></span> </span>
                </h2>
            </header>
            <div class="panel-body">
                <div class="form-group">
                    <div id='container' class="Range_chart_customwise" style="height:500px;width:100%">
                        <div id="err_Range_chart_customwise" style="color:red;font-weight:bold;"></div>
                        <svg style="height:100%;width:100%"></svg>
                    </div>
                </div>
            </div>
        </section>
    </div>
</div>



<div class="row" id="average_table" style="display:none;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                <h2 class="panel-title" style="color:white;" id="lbl_title"> </h2>
            </header>
            <div class="panel-body">
                <div class="form-group" id="tbl_average">
                </div>
            </div>
        </section>
    </div>
</div>


<div class="row" id="partwise_chart" style="display:none;">
    <div class="col-md-2"></div>
    <div class="col-md-12">
        <section class="panel">
            <header class="panel-heading" style="background-color:teal;color:white;">
                <div class="panel-actions">
                </div>
                <h2 class="panel-title" style="color:white;"> Partwise Cycle Time </h2>
            </header>
            <div class="panel-body">
                <div id="charts" style="height:500px;width:100%">
                    <svg width="800" height="500"></svg>
                </div>
                <div id="error_msg" style="color:red;font-size:17px;"></div>
            </div>
        </section>
    </div>
</div>



@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<script src="~/assets1/javascripts/swal.js"></script>
<script src="~/assets1/javascripts/swal_alert.js"></script>
<script src="~/assets1/datepicker_normal/datepicker_normal_jquery.min.js"></script>
<script src="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>

<script type="text/javascript">
    $(".datepic").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        endDate: '+0d'
    });

    $('.monthpic').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.yearpic').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        startView: 2,
        endDate: '+0y',
        orientation: "bottom"
    });


    $(".date_day").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        startDate: '-30d',
        endDate: '+0d'
    });



    $(function () {
        var todaydt = new Date();
        $("#FromDate").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd',
            orientation: 'top'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate());
            $('#ToDate').datepicker('setStartDate', minDate);
        });

        $("#ToDate").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd',
            orientation: 'top'


        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() - 1);
            $('#FromDate').datepicker('setEndDate', minDate);
        });
    });

</script>

<script>

      $("#TimeSlot").change(function () {
        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
        var TimeSlot = $('#TimeSlot').val();
        if (TimeSlot == "1") {
            $('#divshift').show();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').hide();
            $('#divday_time').hide();

        }
        else if (TimeSlot == "2") {
            $('#divshift').hide();
            $('#divday').show();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').hide();
            $('#divday_time').hide();
        }
        else if (TimeSlot == "3") {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').show();
            $('#divyear').hide();
            $('#divcustom').hide();
            $('#divday_time').hide();
        }
        else if (TimeSlot == "4") {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').show();
            $('#divcustom').hide();
            $('#divday_time').hide();
        }
        else if (TimeSlot == "5") {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').show();
            $('#divday_time').hide();
        }
        else
        {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').hide();
            $('#divday_time').hide();
        }
    });


    $("#Report_name").change(function () {



        $("#ShiftDate").val('');
        $("#ShiftID").val('');
        $("#Date").val('');
        $("#Month").val('');
        $("#Year").val('');
        $("#FromDate").val('');
        $("#ToDate").val('');

        var Report = $("#Report_name").val();

        if (Report == "1")
        {
            $("#Histrogram_Move").show();
        }
        else if (Report == '2' || Report == "3")
        {
            $("#Histrogram_Move").hide();
        }

        if (Report == "3") {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').hide();
            $("#divday_time").show();
        }
        else {
            $("#divday_time").hide();
        }

        if (Report == "2" || Report == "1") {
            var s = '<option value="0">Select Duration </option>';
            s += '<option value="1">Shift</option>';
            s += '<option value="2">Day</option>';
            s += '<option value="3">Month</option>';
            s += '<option value="4">Year</option>';
            s += '<option value="5">Custom</option>';
            $("#TimeSlot").html(s);
        }
        else {
            var s = '<option value="2">Day</option>';
            $("#TimeSlot").html(s);
        }
    });

</script>

<script>

    $(document).ready(function ()
    {

        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';

        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        var myDatas1 =
        {
            "QueryType": "Assets",
            "Parameter": '@Session["PlantCode"]',
            "Parameter1": '@Session["CompanyCode"]',
            "Parameter2": '@Session["LineCode"]',
             "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
        };

        $.ajax({
            type: "POST",
            data: myDatas1,
            headers: {
                Authorization: 'Bearer ' + user1
            },
            url: URL + "api/Values/User_settings_details",
            dataType: "json",

            success: function (response) {
                var s = '<option value="">Select Machine</option>';
                for (var i = 0; i < response.data.Table.length; i++) {
                    s += '<option value="' + response.data.Table[i].AssetID + '">' + response.data.Table[i].AssetID + "-" + response.data.Table[i].AssetDescription + '</option>';
                }
                $("#Machine").html(s);
            }
        });

        var shiftdata = {
            "QueryType": "ShiftSettings",
            "Parameter": '@Session["PlantCode"]',
            "Parameter1": '@Session["CompanyCode"]',
            "Parameter2": '@Session["LineCode"]',
             "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
        };

        $.ajax({
            type: "POST",
            data: shiftdata,
            headers: {
                Authorization: 'Bearer ' + user1
            },
            url: URL + "api/Values/User_settings_details",
            dataType: "json",

            success: function (response) {
                var s = '<option value="">Select Shift</option>';
                for (var i = 0; i < response.data.Table.length; i++) {
                    s += '<option value="' + response.data.Table[i].ShiftName + '">' + response.data.Table[i].ShiftName + '</option>';
                }
                $("#ShiftID").html(s);
            }
        });




        $("#Machine").change(function ()
        {
             var Machine = $('#Machine').val();
             var data = {
                 "QueryType": "Get_MachineName",
                 "Parameter": '@Session["PlantCode"]',
                 "Parameter1": '@Session["CompanyCode"]',
                 "Parameter2": Machine
             };

            var data1 = {
                "QueryType": "Get_Variants",
                "Parameter": Machine,
                "Parameter1": '@Session["CompanyCode"]',
                "Parameter2": '@Session["PlantCode"]',
                "Parameter4": '@Session["LineCode"]',
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                "LineCode": '@Session["LineCode"]'
            };

            $.ajax({
                type: "POST",
                data: data1,
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                url: URL + "api/Values/User_settings_details",
                dataType: "json",

                success: function (response) {
                    var s = '<option value="">Select Variant</option>';
                    for (var i = 0; i < response.data.Table.length; i++) {
                        s += '<option value="' + response.data.Table[i].Variant_Code + "-" + response.data.Table[i].VariantName+ '">' + response.data.Table[i].VariantName + '</option>';
                    }
                    $("#Variant").html(s);
                }
            })

        });



        $("#Variant").change(function () {
            var Variant = $('#Variant').val().split("-").shift();
            var Machine = $('#Machine').val();


            var data2 = {
                "QueryType": "Get_Movement",
                "Parameter": '@Session["PlantCode"]',
                "Parameter1": '@Session["CompanyCode"]',
                "Parameter2": Machine,
                "Parameter3": Variant,
                "Parameter6": '@Session["LineCode"]',
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                "LineCode": '@Session["LineCode"]'
            };

            var data3 = {
                        "QueryType": "Actual_cycle_time",
                        "Parameter": '@Session["PlantCode"]',
                        "Parameter1": '@Session["CompanyCode"]',
                        "Parameter2": Machine,
                        "Parameter3": Variant,
                        "Parameter6": '@Session["LineCode"]',
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "LineCode": '@Session["LineCode"]'
                };



            $.ajax({
                type: "POST",
                data: data2,
                headers:
                {
                    Authorization: 'Bearer ' + user1
                },
                url: URL + "api/Values/User_settings_details",
                dataType: "json",

                success: function (response) {

                    $.ajax({
                        type: "POST",
                        data: data3,
                        headers:
                        {
                            Authorization: 'Bearer ' + user1
                        },
                        url: URL + "api/Values/User_settings_details",
                        dataType: "json",

                        success: function (response1) {

                            var ac = response1.data.Table[0].Autocycletime;
                            $("#Actual_cycle").html(ac);

                        }
                    })


                    var s = '<option value="">Select Movement</option>';
                    for (var i = 0; i < response.data.Table.length; i++) {
                        s += '<option value="' + response.data.Table[i].Movement + '">' + response.data.Table[i].Movement + '</option>';
                    }
                    //s += '<option value="Others-auto">Others-auto</option>';
                    // s += '<option value="Others-manual">Others-manual</option>';

                    $("#Move").html(s);

                }
            })

        });
    });

</script>


<style>
    .pie {
        margin-top: 100px;
        margin-left: 500px;
        width: 200px !important;
    }

    svg {
        float: left;
    }

    .legend {
        float: left;
        font-family: "Verdana";
        font-size: 12px;
        font-weight: bold;
    }

    .pie text {
        font-family: "Verdana";
        fill: #000;
    }

    .pie .name-text {
        font-size: 0.8em;
    }

    .pie .value-text {
        font-size: 3em;
    }
</style>

<script>
    document.getElementById("btn_cancel").addEventListener("click", function ()
    {
        $("#TimeSlot").val('0');
        $("#Report_name").val('0');
        $("#Machine").val('');
        $("#ShiftDate").val('');
        $("#ShiftID").val('');
        $("#Machine").val('');
        $("#Date").val('');
        $("#Month").val('');
        $("#Year").val('');
        $("#FromDate").val('');
        $("#ToDate").val('');
        $("#Variant").val('').split("-").shift();
        $("#Move").val('');
        $("#s_cycletime").val('');
        $("#d_cycletime").val('');
        $("#m_cycletime").val('');
        $("#y_cycletime").val('');
        $("#c_cycletime").val('');


    });


    function createChartLegend(mainDiv, group) {
        var z = d3.scaleOrdinal(d3.schemeCategory10);
        var mainDivName = mainDiv.substr(1, mainDiv.length);
        $(mainDiv).before("<div id='Legend_" + mainDivName + "' class='pmd-card-body' style='margin-top:0; margin-bottom:0;text-align:center;'></div>");
        var keys = group;
        keys.forEach(function (d) {
            var cloloCode = z(d);
            $("#Legend_" + mainDivName).append("<span class='team-graph team1' style='display: inline-block; margin-right:10px;'>\
          			<span style='background:" + cloloCode +
                ";width: 10px;height: 10px;display: inline-block;vertical-align: middle;'>&nbsp;</span>\
          			<span style='padding-top: 0;font-family:Source Sans Pro, sans-serif;font-size: 13px;display: inline;'>" + d +
                " </span>\
          		</span>");
        });

    }

    document.getElementById("Search_Histogram").addEventListener("click", function ()
    {
        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        var TimeSlot = $("#TimeSlot").val();
        var Report_name = $("#Report_name").val();
        var ShiftDate = $("#ShiftDate").val();
        var ShiftID = $("#ShiftID").val();
        var Machine = $("#Machine").val();
        var Date = $("#Date").val();
        var Month = $("#Month").val();
        var Year = $("#Year").val();
        var FDate = $("#FromDate").val();
        var TDate = $("#ToDate").val();
        var Variant = $("#Variant").val().split("-").shift();
        var Movement = $("#Move").val();

        var P_Date = $("#P_Date").val();
        var P_From_time = $("#P_From_time").val();
        var P_To_time = $("#P_To_time").val();


        if (Machine == "") {
            swal({
                icon: "error",
                title: "Please Select Machine...!",
                button: true,
                timer: 4500
            })
            return;
        }

        if (Report_name == "0") {
            swal({
                icon: "error",
                title: "Please Select Report Name...!",
                button: true,
                timer: 4500
            })
            return;
        }
        if (Variant == "") {
            swal({
                icon: "error",
                title: "Please Select Variant Name...!",
                button: true,
                timer: 4500
            })
            return;
        }


        if (TimeSlot == "0") {
            swal({
                icon: "error",
                title: "Please Select Timeslot...!",
                button: true,
                timer: 4500
            })
            return;
        }

        $("#shiftwise_histogram").hide();
        $("#daywise_histogram").hide();
        $("#monthwise_histogram").hide();
        $("#yearwise_histogram").hide();
        $("#customwise_histogram").hide();

        $("#average_table").hide();

        $("#partwise_chart").hide();


        $(".pre_error").text('');

        if (Report_name == "1") {

            //shiftwise condition

            if (TimeSlot == "1") {

                if (ShiftID == "" || ShiftID == null) {
                    swal({
                        icon: "error",
                        title: "Please Select Shift...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                if (ShiftDate == "" || ShiftDate == null) {
                    swal({
                        icon: "error",
                        title: "Please Select Date...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }


                if (Movement == null || Movement == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Movement...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData = {
                    "QueryType": "Shiftwise",
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line": '@Session["LineCode"]',
                    "Shift": ShiftID,
                    "Date": ShiftDate,
                    "Machine": Machine,
                    "Variant": Variant,
                    "Operation": Movement
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Histogram',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#shiftwise_histogram").show();

                        d3.select("svg").remove();

                        if (response.status != "Error") {
                            $("#s_cycletime").html('Actual Cycletime:' + response.data.Table[0].CycleTime+" sec ");
                            sample = response.data.Table;

                            d3.select(".Range_chart_shiftwise").append("svg");
                            $("#Range_chart_shiftwise").html();

                            const svg = d3.select('svg');
                            const svgContainer = d3.select('.Range_chart_shiftwise');

                            const a = $('.Range_chart_shiftwise').height();
                            const b = $('.Range_chart_shiftwise').width();

                            const margin = 80;
                            const width = b - 2 * margin;
                            const height = a - 2 * margin;

                            const chart = svg.append('g')
                                .attr('transform', `translate(${margin}, ${margin})`);

                            const xScale = d3.scaleBand()
                                .range([0, width])
                                .domain(sample.map((s) => s.Range))
                                .padding(0.4)

                            const yScale = d3.scaleLinear()
                                .range([height, 0])
                                //.domain([0, 100]);
                                .domain([0, d3.max(sample, function (d) { return d.Frequency; })]);

                            const makeYLines = () => d3.axisLeft()
                                .scale(yScale)

                            chart.append('g')
                                .attr('transform', `translate(0, ${height})`)
                                .call(d3.axisBottom(xScale))
                                .selectAll("text")
                                .attr("y", 0)
                                .attr("x", 30)
                                .attr("dy", "1.35em")
                                .attr("transform", "rotate(0)")
                                .style("text-anchor", "end");


                            chart.append('g')
                                .call(d3.axisLeft(yScale));

                            chart.append('g')
                                .attr('class', 'grid')
                                .call(makeYLines()
                                    .tickSize(-width, 0, 0)
                                    .tickFormat('')
                                )


                            const barGroups = chart.selectAll()
                                .data(sample)
                                .enter()
                                .append('g')


                            barGroups
                                .append('rect')
                                .attr('class', 'bar')
                                .attr('x', (g) => xScale(g.Range))
                                .attr('y', (g) => yScale(g.Frequency))
                                .attr('height', (g) => height - yScale(g.Frequency))
                                .attr('width', xScale.bandwidth())

                                .on('mouseleave', function () {
                                    d3.selectAll('.value')
                                        .attr('opacity', 1)

                                    d3.select(this)
                                        .transition()
                                        .duration(300)
                                        .attr('opacity', 1)
                                        .attr('x', (a) => xScale(a.Range))
                                        .attr('width', xScale.bandwidth())

                                    chart.selectAll('#limit').remove()
                                    chart.selectAll('.divergence').remove()
                                })

                            barGroups
                                .append('text')
                                .attr('class', 'value')
                                .attr('x', (a) => xScale(a.Range) + xScale.bandwidth() / 2)
                                .attr('y', (a) => yScale(a.Frequency) + -10)
                                .attr('text-anchor', 'middle')
                                .text((a) => `${a.Frequency}`)

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', -(height / 2) - margin)
                                .attr('y', margin / 2.4)
                                .attr('transform', 'rotate(-90)')
                                .attr('text-anchor', 'middle')
                                .text('Frequency')

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', width / 2 + margin)
                                .attr('y', height + margin * 1.5)
                                .attr('text-anchor', 'middle')
                                .text('Cycle Time')

                        }
                        else {
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select(".Range_chart_shiftwise").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            //svg.append("text")
                            //    .text("No Data Available")
                            //    .style("font-size", "40px");

                            $("#err_Range_chart_shiftwise").html("No Data Available...!");
                            $("#s_cycletime").html("");


                        }
                    }
                });

            }

            //daywise condition

            else if (TimeSlot == "2") {
                if (Date == null || Date == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Date...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                if (Movement == null || Movement == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Movement...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Daywise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "Date": Date,
                        "Machine": Machine,
                        "Variant": Variant,
                        "Operation": Movement
                    };


                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Histogram',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {
                        $("#daywise_histogram").show();

                        d3.select("svg").remove();
                        $("#err_Range_chart_daywise").html("");

                        if (response.status != "Error") {



                            $("#d_cycletime").html('Actual Cycletime:' + response.data.Table[0].CycleTime+" sec ");
                            sample = response.data.Table;

                            d3.select(".Range_chart_daywise").append("svg");

                            const svg = d3.select('svg');
                            const svgContainer = d3.select('.Range_chart_daywise');

                            const a = $('.Range_chart_daywise').height();
                            const b = $('.Range_chart_daywise').width();

                            const margin = 80;
                            const width = b - 2 * margin;
                            const height = a - 2 * margin;

                            const chart = svg.append('g')
                                .attr('transform', `translate(${margin}, ${margin})`);

                            const xScale = d3.scaleBand()
                                .range([0, width])
                                .domain(sample.map((s) => s.Range))
                                .padding(0.4)

                            const yScale = d3.scaleLinear()
                                .range([height, 0])
                                //.domain([0, 100]);
                                .domain([0, d3.max(sample, function (d) { return d.Frequency; })]);

                            const makeYLines = () => d3.axisLeft()
                                .scale(yScale)

                            chart.append('g')
                                .attr('transform', `translate(0, ${height})`)
                                .call(d3.axisBottom(xScale))
                                .selectAll("text")
                                .attr("y", 0)
                                .attr("x", 30)
                                .attr("dy", "1.35em")
                                .attr("transform", "rotate(0)")
                                .style("text-anchor", "end");


                            chart.append('g')
                                .call(d3.axisLeft(yScale));

                            chart.append('g')
                                .attr('class', 'grid')
                                .call(makeYLines()
                                    .tickSize(-width, 0, 0)
                                    .tickFormat('')
                                )


                            const barGroups = chart.selectAll()
                                .data(sample)
                                .enter()
                                .append('g')


                            barGroups
                                .append('rect')
                                .attr('class', 'bar')
                                .attr('x', (g) => xScale(g.Range))
                                .attr('y', (g) => yScale(g.Frequency))
                                .attr('height', (g) => height - yScale(g.Frequency))
                                .attr('width', xScale.bandwidth())

                                .on('mouseleave', function () {
                                    d3.selectAll('.value')
                                        .attr('opacity', 1)

                                    d3.select(this)
                                        .transition()
                                        .duration(300)
                                        .attr('opacity', 1)
                                        .attr('x', (a) => xScale(a.Range))
                                        .attr('width', xScale.bandwidth())

                                    chart.selectAll('#limit').remove()
                                    chart.selectAll('.divergence').remove()
                                })

                            barGroups
                                .append('text')
                                .attr('class', 'value')
                                .attr('x', (a) => xScale(a.Range) + xScale.bandwidth() / 2)
                                .attr('y', (a) => yScale(a.Frequency) + -10)
                                .attr('text-anchor', 'middle')
                                .text((a) => `${a.Frequency}`)

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', -(height / 2) - margin)
                                .attr('y', margin / 2.4)
                                .attr('transform', 'rotate(-90)')
                                .attr('text-anchor', 'middle')
                                .text('Frequency')

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', width / 2 + margin)
                                .attr('y', height + margin * 1.5)
                                .attr('text-anchor', 'middle')
                                .text('Cycle Time')

                        }

                        else {

                            var div_width = 400;
                            var div_height = 400;

                            var svg = d3.select(".Range_chart_daywise").append("svg")

                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            //svg.append("text")
                            //    .text("No Data Available")
                            //    .style("font-size", "40px");

                            $("#err_Range_chart_daywise").html("No Data Available...!");
                            $("#d_cycletime").html("");

                        }
                    }
                });

            }

            //monthwise
            else if (TimeSlot == "3") {
                if (Month == null || Month == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Month...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                if (Movement == null || Movement == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Movement...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Monthwise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "Month": Month,
                        "Machine": Machine,
                        "Variant": Variant,
                        "Operation": Movement
                    };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Histogram',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#monthwise_histogram").show();

                        d3.select(".Range_chart_monthwise svg").remove();

                        $("#err_Range_chart_monthwise").html("");

                        if (response.status != "Error") {
                            $("#m_cycletime").html('Actual Cycletime:' + response.data.Table[0].CycleTime+" sec ");
                            sample = response.data.Table;

                            const svg = d3.select(".Range_chart_monthwise").append("svg");
                            const svgContainer = d3.select('#container');


                            const a = $('.Range_chart_monthwise').height();
                            const b = $('.Range_chart_monthwise').width();

                            const margin = 80;
                            const width = b - 2 * margin;
                            const height = a - 2 * margin;

                            const chart = svg.append('g')
                                .attr('transform', `translate(${margin}, ${margin})`);

                            const xScale = d3.scaleBand()
                                .range([0, width])
                                .domain(sample.map((s) => s.Range))
                                .padding(0.4)

                            const yScale = d3.scaleLinear()
                                .range([height, 0])
                               // .domain([0, 100]);
                                .domain([0, d3.max(sample, function (d) { return d.Frequency; })]);

                            const makeYLines = () => d3.axisLeft()
                                .scale(yScale)

                            chart.append('g')
                                .attr('transform', `translate(0, ${height})`)
                                .call(d3.axisBottom(xScale))
                                .selectAll("text")
                                .attr("y", 0)
                                .attr("x", 30)
                                .attr("dy", "1.35em")
                                .attr("transform", "rotate(0)")
                                .style("text-anchor", "end");


                            chart.append('g')
                                .call(d3.axisLeft(yScale));

                            chart.append('g')
                                .attr('class', 'grid')
                                .call(makeYLines()
                                    .tickSize(-width, 0, 0)
                                    .tickFormat('')
                                )


                            const barGroups = chart.selectAll()
                                .data(sample)
                                .enter()
                                .append('g')


                            barGroups
                                .append('rect')
                                .attr('class', 'bar')
                                .attr('x', (g) => xScale(g.Range))
                                .attr('y', (g) => yScale(g.Frequency))
                                .attr('height', (g) => height - yScale(g.Frequency))
                                .attr('width', xScale.bandwidth())

                                .on('mouseleave', function () {
                                    d3.selectAll('.value')
                                        .attr('opacity', 1)

                                    d3.select(this)
                                        .transition()
                                        .duration(300)
                                        .attr('opacity', 1)
                                        .attr('x', (a) => xScale(a.Range))
                                        .attr('width', xScale.bandwidth())

                                    chart.selectAll('#limit').remove()
                                    chart.selectAll('.divergence').remove()
                                })

                            barGroups
                                .append('text')
                                .attr('class', 'value')
                                .attr('x', (a) => xScale(a.Range) + xScale.bandwidth() / 2)
                                .attr('y', (a) => yScale(a.Frequency) + -10)
                                .attr('text-anchor', 'middle')
                                .text((a) => `${a.Frequency}`)

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', -(height / 2) - margin)
                                .attr('y', margin / 2.4)
                                .attr('transform', 'rotate(-90)')
                                .attr('text-anchor', 'middle')
                                .text('Frequency')

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', width / 2 + margin)
                                .attr('y', height + margin * 1.5)
                                .attr('text-anchor', 'middle')
                                .text('Cycle Time')

                        }

                        else {
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select(".Range_chart_monthwise").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            //svg.append("text")
                            //    .text("No Data Available")
                            //    .style("font-size", "40px");

                            $("#err_Range_chart_monthwise").html("No Data Available...!");
                            $("#m_cycletime").html("");

                        }
                    }
                });

            }


            //yearwise

            else if (TimeSlot == "4") {
                if (Year == null || Year == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Year...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                if (Movement == null || Movement == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Movement...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Yearwise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "Year": Year,
                        "Machine": Machine,
                        "Variant": Variant,
                        "Operation": Movement
                    };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Histogram',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#yearwise_histogram").show();

                        d3.select(".Range_chart_yearwise svg").remove();

                        $("#err_Range_chart_yearwise").html("");

                        if (response.status != "Error") {
                            $("#y_cycletime").html('Actual Cycletime:' + response.data.Table[0].CycleTime+" sec ");
                            sample = response.data.Table;

                            const svg = d3.select(".Range_chart_yearwise").append("svg");
                            const svgContainer = d3.select('#container');


                            const a = $('.Range_chart_yearwise').height();
                            const b = $('.Range_chart_yearwise').width();

                            const margin = 80;
                            const width = b - 2 * margin;
                            const height = a - 2 * margin;

                            const chart = svg.append('g')
                                .attr('transform', `translate(${margin}, ${margin})`);

                            const xScale = d3.scaleBand()
                                .range([0, width])
                                .domain(sample.map((s) => s.Range))
                                .padding(0.4)

                            const yScale = d3.scaleLinear()
                                .range([height, 0])
                                //.domain([0, 100]);
                                .domain([0, d3.max(sample, function (d) { return d.Frequency; })]);

                            const makeYLines = () => d3.axisLeft()
                                .scale(yScale)

                            chart.append('g')
                                .attr('transform', `translate(0, ${height})`)
                                .call(d3.axisBottom(xScale))
                                .selectAll("text")
                                .attr("y", 0)
                                .attr("x", 30)
                                .attr("dy", "1.35em")
                                .attr("transform", "rotate(0)")
                                .style("text-anchor", "end");


                            chart.append('g')
                                .call(d3.axisLeft(yScale));

                            chart.append('g')
                                .attr('class', 'grid')
                                .call(makeYLines()
                                    .tickSize(-width, 0, 0)
                                    .tickFormat('')
                                )


                            const barGroups = chart.selectAll()
                                .data(sample)
                                .enter()
                                .append('g')


                            barGroups
                                .append('rect')
                                .attr('class', 'bar')
                                .attr('x', (g) => xScale(g.Range))
                                .attr('y', (g) => yScale(g.Frequency))
                                .attr('height', (g) => height - yScale(g.Frequency))
                                .attr('width', xScale.bandwidth())

                                .on('mouseleave', function () {
                                    d3.selectAll('.value')
                                        .attr('opacity', 1)

                                    d3.select(this)
                                        .transition()
                                        .duration(300)
                                        .attr('opacity', 1)
                                        .attr('x', (a) => xScale(a.Range))
                                        .attr('width', xScale.bandwidth())

                                    chart.selectAll('#limit').remove()
                                    chart.selectAll('.divergence').remove()
                                })

                            barGroups
                                .append('text')
                                .attr('class', 'value')
                                .attr('x', (a) => xScale(a.Range) + xScale.bandwidth() / 2)
                                .attr('y', (a) => yScale(a.Frequency) + -10)
                                .attr('text-anchor', 'middle')
                                .text((a) => `${a.Frequency}`)

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', -(height / 2) - margin)
                                .attr('y', margin / 2.4)
                                .attr('transform', 'rotate(-90)')
                                .attr('text-anchor', 'middle')
                                .text('Frequency')

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', width / 2 + margin)
                                .attr('y', height + margin * 1.5)
                                .attr('text-anchor', 'middle')
                                .text('Cycle Time')

                        }

                        else {
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select(".Range_chart_yearwise").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            //svg.append("text")
                            //    .text("No Data Available")
                            //    .style("font-size", "40px");

                            $("#err_Range_chart_yearwise").html("No Data Available...!");
                            $("#y_cycletime").html("");
                        }
                    }
                });

            }
            //Custom wise

            else if (TimeSlot == "5") {
                if (FDate == null || FDate == '') {
                    swal({
                        icon: "error",
                        title: "Please Select From Date...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
                if (FDate == null || TDate == '') {
                    swal({
                        icon: "error",
                        title: "Please Select To Date...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                if (Movement == null || Movement == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Movement...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Customwise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "FDate": FDate,
                        "TDate": TDate,
                        "Machine": Machine,
                        "Variant": Variant,
                        "Operation": Movement
                    };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Histogram',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#customwise_histogram").show();

                        d3.select(".Range_chart_customwise svg").remove();

                        if (response.status != "Error") {
                            $("#c_cycletime").html('Actual Cycletime:' + response.data.Table[0].CycleTime+" sec ");
                            sample = response.data.Table;

                            const svg = d3.select(".Range_chart_customwise").append("svg");
                            const svgContainer = d3.select('#container');


                            const a = $('.Range_chart_customwise').height();
                            const b = $('.Range_chart_customwise').width();

                            const margin = 80;
                            const width = b - 2 * margin;
                            const height = a - 2 * margin;

                            const chart = svg.append('g')
                                .attr('transform', `translate(${margin}, ${margin})`);

                            const xScale = d3.scaleBand()
                                .range([0, width])
                                .domain(sample.map((s) => s.Range))
                                .padding(0.4)

                            const yScale = d3.scaleLinear()
                                .range([height, 0])
                                //.domain([0, 100]);
                                .domain([0, d3.max(sample, function (d) { return d.Frequency; })]);

                            const makeYLines = () => d3.axisLeft()
                                .scale(yScale)


                            var tooltip = d3.select(".Range_chart_customwise")
                                .append("div")
                                .style("opacity", 0)
                                .attr("class", "tooltip")
                                .style("background-color", "tranparent")
                                .style("border", "solid")
                                .style("border-width", "2px")
                                .style("border-radius", "5px")
                                .style("padding", "5px")

                            tooltip = d3.select("body").append("div").style("width", "150px").style("height", "50px").style("background", "white")
                                .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                            toolval = tooltip.append("div");



                            chart.append('g')
                                .attr('transform', `translate(0, ${height})`)
                            /*    .call(d3.axisBottom(xScale))*/
                                .selectAll("text")
                                .attr("y", 0)
                                .attr("x", 30)
                                .attr("dy", "1.35em")
                                .attr("transform", "rotate(0)")
                                .style("text-anchor", "end");


                            chart.append('g')
                                .call(d3.axisLeft(yScale));

                            chart.append('g')
                                .attr('class', 'grid')
                                .call(makeYLines()
                                    .tickSize(-width, 0, 0)
                                    .tickFormat('')
                                )


                            const barGroups = chart.selectAll()
                                .data(sample)
                                .enter()
                                .append('g')


                            barGroups
                                .append('rect')
                                .attr('class', 'bar')
                                .attr('x', (g) => xScale(g.Range))
                                .attr('y', (g) => yScale(g.Frequency))
                                .attr('height', (g) => height - yScale(g.Frequency))
                                .attr('width', xScale.bandwidth())

                                //.on('mouseleave', function () {
                                //    d3.selectAll('.value')
                                //        .attr('opacity', 1)

                                //    d3.select(this)
                                //        .transition()
                                //        .duration(300)
                                //        .attr('opacity', 1)
                                //        .attr('x', (a) => xScale(a.Range))
                                //        .attr('width', xScale.bandwidth())

                                //    chart.selectAll('#limit').remove()
                                //    chart.selectAll('.divergence').remove()
                                //})

                                .on("mouseout", function () {
                                    d3.select(this).style("stroke", "none");
                                    tooltip.style("visibility", "hidden");
                                })
                                .on("mousemove", function (d) {
                                    tooltip.style("visibility", "visible")
                                        .style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 5) + "px");

                                    var text = 'Range: ' + d.Range;

                                    tooltip.select("div").html(text)

                                })



                            barGroups
                                .append('text')
                                .attr('class', 'value')
                                .attr('x', (a) => xScale(a.Range) + xScale.bandwidth() / 2)
                                .attr('y', (a) => yScale(a.Frequency) + -10)
                                .attr('text-anchor', 'middle')
                                .text((a) => `${a.Frequency}`)

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', -(height / 2) - margin)
                                .attr('y', margin / 2.4)
                                .attr('transform', 'rotate(-90)')
                                .attr('text-anchor', 'middle')
                                .text('Frequency')

                            svg.append('text')
                                .attr('class', 'label')
                                .attr('x', width / 2 + margin)
                                .attr('y', height + margin * 1.5)
                                .attr('text-anchor', 'middle')
                                .text('Cycle Time')

                        }

                        else {
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select(".Range_chart_customwise").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            svg.append("text")
                                .text("No Data Available")
                                .style("font-size", "40px");
                                 $("#c_cycletime").html("");
                        }
                    }
                });

            }
        }

        else if (Report_name == "2") {

            //Shiftwise
            if (TimeSlot == "1") {
                if (ShiftID == "" || ShiftID == null) {
                    swal({
                        icon: "error",
                        title: "Please Select Shift...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                if (ShiftDate == "" || ShiftDate == null) {
                    swal({
                        icon: "error",
                        title: "Please Select Date...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData = {
                    "QueryType": "Shiftwise",
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line": '@Session["LineCode"]',
                    "Shift": ShiftID,
                    "Date": ShiftDate,
                    "Machine": Machine,
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Average',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {


                        $("#average_table").show();
                        $("#lbl_title").html("Shiftwise Average - Table");

                        if (response.status != "Error") {
                            var Cycle_Data = {
                                "QueryType": "Shiftwise_cycle",
                                "CompanyCode": '@Session["CompanyCode"]',
                                "PlantCode": '@Session["PlantCode"]',
                                "Line": '@Session["LineCode"]',
                                "Shift": ShiftID,
                                "Date": ShiftDate,
                                "Machine": Machine,
                            };

                            $.ajax({
                                type: "POST",
                                url: URL + 'api/CycleTime/Get_Cycletime_Average',
                                data: Cycle_Data,
                                headers: {
                                    Authorization: 'Bearer ' + user1
                                },
                                dataType: "json",
                                success: function (result) {
                                    var avarage_data = response.data.Table;

                                    var col = [];
                                    for (var i = 0; i < avarage_data.length; i++) {
                                        for (var key in avarage_data[i]) {
                                            if (col.indexOf(key) === -1) {
                                                col.push(key);
                                            }
                                        }
                                    }

                                    var table = document.createElement("table");

                                    table.setAttribute('class', 'table table-bordered table-striped mb-none');
                                    table.setAttribute('id', 'datatable-default');


                                    var tr = table.insertRow();

                                    for (var i = 0; i < col.length; i++) {
                                        var th = document.createElement("th");

                                        th.innerHTML = col[i];

                                        tr.appendChild(th);
                                    }

                                    for (var i = 0; i < avarage_data.length; i++) {

                                        tr = table.insertRow(-1);


                                        for (var j = 0; j < col.length; j++) {

                                            var tabCell = tr.insertCell(-1);

                                            var count = 0;
                                            for (var ii = 0; ii < result.data.Table.length; ii++) {

                                                if (count == 0) {
                                                    if (result.data.Table[ii].VariantCode == col[j])
                                                    {
                                                        if (result.data.Table[ii].Operation == avarage_data[i][col[0]])
                                                        {
                                                            if (result.data.Table[ii].cycle != null && result.data.Table[ii].cycle != '') {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + Math.round((avarage_data[i][col[j]] - result.data.Table[ii].cycle)*100)/100;
                                                            }
                                                            else {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + (result.data.Table[ii].cycle);
                                                            }
                                                            count += 1;
                                                        }
                                                    }
                                                    else {
                                                        tabCell.innerHTML = avarage_data[i][col[j]];
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    var divContainer = document.getElementById("tbl_average");
                                    divContainer.innerHTML = "";
                                    divContainer.appendChild(table);


                                }, error: function (result) {

                                }
                            });
                        }

                        else {
                            var divContainer = document.getElementById("tbl_average");
                            divContainer.innerHTML = "No Data Available...!";
                        }
                    },

                    error: function (response) {

                    }
                });
            }

            //Daywise
            else if (TimeSlot == "2") {
                if (Date == null || Date == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Date...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Daywise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "Date": Date,
                        "Machine": Machine,
                        "Variant": Variant
                };




                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Average',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {tbl_average
                        $('.loading').hide();
                    },
                    success: function (response) {



                        $("#average_table").show();
                        //var VariantCode = $('#end').val();
                        var VariantCode = $('#Variant').val();
                        var Actual_cycle = $("#Actual_cycle").html();

                        $("#lbl_title").html("Daywise Average - Table [ " + VariantCode + "(" + Actual_cycle+' sec) ]');

                        if (response.status != "Error") {
                            var Cycle_Data = {
                                "QueryType": "Daywise_cycle",
                                "CompanyCode": '@Session["CompanyCode"]',
                                "PlantCode": '@Session["PlantCode"]',
                                "Line": '@Session["LineCode"]',
                                "Date": Date,
                                "Machine": Machine,
                                "Variant": Variant
                            };

                            $.ajax({
                                type: "POST",
                                url: URL + 'api/CycleTime/Get_Cycletime_Average',
                                data: Cycle_Data,
                                headers: {
                                    Authorization: 'Bearer ' + user1
                                },
                                dataType: "json",
                                success: function (result) {
                                    var avarage_data = response.data.Table;

                                    var col = [];
                                    for (var i = 0; i < avarage_data.length; i++) {
                                        for (var key in avarage_data[i]) {
                                            if (col.indexOf(key) === -1) {
                                                col.push(key);
                                            }
                                        }
                                    }

                                    var table = document.createElement("table");

                                    table.setAttribute('class', 'table table-bordered table-striped mb-none');
                                    table.setAttribute('id', 'datatable-default');


                                    var tr = table.insertRow();

                                    for (var i = 0; i < col.length; i++) {
                                        var th = document.createElement("th");

                                        th.innerHTML = col[i];

                                        tr.appendChild(th);
                                    }

                                    for (var i = 0; i < avarage_data.length; i++) {

                                        tr = table.insertRow(-1);


                                        for (var j = 0; j < col.length; j++) {

                                            var tabCell = tr.insertCell(-1);

                                            var count = 0;
                                            for (var ii = 0; ii < result.data.Table.length; ii++) {

                                                if (count == 0) {
                                                    if (result.data.Table[ii].VariantCode == col[j]) {

                                                        if (result.data.Table[ii].Operation == avarage_data[i][col[0]]) {
                                                            if (result.data.Table[ii].cycle != null && result.data.Table[ii].cycle != '') {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + Math.round((avarage_data[i][col[j]] - result.data.Table[ii].cycle)*100)/100;
                                                            }
                                                            else {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + (result.data.Table[ii].cycle);
                                                            }
                                                            count += 1;
                                                        }
                                                    }
                                                    else {
                                                        tabCell.innerHTML = avarage_data[i][col[j]];
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    var divContainer = document.getElementById("tbl_average");
                                    divContainer.innerHTML = "";
                                    divContainer.appendChild(table);


                                }, error: function (result) {

                                }
                            });
                        }
                        else {
                            var divContainer = document.getElementById("tbl_average");
                            divContainer.innerHTML = "No Data Available...!";
                        }

                    },

                    error: function (response) {

                    }
                });
            }


            //Monthwise
            else if (TimeSlot == "3") {
                if (Month == null || Month == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Month...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Monthwise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "Month": Month,
                        "Machine": Machine,
                        "Variant": Variant
                    };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Average',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#average_table").show();

                        $("#lbl_title").html("Monthwise Average - Table");

                        if (response.status != "Error") {
                            var Cycle_Data = {
                                "QueryType": "Monthwise_cycle",
                                "CompanyCode": '@Session["CompanyCode"]',
                                "PlantCode": '@Session["PlantCode"]',
                                "Line": '@Session["LineCode"]',
                                "Month": Month,
                                "Machine": Machine,
                                "Variant": Variant
                            };

                            $.ajax({
                                type: "POST",
                                url: URL + 'api/CycleTime/Get_Cycletime_Average',
                                data: Cycle_Data,
                                headers: {
                                    Authorization: 'Bearer ' + user1
                                },
                                dataType: "json",
                                success: function (result) {
                                    var avarage_data = response.data.Table;

                                    var col = [];
                                    for (var i = 0; i < avarage_data.length; i++) {
                                        for (var key in avarage_data[i]) {
                                            if (col.indexOf(key) === -1) {
                                                col.push(key);
                                            }
                                        }
                                    }

                                    var table = document.createElement("table");

                                    table.setAttribute('class', 'table table-bordered table-striped mb-none');
                                    table.setAttribute('id', 'datatable-default');


                                    var tr = table.insertRow();

                                    for (var i = 0; i < col.length; i++) {
                                        var th = document.createElement("th");

                                        th.innerHTML = col[i];

                                        tr.appendChild(th);
                                    }

                                    for (var i = 0; i < avarage_data.length; i++) {

                                        tr = table.insertRow(-1);


                                        for (var j = 0; j < col.length; j++) {

                                            var tabCell = tr.insertCell(-1);

                                            var count = 0;
                                            for (var ii = 0; ii < result.data.Table.length; ii++) {

                                                if (count == 0) {
                                                    if (result.data.Table[ii].VariantCode == col[j])
                                                    {
                                                        if (result.data.Table[ii].Operation == avarage_data[i][col[0]]) {
                                                            if (result.data.Table[ii].cycle != null && result.data.Table[ii].cycle != '') {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + Math.round((avarage_data[i][col[j]] - result.data.Table[ii].cycle)*100)/100;
                                                            }
                                                            else {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + (result.data.Table[ii].cycle);
                                                            }
                                                            count += 1;
                                                        }
                                                    }
                                                    else {
                                                        tabCell.innerHTML = avarage_data[i][col[j]];
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    var divContainer = document.getElementById("tbl_average");
                                    divContainer.innerHTML = "";
                                    divContainer.appendChild(table);


                                }, error: function (result) {

                                }
                            });
                        }
                        else {
                            var divContainer = document.getElementById("tbl_average");
                            divContainer.innerHTML = "No Data Available...!";
                        }

                    },

                    error: function (response) {

                    }
                });
            }

            //Yearwise
            else if (TimeSlot == "4") {
                if (Year == null || Year == '') {
                    swal({
                        icon: "error",
                        title: "Please Select Year...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Yearwise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "Year": Year,
                        "Machine": Machine,
                        "Variant": Variant
                    };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Average',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#average_table").show();

                        $("#lbl_title").html("Yearwise Average - Table");

                        if (response.status != "Error") {
                            var Cycle_Data = {
                                "QueryType": "Yearwise_cycle",
                                "CompanyCode": '@Session["CompanyCode"]',
                                "PlantCode": '@Session["PlantCode"]',
                                "Line": '@Session["LineCode"]',
                                "Year": Year,
                                "Machine": Machine,
                                "Variant": Variant
                            };

                            $.ajax({
                                type: "POST",
                                url: URL + 'api/CycleTime/Get_Cycletime_Average',
                                data: Cycle_Data,
                                headers: {
                                    Authorization: 'Bearer ' + user1
                                },
                                dataType: "json",
                                success: function (result) {
                                    var avarage_data = response.data.Table;

                                    var col = [];
                                    for (var i = 0; i < avarage_data.length; i++) {
                                        for (var key in avarage_data[i]) {
                                            if (col.indexOf(key) === -1) {
                                                col.push(key);
                                            }
                                        }
                                    }

                                    var table = document.createElement("table");

                                    table.setAttribute('class', 'table table-bordered table-striped mb-none');
                                    table.setAttribute('id', 'datatable-default');


                                    var tr = table.insertRow();

                                    for (var i = 0; i < col.length; i++) {
                                        var th = document.createElement("th");

                                        th.innerHTML = col[i];

                                        tr.appendChild(th);
                                    }

                                    for (var i = 0; i < avarage_data.length; i++) {

                                        tr = table.insertRow(-1);


                                        for (var j = 0; j < col.length; j++) {

                                            var tabCell = tr.insertCell(-1);

                                            var count = 0;
                                            for (var ii = 0; ii < result.data.Table.length; ii++) {

                                                if (count == 0) {
                                                    if (result.data.Table[ii].VariantCode == col[j])
                                                    {
                                                        if (result.data.Table[ii].Operation == avarage_data[i][col[0]]) {
                                                            if (result.data.Table[ii].cycle != null && result.data.Table[ii].cycle != '') {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + Math.round( (avarage_data[i][col[j]] - result.data.Table[ii].cycle)*100)/100;
                                                            }
                                                            else {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + (result.data.Table[ii].cycle);
                                                            }
                                                            count += 1;
                                                        }
                                                    }
                                                    else {
                                                        tabCell.innerHTML = avarage_data[i][col[j]];
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    var divContainer = document.getElementById("tbl_average");
                                    divContainer.innerHTML = "";
                                    divContainer.appendChild(table);


                                }, error: function (result) {

                                }
                            });
                        }
                        else {
                            var divContainer = document.getElementById("tbl_average");
                            divContainer.innerHTML = "No Data Available...!";
                        }
                    },

                    error: function (response) {

                    }
                });
            }

            //Custom wise
            else if (TimeSlot == "5") {
                if (FDate == null || FDate == '') {
                    swal({
                        icon: "error",
                        title: "Please Select First Date...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }

                var myData =
                    {
                        "QueryType": "Customwise",
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line": '@Session["LineCode"]',
                        "FDate": FDate,
                        "TDate": TDate,
                        "Machine": Machine,
                        "Variant": Variant
                    };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/CycleTime/Get_Cycletime_Average',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#average_table").show();

                        $("#lbl_title").html("Customwise Average - Table");

                        if (response.status != "Error") {
                            var Cycle_Data = {
                                "QueryType": "Customwise_cycle",
                                "CompanyCode": '@Session["CompanyCode"]',
                                "PlantCode": '@Session["PlantCode"]',
                                "Line": '@Session["LineCode"]',
                                "FDate": FDate,
                                "TDate": TDate,
                                "Machine": Machine,
                                "Variant": Variant
                            };

                            $.ajax({
                                type: "POST",
                                url: URL + 'api/CycleTime/Get_Cycletime_Average',
                                data: Cycle_Data,
                                headers: {
                                    Authorization: 'Bearer ' + user1
                                },
                                dataType: "json",
                                success: function (result) {
                                    var avarage_data = response.data.Table;

                                    var col = [];
                                    for (var i = 0; i < avarage_data.length; i++) {
                                        for (var key in avarage_data[i]) {
                                            if (col.indexOf(key) === -1) {
                                                col.push(key);
                                            }
                                        }
                                    }

                                    var table = document.createElement("table");

                                    table.setAttribute('class', 'table table-bordered table-striped mb-none');
                                    table.setAttribute('id', 'datatable-default');


                                    var tr = table.insertRow();

                                    for (var i = 0; i < col.length; i++) {
                                        var th = document.createElement("th");

                                        th.innerHTML = col[i];

                                        tr.appendChild(th);
                                    }

                                    for (var i = 0; i < avarage_data.length; i++) {

                                        tr = table.insertRow(-1);


                                        for (var j = 0; j < col.length; j++) {

                                            var tabCell = tr.insertCell(-1);

                                            var count = 0;
                                            for (var ii = 0; ii < result.data.Table.length; ii++) {

                                                if (count == 0) {
                                                    if (result.data.Table[ii].VariantCode == col[j])
                                                    {
                                                        if (result.data.Table[ii].Operation == avarage_data[i][col[0]]) {
                                                            if (result.data.Table[ii].cycle != null && result.data.Table[ii].cycle != '') {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + Math.round( (avarage_data[i][col[j]] - result.data.Table[ii].cycle)*100)/100;
                                                            }
                                                            else {
                                                                tabCell.innerHTML = avarage_data[i][col[j]] + " / " + (result.data.Table[ii].cycle);
                                                            }
                                                            count += 1;
                                                        }
                                                    }
                                                    else {
                                                        tabCell.innerHTML = avarage_data[i][col[j]];
                                                    }
                                                }

                                            }
                                        }
                                    }

                                    var divContainer = document.getElementById("tbl_average");
                                    divContainer.innerHTML = "";
                                    divContainer.appendChild(table);


                                }, error: function (result) {

                                }
                            });
                        }
                        else {
                            var divContainer = document.getElementById("tbl_average");
                            divContainer.innerHTML = "No Data Available...!";
                        }
                    },

                    error: function (response) {

                    }
                });
            }
        }

        else if (Report_name == "3") {
            if (FDate == null) {
                swal({
                    icon: "error",
                    title: "Please Select First Date...!",
                    button: true,
                    timer: 4500
                })
                return;
            }



            var myData = {
                "QueryType": "Partwise",
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                "line": '@Session["LineCode"]',
                "Date": P_Date,
                "Machine": Machine,
                "Variant": Variant,
                "FTime": P_From_time,
                "TTime": P_To_time
            };

            $.ajax({
                type: "POST",
                url: URL + 'api/CycleTime/Get_Cycletime_Partwise',
                data: myData,
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response)
                {
                   // d3.select("#charts svg").remove();

                    if (response.status != "Error") {
                        $("#error_msg").html('');

                        d3.select("#charts svg").remove();

                        var operation_list = new Array();

                        var myData = {
                            "QueryType": "Get_keys",
                            "CompanyCode": '@Session["CompanyCode"]',
                            "PlantCode": '@Session["PlantCode"]',
                            "line": '@Session["LineCode"]',
                            "Date": P_Date,
                            "Machine": Machine,
                            "Variant": Variant,
                            "FTime": P_From_time,
                            "TTime": P_To_time
                        };
                        $.ajax({
                            type: "POST",
                            url: URL + 'api/CycleTime/Get_Cycletime_Partwise',
                            data: myData,
                            headers: {
                                Authorization: 'Bearer ' + user1
                            },
                            dataType: "json",
                            success: function (result) {

                                for (var ii = 0; ii < result.data.Table.length; ii++) {
                                    operation_list.push(result.data.Table[ii].Operations);
                                }

                                $("#partwise_chart").show();
                                $("#Legend_charts").html('');

                                d3.select("#charts").append("svg");

                                if (response.status != "Error") {

                                    var mainDiv = "#charts";
                                    var mainDivName = "charts";
                                    var group = operation_list;

                                    createChartLegend(mainDiv, group);

                                    var salesData = response.data.Table;

                                    salesData.forEach(function (d) {
                                        d = type(d);
                                    });
                                    var layers = d3.stack()
                                        .keys(group)
                                        .offset(d3.stackOffsetDiverging)
                                        (salesData);

                                    var svg = d3.select("#charts svg"),
                                        margin = {
                                            top: 20,
                                            right: 30,
                                            bottom: 80,
                                            left: 60
                                        },
                                        //width = +svg.attr("width"),
                                        //height = +svg.attr("height");
                                        width = 800,
                                        height = 500;

                                    var x = d3.scaleBand()
                                        .rangeRound([margin.left, width - margin.right])
                                        .padding(0.1);

                                    x.domain(salesData.map(function (d) {
                                        return d.Part;
                                    }))

                                    var y = d3.scaleLinear()
                                        .rangeRound([height - margin.bottom, margin.top]);

                                    y.domain([d3.min(layers, stackMin), d3.max(layers, stackMax)])

                                    function stackMin(layers) {
                                        return d3.min(layers, function (d) {
                                            return d[0];
                                        });
                                    }

                                    function stackMax(layers) {
                                        return d3.max(layers, function (d) {
                                            return d[1];
                                        });
                                    }

                                    var z = d3.scaleOrdinal(d3.schemeCategory10);

                                    var maing = svg.append("g")
                                        .selectAll("g")
                                        .data(layers);
                                    var g = maing.enter().append("g")
                                        .attr("fill", function (d) {
                                            return z(d.key);
                                        });

                                    var rect = g.selectAll("rect")
                                        .data(function (d) {
                                            d.forEach(function (d1) {
                                                d1.key = d.key;
                                                return d1;
                                            });
                                            return d;
                                        })
                                        .enter().append("rect")
                                        .attr("data", function (d) {
                                            var data = {};
                                            data["key"] = d.key;
                                            data["value"] = d.data[d.key];
                                            var total = 0;
                                            group.map(function (d1) {
                                                total = total + d.data[d1]
                                            });
                                            data["total"] = total;
                                            return JSON.stringify(data);
                                        })
                                        .attr("width", x.bandwidth)
                                        .attr("x", function (d) {
                                            return x(d.data.Part);
                                        })
                                        .attr("y", function (d) {
                                            return y(d[1]);
                                        })
                                        .attr("height", function (d) {
                                            return y(d[0]) - y(d[1]);
                                        });

                                    rect.on("mouseover", function () {
                                        var currentEl = d3.select(this);
                                        var fadeInSpeed = 120;
                                        d3.select("#recttooltip_" + mainDivName)
                                            .transition()
                                            .duration(fadeInSpeed)
                                            .style("opacity", function () {
                                                return 1;
                                            });
                                        d3.select("#recttooltip_" + mainDivName).attr("transform", function (d) {
                                            var mouseCoords = d3.mouse(this.parentNode);
                                            var xCo = 0;
                                            if (mouseCoords[0] + 10 >= width * 0.80) {
                                                xCo = mouseCoords[0] - parseFloat(d3.selectAll("#recttooltipRect_" + mainDivName)
                                                    .attr("width"));
                                            } else {
                                                xCo = mouseCoords[0] + 10;
                                            }
                                            var x = xCo;
                                            var yCo = 0;
                                            if (mouseCoords[0] + 10 >= width * 0.80) {
                                                yCo = mouseCoords[1] + 10;
                                            } else {
                                                yCo = mouseCoords[1];
                                            }
                                            var x = xCo;
                                            var y = yCo;
                                            return "translate(" + x + "," + y + ")";
                                        });
                                        //CBT:calculate tooltips text
                                        var tooltipData = JSON.parse(currentEl.attr("data"));
                                        var tooltipsText = "";
                                        d3.selectAll("#recttooltipText_" + mainDivName).text("");
                                        var yPos = 0;
                                        d3.selectAll("#recttooltipText_" + mainDivName).append("tspan").attr("x", 0).attr("y", yPos * 10).attr("dy", "1.9em").text(tooltipData.key + ":  " + tooltipData.value);
                                        yPos = yPos + 1;
                                        d3.selectAll("#recttooltipText_" + mainDivName).append("tspan").attr("x", 0).attr("y", yPos * 10).attr("dy", "1.9em").text("Total" + ":  " + tooltipData.total);
                                        //CBT:calculate width of the text based on characters
                                        var dims = helpers.getDimensions("recttooltipText_" + mainDivName);
                                        d3.selectAll("#recttooltipText_" + mainDivName + " tspan")
                                            .attr("x", dims.w + 4);

                                        d3.selectAll("#recttooltipRect_" + mainDivName)
                                            .attr("width", dims.w + 10)
                                            .attr("height", dims.h + 20);

                                    });

                                    rect.on("mousemove", function () {
                                        var currentEl = d3.select(this);
                                        currentEl.attr("r", 7);
                                        d3.selectAll("#recttooltip_" + mainDivName)
                                            .attr("transform", function (d) {
                                                var mouseCoords = d3.mouse(this.parentNode);
                                                var xCo = 0;
                                                if (mouseCoords[0] + 10 >= width * 0.80) {
                                                    xCo = mouseCoords[0] - parseFloat(d3.selectAll("#recttooltipRect_" + mainDivName)
                                                        .attr("width"));
                                                } else {
                                                    xCo = mouseCoords[0] + 10;
                                                }
                                                var x = xCo;
                                                var yCo = 0;
                                                if (mouseCoords[0] + 10 >= width * 0.80) {
                                                    yCo = mouseCoords[1] + 10;
                                                } else {
                                                    yCo = mouseCoords[1];
                                                }
                                                var x = xCo;
                                                var y = yCo;
                                                return "translate(" + x + "," + y + ")";
                                            });
                                    });
                                    rect.on("mouseout", function () {
                                        var currentEl = d3.select(this);
                                        d3.select("#recttooltip_" + mainDivName)
                                            .style("opacity", function () {
                                                return 0;
                                            })
                                            .attr("transform", function (d, i) {
                                                // klutzy, but it accounts for tooltip padding which could push it onscreen
                                                var x = -500;
                                                var y = -500;
                                                return "translate(" + x + "," + y + ")";
                                            });
                                    });

                                    svg.append("g")
                                        .attr("transform", "translate(0," + y(0) + ")")
                                        .call(d3.axisBottom(x))
                                        .append("text")
                                        .attr("x", width / 2)
                                        .attr("y", margin.bottom * 0.5)
                                        .attr("dx", "0.32em")
                                        .attr("fill", "#000")
                                        .attr("font-weight", "bold")
                                        .attr("text-anchor", "start")
                                        .text("Part");

                                    svg.append("g")
                                        .attr("transform", "translate(" + margin.left + ",0)")
                                        .call(d3.axisLeft(y))
                                        .append("text")
                                        .attr("transform", "rotate(-90)")
                                        .attr("x", 0 - (height / 2))
                                        .attr("y", 15 - (margin.left))
                                        .attr("dy", "0.32em")
                                        .attr("fill", "#000")
                                        .attr("font-weight", "bold")
                                        .attr("text-anchor", "middle")
                                        .text("Cycle Time");

                                    var rectTooltipg = svg.append("g")
                                        .attr("font-family", "sans-serif")
                                        .attr("font-size", 10)
                                        .attr("text-anchor", "end")
                                        .attr("id", "recttooltip_" + mainDivName)
                                        .attr("style", "opacity:0")
                                        .attr("transform", "translate(-500,-500)");

                                    rectTooltipg.append("rect")
                                        .attr("id", "recttooltipRect_" + mainDivName)
                                        .attr("x", 0)
                                        .attr("width", 120)
                                        .attr("height", 100)
                                        .attr("opacity", 0.71)
                                        .style("fill", "#000000");

                                    rectTooltipg
                                        .append("text")
                                        .attr("id", "recttooltipText_" + mainDivName)
                                        .attr("x", 30)
                                        .attr("y", 15)
                                        .attr("fill", function () {
                                            return "#fff"
                                        })
                                        .style("font-size", function (d) {
                                            return 10;
                                        })
                                        .style("font-family", function (d) {
                                            return "arial";
                                        })
                                        .text(function (d, i) {
                                            return "";
                                        });


                                    function type(d) {
                                        d.Part = d.Part;
                                        group.forEach(function (c) {
                                            d[c] = +d[c];
                                        });
                                        return d;
                                    }

                                    var helpers = {
                                        getDimensions: function (id) {
                                            var el = document.getElementById(id);
                                            var w = 0,
                                                h = 0;
                                            if (el) {
                                                if (el) {
                                                    var dimensions = el.getBBox();
                                                    w = dimensions.width;
                                                    h = dimensions.height;
                                                } else {
                                                    console.log("error: getDimensions() " + id + " not found.");
                                                }
                                                return {
                                                    w: w,
                                                    h: h
                                                };
                                            }
                                        }
                                    }

                                }
                                else {

                                }

                            }, error: function (result) {

                            }
                        });
                    }
                    else {
                        $("#partwise_chart").show();
                        d3.select("#charts svg").remove();
                        $("#Legend_charts").html('');
                        $("#error_msg").html('No Data Available...!');
                    }

                }
            });
        }
    });

</script>

