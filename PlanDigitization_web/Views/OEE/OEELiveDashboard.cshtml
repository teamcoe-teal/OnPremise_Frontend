
@{
	ViewBag.Title = "OEELiveDashboard";
	Layout = "~/Views/Shared/_Layout.cshtml";
}

<header class="page-header">
	<h2> OEE Live Dashboard </h2>
	<div class="right-wrapper pull-right">
		<ol class="breadcrumbs">
			<li>
				<a href="@Url.Action("NewDash","Main")">
					<i class="fa fa-home"></i>
				</a>
			</li>
			@*<li><span>Production</span></li>
				<li><span>RealTime Dashboard</span></li>
				<li><span>OEE</span></li>*@
		</ol>
	</div>
</header>
@if (ViewContext.Controller.HasPermission("OEELive-View"))
{
	<div class="row">
		@*<button type="button" style="float:right;margin-left:2%" class="btn btn-default">OEE Historic<span class="shift"></span></button>*@
		<input type="button" class="btn-info" onclick="location.href='/OEE/OEEHistoricDashboard';" value="Historic-OEE" style="float:right;text-decoration:none;margin-right:2%;background-color:black;border-style:none;" />

	</div>
	<div class="row livedata" style="background-color:burlywood;color:black;align-content:center;text-align:center;">

	</div>
}
else
{
	<div class="row">
		<h2 class="panel-title">View Permission is denied</h2>
	</div>
}
@*<div class="col-md-6">
		<h4>Availability</h4>
		<div class="col-md-2" id='availabilitychart"+i+"' style="float:left">

		</div>
		<h4>Performance</h4>
		<div class="col-md-2" id='availabilitychart"+i+"' style="float:left">

		</div>
		<h4>Quality</h4>
		<div class="col-md-2" id='availabilitychart"+i+"' style="float:left">

		</div>
	</div>*@
@*<div id="my_dataviz"></div>
	<div id="my_dataviz"></div>*@
@*<script src="~/Scripts/d3.v4.js"></script>*@
@*<script src="https://d3js.org/d3.v4.js"></script>*@
@*<script src="~/Scripts/d3-scale-chromatic.js"></script>*@
@*<script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>*@
<script src="~/assets1/javascripts/swal.js"></script>
<style>
	svg {
		width: 100px;
		height: 100px;
	}
</style>
<script type="text/javascript">
	var URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
	//$.getScript(URL + 'Scripts/jquery.signalR-2.4.1.min.js', function () {
		//$.getScript(URL + 'signalr/hubs/', function () {
		//    // Declare a proxy to reference the hub.
		//    $.connection.hub.url = URL + 'signalr';
		//    var notifications = $.connection.PlantDigitizationhub;
		//    //debugger;
		//    // Create a function that the hub can call to broadcast messages.
		//    notifications.client.updateDatas = function () {
		//        getoeelivedata()
		//    };
		//    // Start the connection.
		//    $.connection.hub.start().done(function () {
		//        getoeelivedata();
		//    }).fail(function (e) {
		//        console.log(e);
		//    });
		//});

		function getoeelivedata() {
			//var vars = [], hash;
			//var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
			//for (var i = 0; i < hashes.length; i++) {
			//    hash = hashes[i].split('?');
			//    vars.push(hash[0]);
			//    vars[hash[0]] = hash[1];
			//}

			var myData = {
				"CompanyCode": '@Session["CompanyCode"]',
				"PlantCode": '@Session["PlantCode"]',
				"Line_Code" : '@Session["LineCode"]',
			};
			var R_url = '@Url.Action("Login", "Main")';
			var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
		   $.ajax({
				type: 'Post',
				url: URL + 'api/OEE/check_holiday',
			   data: myData,
				headers: {
				   Authorization: 'Bearer ' + user1
			   },

				dataType: 'json'
		   }).success(function (response) {
			   if (response.data.length == 0) {
				   $.ajax({
				type: 'POST',
				url: URL + 'api/OEE/GetOEElivedata',
				headers: {
					Authorization: 'Bearer ' + user1
				},
				data: myData,
				dataType: 'json'
				}).success(function (response) {
					if (response.data.length != 0) {
						$(".livedata").html('');

						var j = 1;
						var cols = '';
						var sc = '';
						for (var i = 0; i < response.data.length; i++)
						//for (var i = 0; i < 1; i++)
						{
							cols += "<div class='col-md-6 col-xl-6'>";
							cols += "<section class='panel'>";
							cols += "<header class='panel-heading bg-primary'> ";
							//if (response.data[i].MachineStatus == 0)
							//{
							//    sc = 'red';
							//}
							//else {
							//    sc = 'green';
							//}

							if (response.data[i].MachineStatus == 0) {
								sc = 'red';
							}
							if (response.data[i].MachineStatus == 1) {
								sc = 'green';
							}
							if (response.data[i].MachineStatus == 2 || response.data[i].MachineStatus == 3) {
								sc = 'yellow';
							}
							if (response.data[i].MachineStatus == 4) {
								sc = 'gray';
							}
							console.log(response.data[i].MachineStatus);

							cols += "<i class='fa fa-circle' style='color:"+sc+";font-size:15px;'></i>";
							cols += "<span class='title' style='font-size: 120%'> " + response.data[i].MachineCode + "</span>";


							cols += "<h4 class='title' style='color:black;font-family:'Lucida Sans', 'Lucida Sans Regular', 'Lucida Grande', 'Lucida Sans Unicode', Geneva, Verdana, sans-serif'>OEE : " + response.data[i].OEE + " %</h4> ";
								cols += "</header>";
								cols += "<div class='panel-body'> ";
									cols += "<div class='widget-summary'> ";
										cols += "<div class='widget-summary-col'>";
											cols += "<div class='summary'>";
												cols += "<div class='info'>";
													cols += "<div class='col-md-12'>";

														cols += "<div class='col-md-4' id='availabilitychart" + i + "' style='float:left;text-align:center'>";
														cols += "<h5>Availability</h5></div>";

														cols += "<div class='col-md-4' id='performancechart" + i + "' style='float:left;text-align:center'>";
														cols += "<h5>Performance</h5></div>";

														cols += "<div class='col-md-4' id='qualitychart" + i + "' style='float:left;text-align:center'>";
														cols += "<h5>Quality</h5></div>";
													cols += "</div>";
												cols += "</div>";
											cols += "</div>";
										cols += "</div>";
									cols += "</div>";
								cols += "</div>";
							//cols += "</div>";
							cols += "</section>";
							cols += "</div>";
							j++;
						}
						$('.updated_time').text(new Date().toLocaleString());
						$('.shift').text(response.data[0].shift_id);
						$('.shift_n').show();
						$('.updated_time_n').show();

						$(".livedata").html(cols);
						for (var i = 0; i < response.data.length; i++)
						{
								var width = 100
								height = 100
								margin = 10

								// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
								var radius = Math.min(width, height) / 2 - margin

								// append the svg object to the div called 'availabilitychart'
								var svg = d3.select("#availabilitychart"+i+"")
									.append("svg")
									.attr("width", width)
									.attr("height", height)
									.append("g")
									.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

								// Create dummy data
								var data = { a: response.data[i].Availability, b: 100-response.data[i].Availability }

								// set the color scale
								var color = d3.scaleOrdinal()
									.domain(["a","b"])
									.range(["#d95f02","white"]);

								// Compute the position of each group on the pie:
								var pie = d3.pie()
									.sort(null) // Do not sort group by size
									.value(function (d) { return d.value; })
								var data_ready = pie(d3.entries(data))

								// The arc generator
								var arc = d3.arc()
									.innerRadius(radius * 0.5)         // This is the size of the donut hole
									.outerRadius(radius * 0.8)

								// Another arc that won't be drawn. Just for labels positioning
								var outerArc = d3.arc()
									.innerRadius(radius * 0.9)
									.outerRadius(radius * 0.9)

								// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
								svg
									.selectAll('allSlices')
									.data(data_ready)
									.enter()
									.append('path')
									.attr('d', arc)
									.attr('fill', function (d) { return (color(d.data.key)) })

								svg.append("text")
								   .attr("text-anchor", "middle")
									 .attr('font-size', '4em')
									 .attr('y', 5)
									.text(response.data[i].Availability+"%");

						}
						for (var i = 0; i < response.data.length; i++)
						{
								var width = 100
								height = 100
								margin = 10

								// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
								var radius = Math.min(width, height) / 2 - margin

								// append the svg object to the div called 'availabilitychart'
								var svg = d3.select("#qualitychart"+i+"")
									.append("svg")
									.attr("width", width)
									.attr("height", height)
									.append("g")
									.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

								// Create dummy data
								var data = { a: response.data[i].Quality, b: 100 - response.data[i].Quality }

								// set the color scale
								var color = d3.scaleOrdinal()
									.domain(["a","b"])
									.range(["#d95f02","white"]);

								// Compute the position of each group on the pie:
								var pie = d3.pie()
									.sort(null) // Do not sort group by size
									.value(function (d) { return d.value; })
								var data_ready = pie(d3.entries(data))

								// The arc generator
								var arc = d3.arc()
									.innerRadius(radius * 0.5)         // This is the size of the donut hole
									.outerRadius(radius * 0.8)

								// Another arc that won't be drawn. Just for labels positioning
								var outerArc = d3.arc()
									.innerRadius(radius * 0.9)
									.outerRadius(radius * 0.9)

								// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
								svg
									.selectAll('allSlices')
									.data(data_ready)
									.enter()
									.append('path')
									.attr('d', arc)
									.attr('fill', function (d) { return (color(d.data.key)) })

							svg.append("text")
							   .attr("text-anchor", "middle")
								 .attr('font-size', '4em')
								.attr('y', 5)
								.text(response.data[i].Quality+"%");

						}
						for (var i = 0; i < response.data.length; i++)
						{
						 /** Graph with animatiom**/
						   // var data = [ {name: "one", value: response.data[i].Performance},{name: "two", value: 100 - response.data[i].Performance}];

						   // var margin = {top: 10, right: 10, bottom: 10, left: 10};
							  //  width = 80;
							  //  height = 100;

						   // var chart = d3.select("#performancechart"+i+"")
									   //     .append('svg')
									//        .attr("width", width + margin.left + margin.right)
									//        .attr("height", height + margin.top + margin.bottom)
									//       .append("g")
									//        .attr("transform", "translate(" + ((width/2)+margin.left) + "," + ((height/2)+margin.top) + ")");


						   // var radius = Math.min(width, height) / 2;

						   // var color = d3.scaleOrdinal()
						   //     .range(["#3399FF", "white"]);

						   // //var arc = d3.arc()
						   // //    .outerRadius(radius)
						   // //    .innerRadius(radius - 10);
						   //  var arc = d3.arc()
						   //         .innerRadius(radius * 0.5)         // This is the size of the donut hole
						   //         .outerRadius(radius * 0.8)
						   // //var pie = d3.pie()
						   // //    .sort(null)
						   // //    .startAngle(1.1*Math.PI)
						   // //    .endAngle(3.1*Math.PI)
						   // //    .value(function(d) { return d.value; });
						   //      // Compute the position of each group on the pie:
						   //   var pie = d3.pie()
						   //         .sort(null) // Do not sort group by size
						   //         .value(function (d) { return d.value; })
						   //   var data_ready = pie(d3.entries(data))

						   // var g = chart.selectAll(".arc")
						   //   .data(pie(data))
						   // .enter().append("g")
						   //   .attr("class", "arc");

						   // g.append("path")
						   //   .style("fill", function(d) { return color(d.data.name[0]); })
						   //   .transition().delay(function(d, i) { return i * 500; }).duration(500)
						   //   .attrTween('d', function(d) {
						   //        var i = d3.interpolate(d.startAngle+0.1, d.endAngle);
						   //        return function(t) {
						   //            d.endAngle = i(t);
						   //          return arc(d);
						   //        }
						   //   });
						   // g.append("text")
							  // .attr("text-anchor", "middle")
								 //.attr('font-size', '4em')
						   //     .attr('y', 5)
						   //     .text(response.data[i].Performance+"%");

						/*** end here**/

								var width = 100
								height = 100
								margin = 10

								// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
								var radius = Math.min(width, height) / 2 - margin

								// append the svg object to the div called 'availabilitychart'
								var svg = d3.select("#performancechart"+i+"")
									.append("svg")
									.attr("width", width)
									.attr("height", height)
									.append("g")
									.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

							// Create dummy data
							var data = { a: response.data[i].Performance, b: 100 - response.data[i].Performance }

								// set the color scale
								var color = d3.scaleOrdinal()
									.domain(["a"])
									.range(["#d95f02","white"]);

								// Compute the position of each group on the pie:
								var pie = d3.pie()
									.sort(null) // Do not sort group by size
									.value(function (d) { return d.value; })
								var data_ready = pie(d3.entries(data))

								// The arc generator
								var arc = d3.arc()
									.innerRadius(radius * 0.5)         // This is the size of the donut hole
									.outerRadius(radius * 0.8)

								// Another arc that won't be drawn. Just for labels positioning
								var outerArc = d3.arc()
									.innerRadius(radius * 0.9)
									.outerRadius(radius * 0.9)

								// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
								svg
									.selectAll('allSlices')
									.data(data_ready)
									.enter()
									.append('path')
									.attr('d', arc)
									.attr('fill', function (d) { return (color(d.data.key)) })

							svg.append("text")
							   .attr("text-anchor", "middle")
								 .attr('font-size', '4em')
								.attr('y', 5)
								.text(response.data[i].Performance+"%");

						}

					}
					else
					{
						$(".livedata").empty();
						var cols = '';
						cols += "<div class='col-md-12 col-xl-12' style='font-weight:bold;font-size:15px;color:red;'> No Data Available...!</div>";
						$(".livedata").html(cols);
					}
				}).error(function (response) {
					if (response.status == "401") {
						swal({
							icon: "warning",
							title: "Session Timeout",
							button: true,
							closeModal: false
						})
						window.location = R_url;
					}
					else {
						swal({
							icon: "warning",
							title: response.responseText,
							button: true,
							closeModal: false
						})

					}
			   });
				}
				else
				{
					 $(".livedata").empty();
					$(".livedata").html(response.data[0].holiday_name);
				}

				
		   });
			setTimeout(getoeelivedata, 120000);
	}
	$(document).ready(function () {
		getoeelivedata();
});
	//});
</script>
<script type="text/javascript">
	// set the dimensions and margins of the graph
	var width = 100
	height = 100
	margin = 10

	// The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
	var radius = Math.min(width, height) / 2 - margin

	// append the svg object to the div called 'my_dataviz'
	var svg = d3.select("#my_dataviz")
		.append("svg")
		.attr("width", width)
		.attr("height", height)
		.append("g")
		.attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

	// Create dummy data
	var data = { a: 9, b: 81 }

	// set the color scale
	var color = d3.scaleOrdinal()
		.domain(["a"])
		.range(d3.schemeDark2);

	// Compute the position of each group on the pie:
	var pie = d3.pie()
		.sort(null) // Do not sort group by size
		.value(function (d) { return d.value; })
	var data_ready = pie(d3.entries(data))

	// The arc generator
	var arc = d3.arc()
		.innerRadius(radius * 0.5)         // This is the size of the donut hole
		.outerRadius(radius * 0.8)

	// Another arc that won't be drawn. Just for labels positioning
	var outerArc = d3.arc()
		.innerRadius(radius * 0.9)
		.outerRadius(radius * 0.9)

	// Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
	svg
		.selectAll('allSlices')
		.data(data_ready)
		.enter()
		.append('path')
		.attr('d', arc)
		.attr('fill', function (d) { return (color(d.data.key)) })
		.attr("stroke", "white")
		.style("stroke-width", "2px")
		.style("opacity", 0.7)

</script>
<style>
	.panel-heading-custom {
		background: #00818a;
		color: #fff;
	}
</style>

