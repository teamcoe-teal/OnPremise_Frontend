


@{ ViewBag.Title = "AvailabilityHistoricDashboard";
                Layout = "~/Views/Shared/_Layout.cshtml"; }

<meta name="viewport" content="width=device-width, initial-scale=1.0">
@*<script src="~/Scripts/d3.min.js"></script>*@
<script src="~/Scripts/d3_v4.min.js"></script>
@*<script src="https://d3js.org/d3-interpolate.v2.min.js"></script>
    <script src="https://d3js.org/d3-scale-chromatic.v2.min.js"></script>*@
<link rel="stylesheet" type="text/css" href="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.css">
<header class="page-header">
    <h2>Quality Analysis-Heat Map</h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("MainDashboard","MainDashboard")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            @*<li><span>Quality</span></li>
                <li><span>Historic Data & Analytics</span></li>
                <li><span>Quality Analysis</span></li>
                <li><span>HeatMap</span></li>*@
        </ol>
    </div>
</header>
@if (ViewContext.Controller.HasPermission("MachineAvailabilityHistoric-View"))
{
<input type="button" class="btn btn-primary" onclick="location.href='/Quality/QualityLiveDashboard';" value="Click to View Live Quality Dashbaord" style="float:right;text-decoration:none;margin-right:2%;border-style:none;" />
                <div class="row">
                    <div class="col-md-12">
                        @*<div class="btn-group">
                                <label class="control-label" style="float:right; font-weight:bold;"> Select Line </label>
                            </div>
                            <div class="btn-group">
                                <select id="linecode" class="form-control" name="linecode" title="*"></select>
                            </div>&nbsp;&nbsp;*@
                        <div class="btn-group">
                            <label class="control-label" style="float:right; font-weight:bold;"> Select Machine </label>
                        </div>
                        <div class="btn-group">
                            <select id="machinecode" class="form-control" name="machinecode">
                                <option value="">Select Line First</option>
                            </select>
                        </div>
                    </div>
                </div>
                                <div class="row">
                                    <div class="col-md-12">
                                        <div class="tabs tabs-danger">
                                            <ul class="nav nav-tabs">
                                                <li class="active" id="custom_report">
                                                    <a href="#custom" data-toggle="tab">Custom</a>
                                                </li>
                                                <li id="yearly_report">
                                                    <a href="#yearly" data-toggle="tab"> Yearly</a>
                                                </li>
                                                <li id="monthly_report">
                                                    <a href="#monthly" data-toggle="tab">Monthly</a>
                                                </li>
                                            </ul>
                                            <div class="tab-content">
                                                <div id="custom" class="tab-pane active">
                                                    <section class="panel">
                                                        <div class="form-group">
                                                            <label class="col-md-2 control-label">Date range</label>
                                                            <div class="col-md-6">
                                                                <div class="input-daterange input-group">
                                                                    <span class="input-group-addon">
                                                                        <i class="fa fa-calendar"></i>
                                                                    </span>
                                                                    <input type="text" class="form-control start" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                                                                    <span class="input-group-addon">to</span>
                                                                    <input type="text" class="form-control end" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <div class="btn-group">
                                                                    <button type="button" id="searchcustomwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                                                </div>
                                                                <div class="btn-group">
                                                                    <button type="button" id="resetcustom" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="panel-body">
                                                            @*<div class="chart chart-md" id="custom1"></div>*@

                                                            @*<div id="heat_head" style="display:none"><h2>Heat Map for rejections</h2></div>*@


                                                            <div id="heatmap_custom" class="custom" style="padding-left:5%;height:500px;width:100%"></div>

                                                        </div>
                                                    </section>
                                                </div>

                                                <div id="yearly" class="tab-pane">
                                                    <section class="panel">
                                                        <div class="form-group">
                                                            <div class="col-md-2"></div>
                                                            <label class="col-md-2 control-labe">Select Year</label>
                                                            <div class="col-md-4">
                                                                <div class="input-group">
                                                                    <span class="input-group-addon">
                                                                        <i class="fa fa-calendar"></i>
                                                                    </span>
                                                                    <input class="date-own form-control" style="width: 150px;z-index:0;" type="text" id="year" readonly>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <div class="btn-group">
                                                                    <button type="button" id="searchyearwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                                                </div>
                                                                <div class="btn-group">
                                                                    <button type="button" id="resetyear" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="panel-body">
                                                            <div id='year_report' class="year_report" style="height:500px;width:100%">
                                                                <svg style="height:100%;width:100%"></svg>
                                                            </div>
                                                        </div>
                                                    </section>
                                                </div>

                                                <div id="monthly" class="tab-pane">
                                                    <section class="panel">
                                                        <div class="form-group">
                                                            <div class="col-md-2"></div>
                                                            <label class="col-md-2 control-label">Select Month</label>
                                                            <div class="col-md-4">
                                                                <div class="input-group">
                                                                    <span class="input-group-addon">
                                                                        <i class="fa fa-calendar"></i>
                                                                    </span>
                                                                    <input class="month-own form-control" style="width: 150px;z-index:0;" type="text" id="month" readonly>
                                                                </div>
                                                            </div>
                                                            <div class="col-md-4">
                                                                <div class="btn-group">
                                                                    <button type="button" id="searchmonthwise" class="mb-xs mt-xs mr-xs btn btn-primary">View</button>
                                                                </div>
                                                                <div class="btn-group">
                                                                    <button type="button" id="resetmonth" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
                                                                </div>
                                                            </div>
                                                        </div>

                                                        <div class="panel-body">
                                                            @*<div class="chart chart-md" id="custom1"></div>*@
                                                            <div id='monthly_chart' style="height:500px;width:100%">
                                                                <svg class="custom1" style="height:100%;width:100%"></svg>
                                                            </div>

                                                        </div>
                                                    </section>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div> }
                                            else
                                            {
                                <div class="row">
                                    <h2 class="panel-title">View Permission is denied</h2>
                                </div>}

<!-- end: page -->
<script src="~/assets1/javascripts/swal.js"></script>
<script src="~/assets1/javascripts/swal_alert.js"></script>
<script src="~/assets1/datepicker_normal/datepicker_normal_jquery.min.js"></script>
<script src="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    $(".datepic").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        endDate: '-1d'
    });

    $('.month-own').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.date-own').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        startView: 2,
        endDate: '+0y',
        orientation: "bottom"
    });

    $(function () {
        var todaydt = new Date();
        $("#start").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate());
            $('#end').datepicker('setStartDate', minDate);
        });

        $("#end").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() - 1);
            $('#start').datepicker('setEndDate', minDate);
        });
    });


</script>

<style>
    #reasons_table thead th {
        background-color: #F3A94D;
        color: white;
    }

    #breakdown {
        margin-top: 20px;
        height: 500px;
        overflow: auto;
        width: 100%;
    }

        #breakdown th div {
            position: absolute;
            margin-top: -20px;
        }
</style>

<script type="text/javascript">
    $(function () {
        var CompanyCode = '@Session["CompanyCode"]';
        var PlantCode = '@Session["PlantCode"]';
        var LineCode = '@Session["LineCode"]';
        if (CompanyCode == "" && PlantCode == "" && LineCode == "") {
            swal({
                icon: "error",
                title: "Please Select Customer, Plant and Line...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else
            if (CompanyCode == "") {
                swal({
                    icon: "error",
                    title: "Please Select Customer...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
            else
                if (PlantCode == "") {
                    swal({
                        icon: "error",
                        title: "Please Select Plant...!",
                        button: true,
                        timer: 4500
                    })
                    return;
                }
        if (LineCode == "") {
            swal({
                icon: "error",
                title: "Please Select Line...!",
                button: true,
                timer: 4500
            })
            return;
        }
        else {
            var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';


            var myData1 = {
                "Flag": "Subsystem",
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                "LineCode": '@Session["LineCode"]',
            };
            var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            $.ajax({
                type: "POST",
                url: '@Url.Action("GetSettingdatas1", "Main")',
                data: myData1,
                dataType: "json",
                success: function (response) {
                    var s = '<option value="">Select Machine</option>';
                    for (var i = 0; i < response.data.length; i++) {
                        if (response.data.length == 1) {
                            s += '<option value="' + response.data[i].Code + '" selected=selected>' + response.data[i].Name + '</option>';
                        }
                        else {
                            s += '<option value="' + response.data[i].Code + '">' + response.data[i].Code + "-" + response.data[i].Name + '</option>';
                        }
                    }
                    $("#machinecode").html(s);
                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });


        }
    });


    document.getElementById("resetcustom").addEventListener("click", function () {
        $('#start').val('');
        $('#end').val('');
        d3.select("#container svg").remove;
    })
    document.getElementById("resetyear").addEventListener("click", function () {
        $('#year').val('');
        d3.select(".year_report svg").remove();
    })
    document.getElementById("resetmonth").addEventListener("click", function () {
        $('#month').val('');
        d3.select(".monthly_week svg").remove();
        d3.select(".month_daily svg").remove();
        d3.select(".month_shift svg").remove();
    })


</script>

<script type="text/javascript">
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
    var cloloCode = "";
    function createChartLegend(mainDiv, group) {
        var z = d3.scaleOrdinal(d3.schemeCategory10);
        var mainDivName = mainDiv.substr(1, mainDiv.length);
        $(mainDiv).before("<div id='Legend_" + mainDivName + "' class='pmd-card-body' style='margin-top:0; margin-bottom:0;text-align:center;'></div>");
        var keys = group;
        keys.forEach(function (d) {

            if (d == "Low") {
                cloloCode = "#32CD32";
            }
            if (d == "Medium") {
                cloloCode = "#FFFF99";
            }
            if (d == "High") {
                cloloCode = "#CD5C5C";
            }


            $("#Legend_" + mainDivName).append("<span class='team-graph team1' style='display: inline-block; margin-right:10px;'>\
          			<span style='background:" + cloloCode +
                ";width: 10px;height: 10px;display: inline-block;vertical-align: middle;'>&nbsp;</span>\
          			<span style='padding-top: 0;font-family:Source Sans Pro, sans-serif;font-size: 13px;display: inline;'>" + d +
                " </span>\
          		</span>");
        });

    }

    document.getElementById("searchcustomwise").addEventListener("click", function () {
        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var start = $('#start').val();
        var end = $('#end').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear) {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();
            return;
        }

        if (linecode == '' || machinecode == '' || start == '' || end == '') {
            swal({
                icon: "error",
                title: "Please Provide Required Information...",
                button: false,
                timer: 4500
            })
        }
        else {
            if (start > end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }

            var myData = {
                "line": linecode,
                "machine": machinecode,
                "FromDate": start,
                "ToDate": end,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',

            };
            var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
            $.ajax({
                type: "POST",
                url: URL + 'api/Quality/GetRejection_Heatmap_CustomReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select(".custom svg").remove();
                    $('#custom_line').text(linecode);
                    $('#custom_subsystem').text(machinecode);
                    if (response.status != "Error") {
                        //added
                        var obj1 = response.data

                        const a = $('#heatmap_custom').height();
                        const b = $('#heatmap_custom').width();

                        var margin = { top: 30, right: 30, bottom: 30, left: 80 },
                            width = (b - margin.left - margin.right) ,
                            height = (a - margin.top - margin.bottom) / 2,
                            gridSize = Math.floor(width / 24);
                        d3.selectAll("#heatmap_custom > *").remove();
                        // append the svg object to the body of the page
                        var svg = d3.select("#heatmap_custom")
                            .append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform",
                                "translate(" + margin.left + "," + margin.top + ")");

                        // Labels of row and columns
                        var mygroups1 = d3.map(obj1.Table, function (d) { return d.Reject_Reason; }).keys()
                        var vars = d3.map(obj1.Table, function (d) { return d.Shift_id; }).keys()

                        var values = [];

                        for (var item in obj1.Table) {
                            values.push(obj1.Table[item].Frequency)
                        }


                        var min_heat = Math.min.apply(Math, values); // Min:0
                        var max_heat = Math.max.apply(Math, values); // Max:194

                        // Build X scales and axis:
                        var x = d3.scaleBand()
                            .range([0, width])
                            .domain(mygroups1)
                            .padding(0.01);
                            //x axis label text
                            //svg.append("g")
                            //.attr("transform", "translate(0," + height + ")")
                            //    .call(d3.axisBottom(x))

                        var xAxis = d3.axisBottom()
                            .scale(x);

                        // Build X scales and axis:
                        var y = d3.scaleBand()
                            .range([height, 0])
                            .domain(vars)
                            .padding(0.01);
                        svg.append("g")
                            .call(d3.axisLeft(y));

                        var colorrange = ['#32CD32', '#228B22', '#FFFF99', '#FFFF33', '#CD5C5C', '#FF0000'];
                        var myColor1 = d3.scaleQuantile()
                            .domain([max_heat, min_heat])
                            .range(colorrange);

                        // Build color scale
                        var myColor = d3.scaleLinear()
                            .range(["white", "#69b3a2"])
                            .domain([0, 100])

                        //Read the data
                        var tooltip = d3.select("#heatmap_custom")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "white")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")



                        //tooltip = d3.select("body").append("div").style("width", "80px").style("height", "40px").style("background", "#C3B3E5")
                        //    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("box-shadow", "0px 0px 6px #7861A5").style("padding", "10px");
                        //toolval = tooltip.append("div");

                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "50px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        svg.selectAll()
                            .data(obj1.Table, function (d) { return d.RejectionDescription + ':' + d.shift; })
                            .enter()
                            .append("rect")
                            .text(function (d) { return d.Frequency })
                            .attr("x", function (d) { return x(d.Reject_Reason) })
                            .attr("y", function (d) { return y(d.Shift_id) })
                            .attr("width", x.bandwidth())
                            .attr("height", y.bandwidth())
                            .style("fill", function (d) { return myColor1(d.Frequency) })

                            .on("mouseout", function () {
                                //d3.select(this).attr('fill', function(d) { return colorScale(window.bandClassifier(d.perChange,100));});
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })
                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                var text = 'Occurence: ' + d.Frequency + ' <br/> Reason: ' + d.Reject_Reason + '';

                                //console.log(d3.mouse(this)[0])
                                tooltip.select("div").html(text)

                            })

                        $("#Legend_heatmap_custom").html('');

                        var mainDiv = "#heatmap_custom";
                        var mainDivName = "heatmap_custom";
                        var group = ["Low","Medium","High"];

                        createChartLegend(mainDiv, group);


                        //for appending text

                        svg.selectAll()
                            .data(obj1.Table)
                            .enter().append("text")
                            .attr("class", "hourlabel")
                            .attr("x", function (d) { return x(d.Reject_Reason) + 15 })
                            .attr("y", function (d) { return y(d.Shift_id) + 45 })
                            .text(function (d) {
                                return d.Frequency;
                            })

                            //.on("mouseover", function (d) {
                            //    //console.log(d);
                            //    //d3.select(this).attr("fill","#655091");
                            //    d3.select(this).style("stroke", "orange").style("stroke-width", "3px")

                            //    d3.select(".LegText").select("text").text(d.Frequency)

                            //})




                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis)
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("transform", "rotate(-65)");

                        svg.append("text")
                            .attr("class", "x_label")
                            .attr("text-anchor", "end")
                            .attr("x", width / 2)
                            .attr("y", height + 150)
                            .text("Rejection Reason");


                        //y axis labels

                        svg.append("text")
                            .attr("class", "y label")
                            .attr("text-anchor", "end")
                            .attr("y", -50)
                            .attr("x", -50)
                            .attr("dy", ".75em")
                            .attr("transform", "rotate(-90)")
                            .text("Shift");


                        // document.getElementById('heat_head').style.display = 'block'


                    }
                    else {
                        $(".custom").empty();
                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".custom").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }
                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });
        }

    });

    document.getElementById("searchyearwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var year = $('#year').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '' || machinecode == '' || year == '') {
            swal({
                icon: "error",
                title: "Please Provide Required Information...",
                button: false,
                timer: 4500
            })
        }
        else {
            var myData = {
                "line": linecode,
                "Machine": machinecode,
                "Year": year,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };

            var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';


            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/Quality/GetRejection_HeatMap_YearwiseReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("svg").remove();
                    if (response.status != "Error") {
                        var obj1 = response.data

                        const a = $('.year_report').height();
                        const b = $('.year_report').width();
                        var margin = { top: 30, right: 30, bottom: 30, left: 80 },
                            width = (b - margin.left - margin.right),
                            height = (a - margin.top - margin.bottom) / 2,
                            gridSize = Math.floor(width / 24);

                        d3.selectAll(".year_report > *").remove();
                        // append the svg object to the body of the page
                        var svg = d3.select(".year_report")
                            .append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform",
                                "translate(" + margin.left + "," + margin.top + ")");

                        // Labels of row and columns
                        var mygroups1 = d3.map(obj1.Table, function (d) { return d.Reject_Reason; }).keys()
                        var vars = d3.map(obj1.Table, function (d) { return d.Shift_id; }).keys()

                        var values = [];

                        for (var item in obj1.Table) {
                            values.push(obj1.Table[item].Frequency)
                        }


                        var min_heat = Math.min.apply(Math, values); // Min:0
                        var max_heat = Math.max.apply(Math, values); // Max:194
                        // Build X scales and axis:
                        var x = d3.scaleBand()
                            .range([0, width])
                            .domain(mygroups1)

                            .padding(0.01);
                        //svg.append("g")
                        //    .attr("transform", "translate(0," + height + ")")
                        //    .call(d3.axisBottom(x))

                        var xAxis = d3.axisBottom()
                            .scale(x);

                        // Build X scales and axis:
                        var y = d3.scaleBand()
                            .range([height, 0])
                            .domain(vars)
                            .padding(0.01);
                        svg.append("g")
                            .call(d3.axisLeft(y));

                        var colorrange = ['#32CD32', '#228B22', '#FFFF99', '#FFFF33', '#CD5C5C', '#FF0000'];
                        var myColor1 = d3.scaleQuantile()
                            .domain([max_heat, min_heat])
                            .range(colorrange);

                        // Build color scale
                        var myColor = d3.scaleLinear()
                            .range(["white", "#69b3a2"])
                            .domain([0, 100])

                        //Read the data
                        var tooltip = d3.select(".year_report")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "white")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")



                        //tooltip = d3.select("body").append("div").style("width", "80px").style("height", "40px")
                        //    .style("background", "#C3B3E5")
                        //    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("box-shadow", "0px 0px 6px #7861A5").style("padding", "10px");
                        //toolval = tooltip.append("div");

                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "50px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        svg.selectAll()
                            .data(obj1.Table, function (d) { return d.reason + ':' + d.shift; })
                            .enter()
                            .append("rect")
                            .text(function (d) { return d.Frequency })
                            .attr("x", function (d) { return x(d.Reject_Reason) })
                            .attr("y", function (d) { return y(d.Shift_id) })

                            .attr("width", x.bandwidth())
                            .attr("height", y.bandwidth())
                            .style("fill", function (d) { return myColor1(d.Frequency) })

                            .on("mouseout", function () {
                                //d3.select(this).attr('fill', function(d) { return colorScale(window.bandClassifier(d.perChange,100));});
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })
                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                var text = 'Occurence: ' + d.Frequency + ' <br/> Reason: ' + d.Reject_Reason + '';

                                //console.log(d3.mouse(this)[0])
                                tooltip.select("div").html(text)

                            })

                        $("#Legend_year_report").html('');

                        //for appending text

                        var mainDiv = "#year_report";
                        var mainDivName = "year_report";
                        var group = ["Low", "Medium", "High"];

                        createChartLegend(mainDiv, group);

                        svg.selectAll()
                            .data(obj1.Table)
                            .enter().append("text")
                            .attr("class", "hourlabel")
                            .attr("x", function (d) { return x(d.Reject_Reason) + 15 })
                            .attr("y", function (d) { return y(d.Shift_id) + 45 })
                            .text(function (d) {
                                return d.Frequency;
                            })

                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis)
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("transform", "rotate(-65)");

                        svg.append("text")
                            .attr("class", "x_label")
                            .attr("text-anchor", "end")
                            .attr("x", width / 2)
                            .attr("y", height + 150)
                            .text("Rejection Reason");


                        //y axis labels

                        svg.append("text")
                            .attr("class", "y label")
                            .attr("text-anchor", "end")
                            .attr("y", -50)
                            .attr("x", -50)
                            .attr("dy", ".75em")
                            .attr("transform", "rotate(-90)")
                            .text("Shift");

                    }

                    else {
                        sample = "";

                        $(".year_report").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".year_report").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }
                },
                error: function (result) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });

        }

    });

    document.getElementById("searchmonthwise").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var machinecode = $('#machinecode').val();
        var month = $('#month').val();
        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        if (linecode == '' || machinecode == '' || year == '' ) {
                swal({
                icon: "error",
                title: "Please Provide Required Information...",
                button: false,
                timer: 4500
            })
        }
        else {
            var chartData = [];
            var myData = {
                    "line": linecode,
                    "Machine": machinecode,
                    "Year": month,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
                };
            var myData_daily = {
                    "line": linecode,
                    "Machine": machinecode,
                    "Month": month,
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]'
            };
             var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            $.ajax({
                type: "POST",
                dataType: "json",
                url: URL + 'api/Quality/GetRejection_Heatmap_MonthwiseReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select("#monthly_chart svg").remove();
                    if (response.status != "Error") {

                        var obj1 = response.data

                        const a = $('#monthly_chart').height();
                        const b = $('#monthly_chart').width();

                        var margin = { top: 30, right: 30, bottom: 30, left: 100 },
                            width = (b - margin.left - margin.right),
                            height = (a - margin.top - margin.bottom) / 2,
                            gridSize = Math.floor(width / 24);
                        d3.selectAll("#monthly_chart > *").remove();
                        // append the svg object to the body of the page
                        var svg = d3.select("#monthly_chart")
                            .append("svg")
                            .attr("width", width + margin.left + margin.right)
                            .attr("height", height + margin.top + margin.bottom)
                            .append("g")
                            .attr("transform",
                                "translate(" + margin.left + "," + margin.top + ")");

                        // Labels of row and columns
                        var mygroups1 = d3.map(obj1.Table, function (d) { return d.Reject_Reason; }).keys()
                        var vars = d3.map(obj1.Table, function (d) { return d.Shift_id; }).keys()

                        var values = [];

                        for (var item in obj1.Table) {
                            values.push(obj1.Table[item].Frequency)
                        }


                        var min_heat = Math.min.apply(Math, values); // Min:0
                        var max_heat = Math.max.apply(Math, values); // Max:194
                        // Build X scales and axis:
                        var x = d3.scaleBand()
                            .range([0, width])
                            .domain(mygroups1)

                            .padding(0.01);
                        //svg.append("g")
                        //    .attr("transform", "translate(0," + height + ")")
                        //    .call(d3.axisBottom(x))

                        var xAxis = d3.axisBottom()
                            .scale(x);

                        // Build X scales and axis:
                        var y = d3.scaleBand()
                            .range([height, 0])
                            .domain(vars)
                            .padding(0.01);
                        svg.append("g")
                            .call(d3.axisLeft(y));

                        var colorrange = ['#32CD32', '#228B22', '#FFFF99', '#FFFF33', '#CD5C5C', '#FF0000'];
                        var myColor1 = d3.scaleQuantile()
                            .domain([max_heat, min_heat])
                            .range(colorrange);

                        // Build color scale
                        var myColor = d3.scaleLinear()
                            .range(["white", "#69b3a2"])
                            .domain([0, 100])

                        //Read the data
                        var tooltip = d3.select("#monthly_chart")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "white")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")



                        //tooltip = d3.select("body").append("div").style("width", "80px").style("height", "40px").style("background", "#C3B3E5")
                        //    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("box-shadow", "0px 0px 6px #7861A5").style("padding", "10px");
                        //toolval = tooltip.append("div");

                        tooltip = d3.select("body").append("div").style("width", "200px").style("height", "50px").style("background-color", "#898584").style("color", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                        toolval = tooltip.append("div");

                        svg.selectAll()
                            .data(obj1.Table, function (d) { return d.reason + ':' + d.shift; })
                            .enter()
                            .append("rect")
                            .text(function () {
                                return "1";
                            })
                            //.text(function (d) { return d.Frequency })
                            .attr("x", function (d) { return x(d.Reject_Reason) })
                            .attr("y", function (d) { return y(d.Shift_id) })

                            .attr("width", x.bandwidth())
                            .attr("height", y.bandwidth())
                            .style("fill", function (d) { return myColor1(d.Frequency) })


                            .on("mouseout", function () {
                                //d3.select(this).attr('fill', function(d) { return colorScale(window.bandClassifier(d.perChange,100));});
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })
                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                var text = 'Occurence: ' + d.Frequency + ' <br/> Reason: ' + d.Reject_Reason + '';

                                //console.log(d3.mouse(this)[0])
                                tooltip.select("div").html(text)

                            })

                        $("#Legend_monthly_chart").html('');

                        var mainDiv = "#monthly_chart";
                        var mainDivName = "monthly_chart";
                        var group = ["Low", "Medium", "High"];

                        createChartLegend(mainDiv, group);

                        //for appending text

                        svg.selectAll()
                            .data(obj1.Table)
                            .enter().append("text")
                            .attr("class", "hourlabel")
                            .attr("x", function (d) { return x(d.Reject_Reason) + 15 })
                            .attr("y", function (d) { return y(d.Shift_id) + 45 })
                            .text(function (d) {
                                return d.Frequency;
                            })



                        svg.append("g")
                            .attr("class", "x axis")
                            .attr("transform", "translate(0," + height + ")")
                            .call(xAxis)
                            .selectAll("text")
                            .style("text-anchor", "end")
                            .attr("transform", "rotate(-65)");



                        svg.append("text")
                            .attr("class", "x_label")
                            .attr("text-anchor", "end")
                            .attr("x", width / 2)
                            .attr("y", height + 150)
                            .text("Rejection Reason");


                        //y axis labels

                        svg.append("text")
                            .attr("class", "y label")
                            .attr("text-anchor", "end")
                            .attr("y", -50)
                            .attr("x", -50)
                            .attr("dy", ".75em")
                            .attr("transform", "rotate(-90)")
                            .text("Shift");

                    }
                    else {
                        sample = "";

                        $("#Legend_charts").html('');
                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select("#monthly_chart").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                    //Daily Details

                },
                error: function (result) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });
        }
    })
</script>

<script type="text/javascript">
    var modal = document.getElementById("myModal");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        modal.style.display = "none";
    }
</script>
<style>
    line {
        shape-rendering: crispEdges;
        /*stroke:#aeaeae;
    stroke-width:1;*/
    }

    /*.bar rect {
          fill: steelblue;
          shape-rendering: crispEdges;
      }*/

    .axis path, .axis line {
        fill: none;
        stroke: #000;
        shape-rendering: crispEdges;
    }

    .line {
        fill: none;
        stroke: purple;
        stroke-width: 1.5px;
    }

    .grid .tick {
        stroke: lightgrey;
        opacity: 0.7;
    }

    .grid path {
        stroke-width: 0;
    }

    .x_label {
        border: solid;
        background-color: cornflowerblue;
    }
</style>
