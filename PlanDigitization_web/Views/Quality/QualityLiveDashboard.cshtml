
@{
    ViewBag.Title = "QualityLiveDashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";

}


@*<script src="/Scripts/dataTables.bootstrap.js"></script>*@
<html>
<body>
    <div class="row">
        @*<button type="button" style="float:right;margin-left:2%" class="btn btn-default">OEE Historic<span class="shift"></span></button>*@
        <input type="button" class="btn btn-primary" onclick="location.href='/Quality/QualityHistoricDashboard';" value="Historic-Pareto" style="float:right;text-decoration:none;margin-right:2%;border-style:none;" />
        <input type="button" class="btn btn-primary" onclick="location.href='/Quality/QualityHistoric_Heatmap';" value="Historic-Heat Map" style="float:right;text-decoration:none;margin-right:2%;border-style:none;" />

    </div>
    
    <div class="loading1" align="center">

        <img src="~/assets1/images/loading.gif" alt="" style="width:150px;padding-top:300px;" />
    </div>
    @*<div class="loading1" id='nodata' align="center">

        <h2>NO Data Available</h2>00000
    </div>*@
<div class="page-container">
    <header class="page-header">
        <h2> Production Dashboard </h2>
        <div class="right-wrapper pull-right">
            <ol class="breadcrumbs">
                <li>
                    <a href="@Url.Action("NewDash","Main")">
                        <i class="fa fa-home"></i>
                    </a>
                </li>


            </ol>
        </div>
    </header>
    @*<div style="padding-left:60%">
            <button style="" type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Live Time : 2020-08-24 10:00:00 <span id="live_time"></span></button>
            <img src="~/assets/images/refresh.png" height="50" width="100" alt="Reload" style="" id="imgid" onclick="window.location.reload();" />

        </div>*@


    <!--<header class="panel-heading" style="padding-top:5px;padding-bottom:0px">

        <p style="font-size:1.5em;">
            <button style="" type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default"><span id="live_time" class="blinking"></span></button>-->
            @*<span class="glyphicon glyphicon-chevron-left" id="prev_button" style="padding-right:5%" title="Previous"></span>*@
            @*<span id="prev_button" style="padding-right:5%">
                    <img src="~/assets/images/prev.png" height="50" width="50" alt="Prev" id="prev" />
                </span>*@
            @*<span id="line_heading" style="padding-left:15%; width:45%;font-size:1em;display:inline-block;align-content:center"></span>*@
            @*<span id="next_button" style="padding-right:5%">
                    <img src="~/assets/images/next.png" height="50" width="50" alt="Next" id="next" />
                </span>*@
            @*<span class="glyphicon glyphicon-chevron-right" id="next_button" style="padding-right:5%" title="Next"></span>*@
            @*<button style="" type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Refresh</button>*@
            @*<img src="~/assets/images/refresh.png" height="50" width="100" alt="Reload" style="" id="imgid" onclick="window.location.reload();" />*@
            @*<span class="glyphicon glyphicon-refresh" id="imgid" onclick="window.location.reload();"></span>*@
            @*<span class="glyphicon glyphicon-refresh" id="imgid" onclick="getdataonclick();"></span>*@
        <!--</p>

    </header>-->

    <!--<header class="panel-heading" style="padding-right:15px;padding-top:3px;padding-bottom:5px">
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Line :  <span id="line"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Shift : <span id="shift"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Department/Plant :  <span id="plant"></span></button>
        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">First Pass yield : <span id="firstpass"></span></button>-->
    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Last Data Update: <span class="updated_time"></span></button>*@
    <!--<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Next Data Update:  <span id="next_update"></span></button>-->
    @*<span data-html="true" data-placement="right" data-toggle="tooltip" title="<i class='glyphicon glyphicon-user'> Operator <br> <i class='glyphicon glyphicon-time'> CycleTime<br> A-  Availability <br> P-  Performance <br>Q-  Quality <br> R-  Rejection" class="glyphicon glyphicon-info-sign gi-5x" style="font-size:1.5em;"></span>*@

    @*<div id="tooltip1">
                <span class="glyphicon glyphicon-info-sign gi-8x">

                </span>
                <table class="tooltiptext">
                    <thead>

                    </thead>
                    <tbody>
                        <tr>
                            <td><span class='glyphicon glyphicon-user'></span></td>
                            <td>Operator</td>
                        </tr>
                        <tr>
                            <td><span class='glyphicon glyphicon-time'></span></td>
                            <td>CycleTime</td>
                        </tr>

                        <tr>
                            <td>U</td>
                            <td>UpTime</td>
                        </tr>
                        <tr>
                            <td>D</td>
                            <td>DownTime</td>
                        </tr>
                        <tr>
                            <td>L</td>
                            <td>LossTime</td>
                        </tr>
                        <tr>
                            <td>
                                B
                            </td>
                            <td>BreakTime</td>
                        </tr>
                        <tr>
                            <td>Q%</td>
                            <td>Quality %</td>
                        </tr>
                        <tr>
                            <td>Rej%</td>
                            <td>Rejection %</td>
                        </tr>
                        <tr>
                            <td>
                                R%
                            </td>
                            <td>Rework %</td>
                        </tr>
                        <tr>
                            <td>A</td>
                            <td>Availablity</td>
                        </tr>
                        <tr>
                            <td>P</td>
                            <td>Performance</td>
                        </tr>
                        <tr>
                            <td>Q</td>
                            <td>Quality</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </header>*@
    @*<br />*@


    <header class="panel-heading" style="padding-top:5px;padding-bottom:0px">
        <div style="display:flex">
            <div>
                <p style="font-size:1.5em;">
                    <button style="" type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default"><span id="live_time" class="blinking"></span></button>

                </p>
            </div>
            <div style="margin-left:20px">
                <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Next Data Update:  <span id="next_update"></span></button>
                @*<span data-html="true" data-placement="right" data-toggle="tooltip" title="<i class='glyphicon glyphicon-user'> Operator <br> <i class='glyphicon glyphicon-time'> CycleTime<br> A-  Availability <br> P-  Performance <br>Q-  Quality <br> R-  Rejection" class="glyphicon glyphicon-info-sign gi-5x" style="font-size:1.5em;"></span>*@

                <div id="tooltip1">
                    <span class="glyphicon glyphicon-info-sign gi-8x">

                    </span>
                    <table class="tooltiptext">
                        <thead>

                        </thead>
                        <tbody>
                            @*<tr>
                                <td><span class='glyphicon glyphicon-user'></span></td>
                                <td>Operator</td>
                            </tr>
                            <tr>
                                <td><span class='glyphicon glyphicon-time'></span></td>
                                <td>CycleTime</td>
                            </tr>*@

                            <tr>
                                <td>U</td>
                                <td>UpTime</td>
                            </tr>
                            <tr>
                                <td>D</td>
                                <td>DownTime</td>
                            </tr>
                            <tr>
                                <td>L</td>
                                <td>LossTime</td>
                            </tr>
                            <tr>
                                <td>
                                    B
                                </td>
                                <td>BreakTime</td>
                            </tr>
                            <tr>
                                <td>Q%</td>
                                <td>Quality %</td>
                            </tr>
                            <tr>
                                <td>Rej%</td>
                                <td>Rejection %</td>
                            </tr>
                            <tr>
                                <td>
                                    R%
                                </td>
                                <td>Rework %</td>
                            </tr>
                            <tr>
                                <td>A</td>
                                <td>Availablity</td>
                            </tr>
                            <tr>
                                <td>P</td>
                                <td>Performance</td>
                            </tr>
                            <tr>
                                <td>Q</td>
                                <td>Quality</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </header>



    <div class="col-md-12" style="padding-top:5px;">
        @*<div id="pagination">


            </div>*@
        <div class="table-responsive" style="overflow-x:hidden;min-height: 200px">
            <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-live">
                <thead style="background-color:teal;color:white;">
                    <tr>

                        <th style="text-align:center;width:auto;">Batch_code</th>
                        <th style="text-align:center;width:auto;">M/c and Variant</th>
                        @*<th style="text-align:center;width:auto;">
            <span class="glyphicon glyphicon-user"></span>
        </th>*@
                        @*<th style="text-align:center;width:auto;">Status</th>*@

                        <th style="text-align: center; width:120px;">
                            <div style="display:flex">
                                <div style="margin-left:20px">
                                    Status
                                </div>
                                <div id="tooltip3" style="margin-left:10px">
                                    <span class="glyphicon glyphicon-info-sign gi-8x"></span>
                                    <ul class="tooltiptext" style="text-align: left; list-style: none; ">
                                        <li>
                                            <input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:green;margin-left:20px;" />
                                            <span style="text-align:right;margin-left:10px;font-size:11px;"> M/c Running </span>
                                        </li>
                                        <li>
                                            <input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:yellow;margin-left:20px;" />
                                            <span style="text-align: right; margin-left: 10px; font-size: 11px;">  M/c is Idle/Loss </span>
                                        </li>

                                        <li>
                                            <input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 9px; width: 8px; background-color: red; margin-left:20px;" />
                                            <span style="text-align: right; margin-left: 10px; font-size: 11px; "> M/c under Error </span>
                                        </li>
                                        <li>
                                            <input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:gray;margin-left:20px;" />
                                            <span style="text-align:right;margin-left:10px;font-size:11px;">Planned Break </span>
                                        </li>
                                        <li>
                                            <input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:blue;margin-left:20px;" />
                                            <span style="text-align:right;margin-left:10px;font-size:11px;">PLC disconnect with Gateway </span>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </th>



                        @*<th style="text-align:center;width:auto;">Variant</th>*@
                        <th style="text-align:center;width:auto;">CycleTime</th>
                        <th style="text-align:center;width:auto;">Parts</th>
                        <th style="text-align:center;width:inherit;">Utilization<br />(mins)</th>
                        @*<th style="text-align:center;width:auto;">Good<br />Parts</th>
        <th style="text-align:center;width:auto;">Rejected<br />Parts</th>*@
                        @*<th style="text-align:center;width:auto;">D/T<br />(secs)</th>
        <th style="text-align:center;width:auto;">L/T<br />(secs)</th>*@
                        <th style="text-align:center;width:auto;">Q(%)</th>
                        @*<th style="text-align:center;width:inherit;">OEE(%) </th>*@
                        @*<th style="text-align:center;width:auto;">A(%)</th>
        <th style="text-align:center;width:auto;">P(%)</th>
        <th style="text-align:center;width:auto;">Q(%)</th>*@

                        <th style="text-align:center;width:180px;">
                            OEE(%)
                            <div id="tooltip2">
                                <span class="glyphicon glyphicon-info-sign gi-8x"></span>
                                <ul class="tooltiptext" style="text-align: left; list-style: none; margin-left:-100px">
                                    <li>
                                        <input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:green;margin-left:20px;" />
                                        <span style="text-align:right;margin-left:10px;font-size:11px;"> >75 </span>
                                    </li>
                                    <li>
                                        <input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:yellow;margin-left:20px;" />
                                        <span style="text-align: right; margin-left: 10px; font-size: 11px;">  >25&& < 76 </span>
                                    </li>

                                    <li>
                                        <input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 9px; width: 8px; background-color: red; margin-left:20px;" />
                                        <span style="text-align: right; margin-left: 10px; font-size: 11px; "> < 26 </span>
                                    </li>
                                </ul>
                            </div>

                        </th>


                    </tr>
                </thead>
                <tbody id="details1" style="width:100%;"></tbody>


            </table>
        </div>
        <div class="table-responsive" id="variant_list" style="position:absolute;width:50%">
            <table class=" table table-bordered table-striped table-condensed mb-none">
                <thead>
                    <tr>
                        <th>S.no</th>
                        <th>Date</th>
                        <th>Variant List</th>
                        <th>Machine No.</th>
                        <th>Produced Quantity</th>



                    </tr>
                </thead>
                <tbody id="details4" style="width:100%;"></tbody>


            </table>
        </div>
    </div>
    <div class="col-md-12" style="margin-top:1%;">
        <div style="display:flex" class='col-sm-12 col-md-12 col-lg-12'>
            <div>
                <h4 style="border:solid;border-color:cadetblue;background-color:cadetblue;">
                    Station wise status bars
                </h4>
            </div>

            <div>
                <div class='col-sm-1 col-md-1 col-lg-1' style="text-align:center;padding-top:2%;margin-top:10px">
                    @*<header style='border-style:solid;border-width:thin;border-color:black;text-align:center;background-color:teal;color:white;'>*@

                    <div id="tooltip1">
                        <span class="glyphicon glyphicon-info-sign gi-8x" style="color:black">
                        </span>
                        <table class="tooltiptext">
                            <thead>
                            </thead>
                            <tbody>

                                @*<tr>
                                    <td><input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:12px;width:10px;background-color:green;margin-left:-60px" /></td>
                                    <td style="float:left;margin-left:-60px;font-size:11px;">Machine Stopped</td>
                                </tr>
                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 12px; width: 10px; background-color: yellow; margin-left: -60px" /></td>
                                    <td style="float: left; margin-left: -60px; font-size: 11px;">Machine Running</td>
                                </tr>
                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 12px; width: 10px; background-color: red; margin-left: -60px" /></td>
                                    <td style="float: left; margin-left: -60px; font-size: 11px;">M/C Running</td>
                                </tr>
                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 12px; width: 10px; background-color: blue; margin-left: -60px" /></td>
                                    <td style="float: left; margin-left: -60px; font-size: 11px;">M/C Disconnected/Poweroff</td>
                                </tr>*@

                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 9px; width: 8px; background-color: red; margin-left:-50px" /></td>
                                    <td style="float:left;margin-left:-70px">M/c under Error</td>
                                </tr>
                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 9px; width: 8px; background-color: green; margin-left:-50px" /></td>
                                    <td style="float: left; margin-left:-70px">M/c Running</td>
                                </tr>
                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 9px; width: 8px; background-color: yellow; margin-left:-50px" /></td>
                                    <td style="float: left; margin-left:-70px">M/c is Idle/Loss</td>
                                </tr>
                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 9px; width: 8px; background-color: grey; margin-left: -50px" /></td>
                                    <td style="float: left; margin-left: -70px">Planned Break</td>
                                </tr>
                                <tr>
                                    <td><input type="button" class="small" style="border-style: solid; border-width: thin; border-color: black; height: 9px; width: 8px; background-color: blue; margin-left: -50px" /></td>
                                    <td style="float: left; margin-left: -70px">PLC disconnect with Gateway</td>
                                </tr>

                            </tbody>
                        </table>
                    </div>

                </div>
            </div>

        </div>
        <ul class="nav nav-tabs" id="ulelement" style="margin-left:30px">
        </ul>
        <div id="ulcontent"></div>
        <div id="status_bar" style="width:100%">

        </div>

    </div>
    <!-- <div class="col-md-12" style="border:solid;">
        <div class="col-md-4" style="padding-top:2%">

            <div class="" id="progress_chart1" @*style="padding-left:10px;"*@></div>
            <p style="padding-left:60%">OEE</p>
            <div id="progress_avail"></div>
            <p style="padding-left:60%">Availablility</p>
            <div id="progress_perf"></div>
            <p style="padding-left:60%">Performance</p>
            <div id="progress_quality"></div>
            <p style="padding-left:60%">Quality</p>


        </div>
        <div class="col-md-2">
            <div>
                <div id="planned" style="margin-left:2%;">

                </div>
                <div style="border:solid;background-color:teal;border-color:teal;"><h4 style="color:white;">Actual/Planned</h4></div>

            </div>
        </div>
        <div class="col-md-2">
            <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Planned Quantity:  <span id="planned_quantity"></span></button>
            <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Actual Quantity:  <span id="actual_quantity"></span></button>


        </div>

        <div class="col-md-3" style="padding-top:1%;padding-bottom:2%;  width:30%;border:solid;margin-top:1%">
            <div>
                <div class="" style="float:left;margin-right:2%">
                    <span class="red_circle" style="margin:0px;border:0px;float:left;"></span>
                    <p style="display:inline-block">M/c stopped</p>
                </div>
                <div style="margin:1%">
                    <span class="green_circle" style="margin:0px;border:0px;"></span>
                    <p style="display:inline-block">M/c Running</p>
                </div>
            </div>
            <div>
                <div style="position:relative">
                    <span class="yellow_circle" style="margin:0px;border:0px;"></span>
                    <p style="display:inline-block">M/c Running with error</p>
                </div>
                <div>
                    <span class="blue_circle" style="margin:0px;border:0px;"></span>
                    <p style="display:inline-block">M/c stopped for more than 30 mns</p>
                </div>
                <div>
                    <span class="grey_circle" style="margin:0px;border:0px;"></span>
                    <p style="display:inline-block">Break</p>
                </div>
            </div>
            <div>
                <a onclick="exportF(this)" id="excelid"> <img src="~/assets1/images/excel.png" height="50" width="100" alt="Export" style="" title="Click to export data to excel" /></a>

                @*<p>Click to export to excel</p>*@
                @*<button onclick="exportF(this)" id="excelid" class="btn"><i class="fa fa-download"></i> Download</button>*@
            </div>

        </div>
    </div>
    <div>

    </div>-->
    <div id="myModal" class="modal">

        <!-- Modal content -->
        <div class="modal-content">
            <div class="modal-header">
                <span class="close">&times;</span>
                <h2>Error List</h2>
            </div>
            <div class="modal-body" id="machine_status">
                <div id="errorlist_data" style="display:none">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Last Data Update:  <span id="lt_update"></span></button>

                    <button class="btn btn-primary" onclick="showorhide()" id="show"> Show Top 10 Reason</button>
                    <button class="btn btn-primary" onclick="showorhide1()" id="show"> Show Hour Details</button>

                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-errormaster">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>Error</th>
                                <th>Count</th>

                            </tr>
                        </thead>
                        <tbody id="details3" style="width:100%;"></tbody>


                    </table>
                    <div id="showorhide" style="display:none">
                        <h2>Top 10 Reasons</h2>
                        <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-errorlist">
                            <thead style="background-color:cadetblue;">
                                <tr>
                                    <th>Error Time</th>
                                    <th>Error</th>

                                    <th>Error Duration(Secs.)</th>


                                </tr>
                            </thead>
                            <tbody id="details2" style="width:100%;"></tbody>


                        </table>
                    </div>
                    <div id="showorhide1" style="display:none">
                        <h2>Previous Hour  Details</h2>
                        <div id="previous_data" style="display:none">
                            <div class="modal-body" id="previous_content">
                                <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Machine: <span id="ok_mcno"></span></button>
                                <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line: <span id="ok_Line"></span></button>
                                <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-okparts">
                                    <thead style="background-color:cadetblue;color:white;">
                                        <tr>
                                            <th>Date</th>
                                            <th>Variant Code</th>
                                            <th>Hour</th>
                                            <th>OK Parts</th>
                                            <th>NOK Parts</th>
                                            <th>Rework Parts</th>
                                        </tr>
                                    </thead>
                                    <tbody id="previous_details" style="width:100%;"></tbody>


                                </table>
                            </div>
                        </div>
                        <div id="previous_nodata" style="display: none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No  Data</p></div>
                    </div>

                </div>
                <div id="errorlist_nodata" style="display:none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No Error Data</p></div>
            </div>
        </div>
    </div>
    <div id="mymodal_previoussummary" class="modal" style="padding-top:10%">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="previousclose">&times;</span>
                <h2>Previous Hour Details</h2>
            </div>
            <div id="previous_data" style="display:none">
                <div class="modal-body" id="previous_content">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Machine: <span id="ok_mcno"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Line: <span id="ok_Line"></span></button>
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-okparts">
                        <thead style="background-color:cadetblue;color:white;">
                            <tr>
                                <th>Date</th>
                                <th>Variant Code</th>
                                <th>Hour</th>
                                <th>OK Parts</th>
                                <th>NOK Parts</th>
                                <th>Rework Parts</th>
                            </tr>
                        </thead>
                        <tbody id="previous_details" style="width:100%;"></tbody>


                    </table>
                </div>
            </div>
            <div id="previous_nodata" style="display: none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No  Data</p></div>
        </div>

    </div>

    <div id="mymodal_cthistogram" class="modal" style="min-width:100%">
        <div class="modal-content" style="min-width: 100%">
            <div class="modal-header">
                <span class="close" id="ctclose">&times;</span>
                <h2>Cycle Time Distribution</h2>
            </div>
            <div id="cycletime_data" style="display:none;min-width:100%">
                <div class="modal-body" id="ctgraph_content" style="min-width:100%">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Set Cycle Time:  <span id="setct"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Set Manual Cycle Time:  <span id="manual_setct"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="background-color:coral;color:black;">Set Auto Cycle Time:  <span id="auto_setct"></span></button>
                    <div id='container' class="ct_graph" style="min-width: 100%">

                    </div>

                </div>
            </div>
            <div id="cycletime_nodata" style="display:none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No  Data</p></div>
        </div>

    </div>
    <div id="mymodal_okparts" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="okpartsclose1">&times;</span>
                <h2>OK Parts Count</h2>
            </div>
            <div id="okparts_data" style="display:none">
                <div class="modal-body" id="okparts_content">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Machine No: <span id="ok_mcno"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="ok_variant"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Shift: <span id="ok_shift"></span></button>
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-okparts1">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Timestamp</th>
                                <th> Batch Count</th>
                                <th>Produced Quantity</th>
                                <th>Cumulative Quantity</th>

                            </tr>
                        </thead>
                        <tbody id="okparts_details" style="width:100%;"></tbody>


                    </table>
                </div>
            </div>
            <div id="okparts_nodata" style="        display: none;
        padding-left: 40%"><p style="color:red;font-size:1.5vw">No  Data</p></div>
        </div>

    </div>
    <div id="mymodal_nokparts" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="nokpartsclose">&times;</span>
                <h2>Scrap Parts Count</h2>
            </div>
            <div id="scrap_data" style="display:none">
                <div class="modal-body" id="okparts_content">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Machine No: <span id="nok_mcno"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="nok_variant"></span></button>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Shift: <span id="nok_shift"></span></button>
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-nokparts">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Timestamp</th>
                                <th>Batch Count</th>
                                <th>Scrapped Quantity</th>
                                <th>Cumulative Quantity</th>

                            </tr>
                        </thead>
                        <tbody id="nokparts_details" style="width:100%;"></tbody>


                    </table>
                </div>
            </div>
            <div id="scrap_nodata" style="display:none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No  Data</p></div>
        </div>

    </div>
    <div id="mymodal_downtime" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="downtimeclose">&times;</span>
                <h2>Downtime Details</h2>
            </div>
            <div class="modal-body" id="downtime_content">
                <div id="downtime_data" style="display:none">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Current Time: <span id="downtime_current"></span></button>
                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="nok_variant"></span></button>
                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No of cavity/Pallets <span id="nok_pallets"></span></button>*@
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-downtime">
                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Downtime Reason</th>
                                <th>Error Start</th>
                                <th>Error End</th>
                                <th>Error Ack. By</th>
                                <th>Error Corrected By</th>
                                <th>Duration in secs</th>

                            </tr>
                        </thead>
                        <tbody id="downtime_details" style="width:100%;"></tbody>


                    </table>

                    <div id='container' class="downtime_graph">

                    </div>
                </div>
                <div id="downtime_nodata" style="display:none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No  Data</p></div>
            </div>
        </div>

    </div>
    <div id="mymodal_losstime" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="losstimeclose">&times;</span>
                <h2>Loss Time Details</h2>
            </div>
            <div class="modal-body" id="losstime_content">
                <div id="losstime_data" style="display:none">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Current Time: <span id="ct_losstime"></span></button>
                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="nok_variant"></span></button>
                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No of cavity/Pallets <span id="nok_pallets"></span></button>*@
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-losstime">

                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Downtime Reason</th>
                                <th>Error Start</th>
                                <th>Error Ack. By</th>
                                <th>Error Corrected</th>
                                <th>Error Corrected By</th>
                                <th>Duration in secs</th>

                            </tr>
                        </thead>
                        <tbody id="losstime_details" style="width:100%;"></tbody>

                    </table>
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Total Loss Time: <span id="totallosstime"></span></button>

                    <div id='losstime_pie' class="losstime_graph" style="padding-left:30%;padding-top:50px">

                    </div>
                </div>
                <div id="losstime_nodata" style="display:none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No Loss Data</p></div>
            </div>
        </div>

    </div>
    <div id="mymodal_rejection" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <span class="close" id="rejectionclose">&times;</span>
                <h2>Rejection Details</h2>
            </div>
            <div class="modal-body" id="rejection_content">
                <div id="rejection_data" style="display:none">
                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Current Time: <span id="ct_rejtime"></span></button>
                    @*<button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">Variant: <span id="nok_variant"></span></button>
                        <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default">No of cavity/Pallets <span id="nok_pallets"></span></button>*@
                    <table class="table table-bordered table-striped table-condensed mb-none" id="datatable-rejection">

                        <thead style="background-color:cadetblue;">
                            <tr>
                                <th>S.NO</th>
                                <th>Timestamp</th>
                                <th>Rejection reason</th>

                            </tr>
                        </thead>
                        <tbody id="rejection_details" style="width:100%;"></tbody>

                    </table>



                </div>
            </div>
            <div id="rejection_nodata" style="display:none;padding-left:40%"> <p style="color:red;font-size:1.5vw">No Loss Data</p></div>
        </div>
    </div>

</div>
    @*</div>*@
</body>
</html>

<script src="~/assets1/javascripts/swal.js"></script>


<script src="~/assets1/javascripts/swal_alert.js"></script>

@*<link rel="stylesheet" href="~/assets1/vendor/jquery-datatables-bs3/assets/css/datatables.css" />

<script src="~/assets1/javascripts/jquery.dataTables.min.js"></script>


<script src="~/assets1/vendor/jquery-datatables/media/js/jquery.dataTables.js"></script>
<script src="~/assets1/vendor/jquery-datatables/extras/TableTools/js/dataTables.tableTools.min.js"></script>*@


@*<script src="~/assets1/vendor/jquery-datatables-bs3/assets/js/datatables.js"></script>*@


<style>
    #imgid:hover {
        cursor: pointer;
    }

    #excelid:hover {
        cursor: pointer;
    }

    #prev:hover {
        cursor: pointer;
    }

    #next:hover {
        cursor: pointer;
    }

    path.slice {
        stroke-width: 2px;
    }

    .bullet {
        font: 10px sans-serif;
    }

        .bullet .marker {
            stroke: #000;
            stroke-width: 2px;
        }

        .bullet .tick line {
            stroke: #666;
            stroke-width: .5px;
        }

        .bullet .range.s0 {
            fill: #eee;
        }

        .bullet .range.s1 {
            fill: #ddd;
        }

        .bullet .range.s2 {
            fill: #ccc;
        }

        .bullet .measure.s0 {
            fill: steelblue;
        }

        .bullet .title {
            font-size: 14px;
            font-weight: bold;
        }

        .bullet .subtitle {
            fill: #999;
        }

    .modal {
        overflow-y: auto;
       
      
    }
    .modal-body {
        max-height: calc(120vh - 200px);
        overflow-y: auto;
    }
    .toolTip {
        position: absolute;
        display: none;
        min-width: 80px;
        height: auto;
        background: none repeat scroll 0 0 #ffffff;
        border: 1px solid #6F257F;
        padding: 14px;
        text-align: center;
    }
    
</style>
<script>
    var line_name=''
    var timer_upd = 30;
    function changeprev() {

    }
    var list = [];
    var list_code = [];
    var j = 0;
    $('body').css({
        overflow: 'visible'
    });
    var widthd = 140
    heightd = 140
    margind = 2
    var radiusd = Math.min(widthd, heightd) / 2 - margind
    var arcd = d3.arc()
        .innerRadius(radiusd * 0.5)         // This is the size of the donut hole
        .outerRadius(radiusd * 0.8)

    // Another arc that won't be drawn. Just for labels positioning
    var outerArcd = d3.arc()
        .innerRadius(radiusd * 0.9)
        .outerRadius(radiusd * 0.9)

    $(document).ready(function () {
        $('[data-toggle="tooltip"]').tooltip({
            html:'true'
        });
        window.plant_table=''
        window.shift = ''
        window.variant=''
        window.count_loading = 0;
        timer_upd = 30;
        //var vars = [], hash;
        //var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        //for (var i = 0; i < hashes.length; i++) {
        //    hash = hashes[i].split('?');
        //    vars.push(hash[0]);
        //    vars[hash[0]] = hash[1];
        //}
        line_name = '@Session["LineCode"]';
       
        createbarformachine();
        $('#next_update').text(timer_upd + 's')
        update_timer()
        getqualitylive_table()
        var s = '<option value="">Select Shift</option>';
        for (var i = 1; i <= 3; i++) {
            s += '<option value="' + i + '">' + 'Shift'+i + '</option>';
        }
        $("#shift_select").html(s);

        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';


        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var myData = {
            "Flag": "LineCode",
            "CompanyCode": '@Session["CompanyCode"]',
            "PlantCode": '@Session["PlantCode"]',
            
        };
        //$.ajax({
        //    type: 'Get',
        //    url: URL + 'api/UserSettings/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
         $.ajax({
            type: "POST",
             url: URL + 'api/Values/GetSettingdatas',
             headers: {
                Authorization: 'Bearer ' + user1
            },
            data: myData,
            dataType: "json",
             success: function (response) {


                 for (i = 0; i < response.data.length; i++) {
                     list.push(response.data[i].Name);
                     list_code.push(response.data[i].Code);
                 }
                 //list.push("Line2");
                 //list.push("Line3");
                 //list_code.push('Line2')
                 //list_code.push('Line3')
                 var newline = '';
                 for (j = 0; j < list.length; j++) {
                    
                     if (list_code[j] == line_name) {
                         console.log(list_code[j])
                         newline = list[j];
                     }
                     console.log('newline is ' + newline)
                 }
                 document.getElementById('line_heading').textContent = newline;

            },
         //   error: function (response) {
         //       swal({
         //       icon: "warning",
         //       title: "Session Timeout",
         //       button: true,
         //       closeModal: false
         //   })
         //   window.location = R_url;
         //   }
         //});
        }).error(function (response) {

            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            //else {
            //    swal({
            //        icon: "warning",
            //        title: response.responseText,
            //        button: true,
            //        closeModal: false
            //    })

            //}

        });
        //for zero value before live update
        var progressData = [{
            "skill": "OEE",
            "progress": 0
        }];

        //trial chart for progress bar
        update(progressData);


        var progressData2 = [{
            "skill": "Availability",
            "progress": 0
        }];

        var id1 = "#progress_avail"
        update1(progressData2);
        var progressData3 = [{
            "skill": "Performance",
            "progress": 0
        }];
        update2(progressData3);

        var progressData4 = [{
            "skill": "Quality",
            "progress": 0
        }];
        update3(progressData4);

        //bullet chart for kpi.-oee
        var bullet_text = '  [' +
            '{ "title": "OEE", "subtitle":"90%","ranges": [0,50,100], "measures": [90], "markers": [100] }]'
        var bullet_obj = JSON.parse(bullet_text)
        //var marginb = { top: 5, right: 0, bottom: 20, left: 60 },
        var marginb = { top: 0, right: 0, bottom: 0, left: 40 },
            widthb = 400 - marginb.left - marginb.right,
            heightb = 30 - marginb.top - marginb.bottom;

        var chartb = d3.bullet()
            .width(widthb)
            .height(heightb);




        var svgb = d3.select("#progress_chart").selectAll("svg")
            .data(bullet_obj)
                .enter().append("svg")
                .attr("class", "bullet")
                .attr("width", widthb + marginb.left + marginb.right)
                .attr("height", heightb + marginb.top + marginb.bottom+10)
                .append("g")
                .attr("transform", "translate(" + marginb.left + "," + marginb.top + ")")
            .call(chartb);


            var title = svgb.append("g")
                .style("text-anchor", "end")
                .attr("transform", "translate(-6," + heightb / 2 + ")");

            title.append("text")
                .attr("class", "title")

                .text(function (d) { return d.title; });

            title.append("text")
                .attr("class", "subtitle")
                .attr("dy", "1em")
            .attr("dx", widthb / 2)
            .text(function (d) { return d.subtitle; });
        //this will change chart content
        setInterval(function () {

            svgb.data(bullet_obj).call(chartb.duration(1000));
        }, 5000);
              //bullet chart for availability

        var bullet_text_a = '  [' +
            '{ "title": "Availablity", "subtitle":"20%","ranges": [0,50,100], "measures": [20], "markers": [100] }]'
        var bullet_obj1 = JSON.parse(bullet_text_a)
        var marginb1 = { top: 5, right: 0, bottom: 20, left: 100 },
            widthb1 = 400 - marginb1.left - marginb1.right,
            heightb1 = 50 - marginb1.top - marginb1.bottom;


        createdonut()
        //timeline chart


        //var testData= '[{ "times" : [' +
        //    '{"starting_time":'+ new Date("09/12/2020 06:00:00").getTime()+', "ending_time": '+new Date("09/12/2020 06:30:00").getTime()+',"color":"green"},' +
        //    '{"starting_time":' + new Date("09/12/2020 06:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 08:30:00").getTime() +' ,"color":"#e1ad01"},' +
        //    '{"starting_time": ' + new Date("09/12/2020 10:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 11:30:00").getTime() +'  ,"color":"#b7410e"},' +
        //    '{"starting_time": ' + new Date("09/12/2020 08:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 10:30:00").getTime() + '  ,"color":"green"},' +

        //    '{  "starting_time":'+ new Date("09/12/2020 11:30:00").getTime()+', "ending_time": '+new Date("09/12/2020 12:30:00").getTime()+' } ]}]';

        var testData = '[{ "Table" : [' +
            '{"starting_time":' + new Date("09/12/2020 06:00:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 06:00:10").getTime() + ',"color":"green"},' +
            '{"starting_time":' + new Date("09/12/2020 06:00:20").getTime() + ', "ending_time": ' + new Date("09/12/2020 08:30:00").getTime() + ' ,"color":"#e1ad01"},' +
            '{"starting_time": ' + new Date("09/12/2020 10:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 11:30:00").getTime() + '  ,"color":"#b7410e"},' +
            '{"starting_time": ' + new Date("09/12/2020 08:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 10:30:00").getTime() + '  ,"color":"green"},' +

            '{"starting_time":' + new Date("09/12/2020 11:30:00").getTime() + ', "ending_time": ' + new Date("09/12/2020 12:30:00").getTime() + ' } ]}]';


        var obj1 = JSON.parse(testData)
        console.log("testdata" + JSON.stringify(obj1))


        var testData1 = [
            { times: [{ "starting_time": new Date("09/12/2020 06:00:00").getTime(), "ending_time": new Date("09/12/2020 06:30:00").getTime(),"color":"pink" }, { "starting_time": new Date("09/12/2020 06:30:00").getTime(), "ending_time": new Date("09/12/2020 08:30:00").getTime() }, { "starting_time": new Date("09/12/2020 11:30:00").getTime(), "ending_time": new Date("09/12/2020 12:30:00").getTime() }] },
            { times: [{ "starting_time": new Date("09/12/2020 08:30:00").getTime(), "ending_time": new Date("09/12/2020 10:30:00").getTime() },] },
            { times: [{ "starting_time": new Date("09/12/2020 10:30:00").getTime(), "ending_time": new Date("09/12/2020 11:30:00").getTime() }] }]

        console.log("testdata1" + JSON.stringify(testData1))




        //calling timeline chart

        //var width_t=500
        //     var chart_t = d3.timeline();
        //d3.select("#status_bar").append("svg").attr("width", width_t)
        //    .datum(obj1).call(chart_t);


    })
    function createdonut() {
        //donut chart
        //var widthd = 140
        //heightd = 140
        //margind = 2
        //var radiusd = Math.min(widthd, heightd) / 2 - margind
        d3.selectAll("#planned > *").remove();
        // append the svg object to the div called 'availabilitychart'
        var svgd = d3.select("#planned")
            .append("svg")
            .attr("width", widthd)
            .attr("height", heightd)
            .append("g")
            .attr("transform", "translate(" + widthd / 2 + "," + heightd / 2 + ")");

        // Create dummy data
        //var data = { a: response.data[i].Availability, b: 100 - response.data[i].Availability }
        var datad = { a: 0, b: 100 }
        // set the color scale
        var colord = d3.scaleOrdinal()
            .domain(["a", "b"])
            .range(["#007F00", "white"]);

        // Compute the position of each group on the pie:
        var pied = d3.pie()
            .sort(null) // Do not sort group by size
            .value(function (d) { return d.value; })
        var data_readyd = pied(d3.entries(datad))

        // The arc generator
        //var arcd = d3.arc()
        //    .innerRadius(radiusd * 0.5)         // This is the size of the donut hole
        //    .outerRadius(radiusd * 0.8)

        //// Another arc that won't be drawn. Just for labels positioning
        //var outerArcd = d3.arc()
        //    .innerRadius(radiusd * 0.9)
        //    .outerRadius(radiusd * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svgd
            .selectAll('allSlices')
            .data(data_readyd)
            .enter()
            .append('path')
            .attr('d', arcd)
            .attr('fill', function (d) { return (colord(d.data.key)) })

        svgd.append("text")
            .attr("text-anchor", "middle")
            .attr('font-size', '4em')
            .attr('y', 5)
            //.text(response.data[i].Availability + "%");
            .text(0 + "%");




    }
    function drawpie(percentage) {

        if (percentage > 100) {
            percentage = 100;
        }

        //donut chart
        var widthd = 140
        heightd = 140
        margind = 2
        var radiusd = Math.min(widthd, heightd) / 2 - margind
        d3.selectAll("#planned > *").remove();

        var svgd = d3.select("#planned")
            .append("svg")
            .attr("width", widthd)
            .attr("height", heightd)
            .append("g")
            .attr("transform", "translate(" + widthd / 2 + "," + heightd / 2 + ")");


        var datad = { a: percentage, b: 100 - percentage }

        var colord = d3.scaleOrdinal()
            .domain(["a", "b"])
            .range(["#007F00", "white"]);


        var pied = d3.pie()
            .sort(null) // Do not sort group by size
            .value(function (d) { return d.value; })
        var data_readyd = pied(d3.entries(datad))

        // The arc generator
        var arcd = d3.arc()
            .innerRadius(radiusd * 0.5)         // This is the size of the donut hole
            .outerRadius(radiusd * 0.8)

        // Another arc that won't be drawn. Just for labels positioning
        var outerArcd = d3.arc()
            .innerRadius(radiusd * 0.9)
            .outerRadius(radiusd * 0.9)

        // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        svgd
            .selectAll('allSlices')
            .data(data_readyd)
            .enter()
            .append('path')
            .attr('d', arcd)
            .attr('fill', function (d) { return (colord(d.data.key)) })

        svgd.append("text")
            .attr("text-anchor", "middle")
            .attr('font-size', '4em')
            .attr('y', 5)
            //.text(response.data[i].Availability + "%");
            .text(percentage + "%");
    }
    function nextItem() {
        j = j + 1; // increase i by one
        j = j % list.length; // if we've gone too high, start from `0` again
        line_name = list_code[j];
        getdataonclick()
        return list[j]; // give us back the item of where we are now
    }
    function prevItem() {
        if (j === 0) { // i would become 0
            j = list.length; // so put it at the other end of the array
        }
        j = j - 1; // decrease by one
        line_name = list_code[j];
        getdataonclick()
        return list[j]; // give us back the item of where we are now
    }

    document.getElementById('prev_button').addEventListener(
        'click', // we want to listen for a click
        function (e) { // the e here is the event itself
            document.getElementById('line_heading').textContent = prevItem();
        }
    );

    document.getElementById('next_button').addEventListener(
        'click', // we want to listen for a click
        function (e) { // the e here is the event itself
            document.getElementById('line_heading').textContent = nextItem();
        }
    );
</script>
<script>
    function mc_status(machine, shift) {
        var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        modal.style.display = "block";
       // $("#myModal").modal('show');
        $("#myModal").modal({
            backdrop: 'static',
            keyboard: false
        });
        $('body').css({
            overflow: 'hidden'
        });

         var alarm_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Status'
        };
        var R_url = '@Url.Action("Login", "Main")';
         var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        //  $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetTop_Breakup',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: alarm_Data,
            dataType: 'json'
        }).success(function (response) {
            console.log(response)
            if (response.data.length != 0) {

                document.getElementById("errorlist_data").style.display = "block";
                document.getElementById("errorlist_nodata").style.display = "none";

                if ($.fn.DataTable.isDataTable('#datatable-errormaster')) {
                    $('#datatable-errormaster').DataTable().destroy();
                }


                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");

                    cols += "<td> " + response.data.Table[i].Error_Name + "</td> ";
                    cols += "<td> " + response.data.Table[i].Frequency + "</td> ";

                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#details3").append(newRow);


                }

                
                $('#datatable-errormaster').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });

            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#datatable-errormaster").empty()
            }
        }).error(function (response) {
            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            //else {
            //    swal({
            //        icon: "warning",
            //        title: response.responseText,
            //        button: true,
            //        closeModal: false
            //    })

            //}
        });

        //}).error(function (response) {

        //    swal({
        //        icon: "warning",
        //        title: "Session Timeout",
        //        button: true,
        //        closeModal: false
        //    })
        //    window.location = R_url;

        //});

        //error breakup flag-top
        var alarm_Data1 = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Top'
        };
        var R_url = '@Url.Action("Login", "Main")';
         var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        //  $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetTop_Breakup',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: alarm_Data1,
            dataType: 'json'
        }).success(function (response) {
            console.log(response)
            if (response.data.length != 0) {

                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    cols += "<td> " + response.data.Table[i].Error_Time + "</td> ";
                    cols += "<td> " + response.data.Table[i].Error_Name + "</td> ";
                    cols += "<td> " + response.data.Table[i].Error_Duration + "</td> ";

                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#details2").append(newRow);


                }
                if ($.fn.DataTable.isDataTable('#datatable-errorlist')) {
                    $('#datatable-errorlist').DataTable().destroy();
                }
                $('#datatable-errorlist').DataTable({
                    "responsive": true,
                    "autoWidth": false,



                });


            }


            else {
                document.getElementById("errorlist_data").style.display = "none";
                document.getElementById("errorlist_nodata").style.display = "block";
                //$(".custom_pre_error").text(response.msg);
                $("#datatable-errorlist").empty()
            }
        }).error(function (response) {
            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
        });
        //}).error(function (response) {

        //    swal({
        //        icon: "warning",
        //        title: "Session Timeout",
        //        button: true,
        //        closeModal: false
        //    })
        //    window.location = R_url;

        //});


        //////previous summary details
        //var vars = [], hash;
        //            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
        //        for (var i = 0; i < hashes.length; i++) {
        //            hash = hashes[i].split('?');
        //            vars.push(hash[0]);
        //            vars[hash[0]] = hash[1];
        //        }


                var today = new Date();
                var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
                var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();

        var prehr = new Date().getHours()-1
                var starttime = today.getHours() + ":00:00.00";
                var st = date + ' ' + starttime;
                var dateTime = date + ' ' + prehr +":00:00.00";
                 //var st = '2020-07-03 10:00:00.000';
                 //var dateTime = '2020-07-03 10:40:00.000';
                //var ft = response.data.Table[0].StartTime;
                var cols = '';
                var myData = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                         "linecode": '@Session["LineCode"]',
                         "Fromtime": st,
                         "Totime": dateTime,
                    "Machinecode": machine,
                    "Shift":shift
         };
         //alert(dateTime)
          var R_url = '@Url.Action("Login", "Main")';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

         var URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
    var HURL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';


            //$.ajax({
            //    type: 'Get',
            //    url: HURL + 'api/UserSettings/GetEmployee',
            //    headers: {
            //        Authorization: 'Bearer ' + user1
            //    },
            //    dataType: 'json'
            //}).success(function (response) {
         $.ajax({
             type: 'POST',
             url: HURL + 'api/Firstpassyield/GetPrevHourlysummarydata',
             data: myData,
               headers: {
                    Authorization: 'Bearer ' + user1
                },
             dataType: 'json'
         }).success(function (response) {

            if (response.data.length != 0) {
                document.getElementById("previous_data").style.display = "block";
                document.getElementById("previous_nodata").style.display = "none";
                $('#ok_mcno').text(machine);
                $('#ok_Line').text('@Session["LineCode"]');


                if ($.fn.DataTable.isDataTable('#datatable-previousdetails')) {
                    $('#datatable-previousdetails').DataTable().clear().draw();
                }

                if ($.fn.DataTable.isDataTable('#datatable-previousdetails')) {
                    $('#datatable-previousdetails').DataTable().destroy();
                }

                for (var i = 0; i < response.data.Table.length; i++) {

                  // var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    cols += "<td> " + response.data.Table[i].Date + "</td> ";
                    cols += "<td> " + response.data.Table[i].Variant_code + "</td> ";
                    cols += "<td> " + response.data.Table[i].Hour + "</td> ";
                    cols += "<td> " + response.data.Table[i].OK_Parts + "</td> ";
                    cols += "<td> " + response.data.Table[i].NOK_Parts + "</td> ";
                    cols += "<td> " + response.data.Table[i].Rework_Parts + "</td> ";



                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#previous_details").append(newRow);

                    //okparts_datatable.row.add([num, response.data.Table[i].time_stamp, response.data.Table[i].count, response.data.Table[i]["Produced Qty"]]).draw();
                }



                var okparts_table1 = $('#datatable-previousdetails').DataTable({

                    "responsive": true,
                    "autoWidth": false,
                    "searching": false,
                    dom: 'frtip',

                });
                    //$("#mymodal_okparts").modal('show');
            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#previous_details").empty();
                    $("#mymodal_previoussummary").modal('show');
                document.getElementById("previous_data").style.display = "none";
                document.getElementById("previous_nodata").style.display = "block";
            }


         }).error(function (response) {
            // alert(response.status)
             cols += "<h4>No data available </h4>";
             //$("#variantsummary").html(cols);
             $("#mymodal_previoussummary").modal('show');
         }).error(function (response) {
             if (response.status == "401") {
                 swal({
                     icon: "warning",
                     title: "Session Timeout",
                     button: true,
                     closeModal: false
                 })
                 window.location = R_url;
             }
             //else {
             //    swal({
             //        icon: "warning",
             //        title: response.responseText,
             //        button: true,
             //        closeModal: false
             //    })

             //}
            });

    }
    //$('#ct').on('click', function () {
    //    alert(data1)
    //    document.getElementById("mymodal_cthistogram").style.display = "block";
    //    $("#mymodal_cthistogram").modal('show');
    //    $('body').css({
    //        overflow: 'hidden'
    //    });
    //});

    function mc_status1(machine, shift,variant) {
        document.querySelector("body").style.overflow = 'hidden';
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_cthistogram").style.display = "block";
       // $("#mymodal_cthistogram").modal('show');
        $("#mymodal_cthistogram").modal({
            backdrop: 'static',
            keyboard: false
        });
        $('body').css({
            overflow: 'hidden'
        });
        gettarget_ct(line_name, machine, variant).then(function (response) {
            $('#setct').text(response.data.Table[0].cycletime + " secs")
            $('#manual_setct').text(response.data.Table[0].manual_cycletime + " secs")
            $('#auto_setct').text(response.data.Table[0].auto_cycletime + " secs")
            //target_ct_data = response.data;

        })
        var ct_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
            "ShiftID": shift,
            "Machine_Code": machine
        };
        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        // $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetCtHistogram',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: ct_Data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                document.getElementById("cycletime_data").style.display = "block";
                document.getElementById("cycletime_nodata").style.display = "none";
                //$('.ct_graph').html('')
                console.log('ct data' + JSON.stringify(response.data.Table))
                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                var text = '{ "Table" : [' +
                    '{ "date": "18-08-2020","FirstPassyeild": 100.0 },' +
                    '{ "date": "22-08-2020","FirstPassyeild": 100.0 },' +
                    '{ "date": "23-08-2020","FirstPassyeild": 100.0 } ]}';

              //  var obj = JSON.parse(response.data)
                //sample = obj.Table;
                sample = response.data.Table
                d3.selectAll(".ct_graph > *").remove();
                //const svg = d3.select('.year_report').append('svg');
                const svg = d3.select(".ct_graph").append("svg");
                // const svg = d3.select('svg');


                const svgContainer = d3.select('#container');

                const margin = 80;
                const width = 1000 - 2 * margin;
                const height = 600 - 2 * margin;

                const chart = svg.append('g')
                    .attr('transform', `translate(${margin}, ${margin})`);

                const xScale = d3.scaleBand()
                    .range([0, width])
                    .domain(sample.map((s) => s.cycletime))
                    .padding(0.4)

                const yScale = d3.scaleLinear()
                    .range([height, 0])
                    .domain([0, d3.max(sample, function (d) { return d.Occurence; })]);

                const makeYLines = () => d3.axisLeft()
                    .scale(yScale)

                chart.append('g')
                    .attr('transform', `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale));
               

                chart.append('g')
                    .call(d3.axisLeft(yScale));

                chart.append('g')
                    .attr('class', 'grid')
                    .call(makeYLines()
                        .tickSize(-width, 0, 0)
                        .tickFormat('')
                    )

                const barGroups = chart.selectAll()
                    .data(sample)
                    .enter()
                    .append('g')





                barGroups
                    .append('rect')
                    .attr('class', 'bar')
                    .attr('x', (g) => xScale(g.cycletime))
                    .attr('y', (g) => yScale(g.Occurence))
                    .attr('height', (g) => height - yScale(g.Occurence))
                    .attr('width', xScale.bandwidth())

                    .on('mouseleave', function () {
                        d3.selectAll('.value')
                            .attr('opacity', 1)

                        d3.select(this)
                            .transition()
                            .duration(300)
                            .attr('opacity', 1)
                            .attr('x', (a) => xScale(a.cycletime))
                            .attr('width', xScale.bandwidth())

                        chart.selectAll('#limit').remove()
                        chart.selectAll('.divergence').remove()
                    })

                barGroups
                    .append('text')
                    .attr('class', 'value')
                    .attr('x', (a) => xScale(a.cycletime) + xScale.bandwidth() / 2)
                    .attr('y', (a) => yScale(a.Occurence) + -10)
                    .attr('text-anchor', 'middle')
                    .text((a) => `${a.Occurence}`)
                    

                svg.append('text')
                    .attr('class', 'label')
                    .attr('x', -(height / 2) - margin)
                    .attr('y', margin / 2.4)
                    .attr('transform', 'rotate(-90)')
                    .attr('text-anchor', 'middle')
                    .text('Occurrence')

                svg.append('text')
                    .attr('class', 'label')
                    .attr('x', width / 2 + margin)
                    .attr('y', height + margin * 1.7)
                    .attr('text-anchor', 'middle')
                    .text('CycleTime(secs)')
                  

            }
            else {
                //$(".custom_pre_error").text(response.msg);
                document.getElementById("cycletime_data").style.display = "none";
                document.getElementById("cycletime_nodata").style.display = "block";
            }
        }).error(function (response) {
            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            //else {
            //    swal({
            //        icon: "warning",
            //        title: response.responseText,
            //        button: true,
            //        closeModal: false
            //    })

            //}
        });
        //}).error(function (response) {

        //    swal({
        //        icon: "warning",
        //        title: "Session Timeout",
        //        button: true,
        //        closeModal: false
        //    })
        //    window.location = R_url;

        //});

    }
    function gettarget_ct(linename, machine, variant) {
        var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        var value_ct = 0;
         var data_targetcycletime = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                          "Linecode": linename,

                         "variant": variant,
                          "Machine_Code": machine
                        };

                         return $.ajax({
                            type: 'POST',
                            data: data_targetcycletime,
                            url: live_URL + 'api/Quality/Gettarget_cycletime1',
                            headers: {
                                Authorization: 'Bearer ' + user1
                             },
                             async: false,
                            dataType: 'json'
                        }).success(function (response_targetcycletime) {
                            if (response_targetcycletime.data.length != 0) {
                                //target_ct = response_targetcycletime.data
                                //alert("ct" + target_ct)
                                //alert(response_targetcycletime.data)
                                //value_ct = response_targetcycletime.data;
                                //console.log('value ct' + value_ct)

                            }
                            else {
                               // return 0;
                            }
                            }).error(function (response) {
                               // return 0;
            });
        //console.log('value ct2' + value_ct)
        //return value_ct;
    }
    function okparts_show(machine, shift, variant) {

          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_okparts").style.display = "block";
        //$("#mymodal_okparts").modal('show');
        $("#mymodal_okparts").modal({
            backdrop: 'static',
            keyboard: false
        });
        $('body').css({
            overflow: 'hidden'
        });
         var okparts_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Okparts'
        };
        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        //   $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetPartsdetails',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: okparts_Data,
            dataType: 'json'
        }).success(function (response) {
            console.log(response)
            if (response.data.length != 0) {
                document.getElementById("okparts_data").style.display = "block";
                document.getElementById("okparts_nodata").style.display = "none";
                $('#ok_mcno').text(machine)
                $('#ok_variant').text(variant)
                if ($.fn.DataTable.isDataTable('#datatable-okparts1')) {
                  okparts_table.clear();
                }

                if ($.fn.DataTable.isDataTable('#datatable-okparts1')) {
                    $('#datatable-okparts1').DataTable().destroy();
                }

                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    cols += "<td> " + num + "</td> ";
                    cols += "<td> " + response.data.Table[i].time_stamp + "</td> ";
                    cols += "<td> " + response.data.Table[i].Batch_Count + "</td> ";
                    cols += "<td> " + response.data.Table[i]["Produced Qty"] + "</td> ";
                    cols += "<td> " + response.data.Table[i]["Cumulative_OKParts"] + "</td> ";




                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#okparts_details").append(newRow);

                    //okparts_datatable.row.add([num, response.data.Table[i].time_stamp, response.data.Table[i].count, response.data.Table[i]["Produced Qty"]]).draw();
                }

                

                var okparts_table=$('#datatable-okparts1').DataTable({

                    "responsive": true,
                    "autoWidth": false,
                    "searching": false,
                    dom: 'Bfrtip',
                    buttons: [
                        //{
                        //    extend: 'csv',
                        //    title: 'Ok Parts Count',
                        //    messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine
                        //},
                        {
                            extend: 'excel',
                            title: 'Ok Parts Count',
                            messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine + ' Shift:' + window.shift
                        },
                        {
                            extend: 'pdf',
                            title: 'Ok Parts Count',
                            messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine + ' Shift:' + window.shift
                        },
                        {
                            extend: 'print',
                            title: 'Ok Parts Count',
                            messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine + ' Shift:' + window.shift
                        },
                    ]

                });

            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#okparts_details").empty()
                document.getElementById("okparts_data").style.display = "none";
                document.getElementById("okparts_nodata").style.display = "block";
            }
        }).error(function (response) {
            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            //else {
            //    swal({
            //        icon: "warning",
            //        title: response.responseText,
            //        button: true,
            //        closeModal: false
            //    })

            //}
        });
        //}).error(function (response) {

        //    swal({
        //        icon: "warning",
        //        title: "Session Timeout",
        //        button: true,
        //        closeModal: false
        //    })
        //    window.location = R_url;

        //});

    }
    function nokparts_show(machine, shift, variant) {
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_nokparts").style.display = "block";
        //$("#mymodal_nokparts").modal('show');
        $("#mymodal_nokparts").modal({
            backdrop: 'static',
            keyboard: false
        });
        $('body').css({
            overflow: 'hidden'
        });
         var nokparts_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Scrap'
        };
        var R_url = '@Url.Action("Login", "Main")';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        // $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetPartsdetails',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: nokparts_Data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                document.getElementById("scrap_data").style.display = "block";
                document.getElementById("scrap_nodata").style.display = "none";
                console.log(response)
                $('#nok_mcno').text(machine)
                $('#nok_variant').text(variant)

                if ($.fn.DataTable.isDataTable('#datatable-nokparts')) {
                    nokparts_table.clear();
                }
                if ($.fn.DataTable.isDataTable('#datatable-nokparts')) {
                    $('#datatable-nokparts').DataTable().destroy();
                }


                for (var i = 0; i < response.data.Table.length; i++) {

                    var num = i + 1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");

                    cols += "<td> " + num + "</td> ";
                    cols += "<td> " + response.data.Table[i].time_stamp + "</td> ";
                    cols += "<td> " + response.data.Table[i].Batch_Count + "</td> ";
                    cols += "<td> " + response.data.Table[i]["Produced Qty"] + "</td> ";
                    cols += "<td> " + response.data.Table[i]["Cumulative_NOKParts"] + "</td> ";




                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#nokparts_details").append(newRow);
                   // nokparts_table.row.add([num, response.data.Table[i].time_stamp, response.data.Table[i].count, response.data.Table[i]["Produced Qty"]]).draw();


                }
                var nokparts_table=$('#datatable-nokparts').DataTable({

                    "responsive": true,
                    "autoWidth": false,
                    "searching": false,
                    dom: 'Bfrtip',
                    buttons: [
                        //{
                        //    extend: 'csv',
                        //    title: 'NOk Parts Count',
                        //    messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine +' Shift:' + $('.shift').val()
                        //},
                        {
                            extend: 'excel',
                            title: 'NOk Parts Count',
                            messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine + ' Shift:' + window.shift
                        },
                        {
                            extend: 'pdf',
                            title: 'NOk Parts Count',
                            messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine + ' Shift:' + window.shift
                        },
                        {
                            extend: 'print',
                            title: 'NOk Parts Count',
                            messageTop: 'Date:' + new Date().toLocaleString() + ' Line: ' + line_name + '  Machine:' + machine + ' Shift:' + window.shift
                        },
                    ]


                });
                //nokparts_table.clear();
                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                


            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#nokparts_details").empty()
                document.getElementById("scrap_data").style.display = "none";
                document.getElementById("scrap_nodata").style.display = "block";
            }
        }).error(function (response) {
            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            else {
                swal({
                    icon: "warning",
                    title: response.responseText,
                    button: true,
                    closeModal: false
                })

            }
        });
        //}).error(function (response) {

        //    swal({
        //        icon: "warning",
        //        title: "Session Timeout",
        //        button: true,
        //        closeModal: false
        //    })
        //    window.location = R_url;

        //});
    }
    function downtime_show(machine,shift,variant) {
         var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_downtime").style.display = "block";
        //$("#mymodal_downtime").modal('show');
        $("#mymodal_downtime").modal({
            backdrop: 'static',
            keyboard: false
        });
        $('body').css({
            overflow: 'hidden'
        });
        $('#downtime_current').text( new Date().toLocaleString());
         var downtime_data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
            "Linecode": line_name,
             "ShiftID": shift,
             "Machine_Code": machine,
             "Flag":'Downtime'
        };
        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        // $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetLossdetails',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: downtime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                console.log(response)
                $('#nok_mcno').text(machine)
                document.getElementById("downtime_data").style.display = "block";
                document.getElementById("downtime_nodata").style.display = "none";
                //  $('#updated_time').text(response.data.Table[0].time_stamp);
                for (var i = 0; i < response.data.Table.length; i++) {

                   var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");

                    cols += "<td> " + num + "</td> ";
                    cols += "<td> " + response.data.Table[i].DownTime_Reason + "</td> ";
                    cols += "<td> " + response.data.Table[i].Start_Time + "</td> ";
                    cols += "<td> " + response.data.Table[i].End_time + "</td> ";
                    cols += "<td> Supervisor</td> ";

                    cols += "<td> Supervisor</td> ";
                    cols += "<td> " + response.data.Table[i]["Duration_In_Sec"]+"</td> ";




                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#downtime_details").append(newRow);


                }

                if ($.fn.DataTable.isDataTable('#datatable-downtime')) {
                    $('#datatable-downtime').DataTable().destroy();
                }

                $('#datatable-downtime').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });

            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#downtime_details").empty()

                document.getElementById("downtime_data").style.display = "none";
                document.getElementById("downtime_nodata").style.display = "block";
            }



        }).error(function (response) {
            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            else {
                swal({
                    icon: "warning",
                    title: response.responseText,
                    button: true,
                    closeModal: false
                })

            }
            });
        //}).error(function (response) {

        //    swal({
        //        icon: "warning",
        //        title: "Session Timeout",
        //        button: true,
        //        closeModal: false
        //    })
        //    window.location = R_url;

        //});

        //new one appended
        var R_url = '@Url.Action("Login", "Main")';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        //$.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/downtimegraph_details',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: downtime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {

                const margin = 150;
                const width = 1000 - 2 * margin;
                const height = 500 - 2 * margin;

                //const margin = 80;
                //const width = 1000 - 2 * margin;
                //const height = 600 - 2 * margin;


                var text1 = '{ "Table" : [' +
                    '{ "Error": "Breakdown","Duration": 100.0 },' +
                    '{ "Error": "Breakdonw1","Duration": 100.0 },' +
                    '{ "Error": "Breakdown2","Duration": 100.0  } ]}';

                var obj1 = response.data
                console.log("graph" + JSON.stringify(response.data))
                sample1 = obj1.Table;
                d3.selectAll(".downtime_graph > *").remove();
                const svg1 = d3.select(".downtime_graph").append("svg");

                const chart1 = svg1.append('g')
                    .attr('transform', `translate(${margin}, ${margin})`);

                const xScale1 = d3.scaleBand()
                    .range([0, width])
                    .domain(obj1.map((s) => s.DownTime_Reason))
                    .padding(0.4)

                const yScale1 = d3.scaleLinear()
                    .range([height, 0])
                    .domain([0, d3.max(obj1, function (d) { return d.Duration_In_Sec; })]);

                const makeYLines1 = () => d3.axisLeft()
                    .scale(yScale1)

                chart1.append('g')
                    .attr('transform', `translate(0, ${height})`)
                    .call(d3.axisBottom(xScale1))
                    .selectAll("text")
                    .style("text-anchor", "end")
                    .attr("transform", "rotate(-10)");
                chart1.append('g')
                    .call(d3.axisLeft(yScale1));

                chart1.append('g')
                    .attr('class', 'grid')
                    .call(makeYLines1()
                        .tickSize(-width, 0, 0)
                        .tickFormat('')
                    )

                const barGroups1 = chart1.selectAll()
                    .data(obj1)
                    .enter()
                    .append('g')

                barGroups1
                    .append('rect')
                    .attr('class', 'bar')
                    .attr('x', (g) => xScale1(g.DownTime_Reason))
                    .attr('y', (g) => yScale1(g.Duration_In_Sec))
                    .attr('height', (g) => height - yScale1(g.Duration_In_Sec))
                    .attr('width', xScale1.bandwidth())



                barGroups1
                    .append('text')
                    .attr('class', 'value')
                    .attr('x', (a) => xScale1(a.DownTime_Reason) + xScale1.bandwidth() / 2)
                    .attr('y', (a) => yScale1(a.Duration_In_Sec) + -10)
                    .attr('text-anchor', 'middle')
                    .text((a) => `${a.Duration_In_Sec} secs`)

                svg1.append('text')
                    .attr('class', 'label')
                    .attr('x', -(height / 2) - margin)
                    .attr('y', margin / 2.4)
                    .attr('transform', 'rotate(-90)')
                    .attr('text-anchor', 'middle')
                    .text('Duration in Secs')

                svg1.append('text')
                    .attr('class', 'label')
                    .attr('x', width / 2 + margin)
                    .attr('y', height + margin * 1.7)
                    .attr('text-anchor', 'middle')

                    .text('Error');
            }
        }).error(function (response) {
            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            else {
                swal({
                    icon: "warning",
                    title: response.responseText,
                    button: true,
                    closeModal: false
                })

            }
        });
        //}).error(function (response) {

        //    swal({
        //        icon: "warning",
        //        title: "Session Timeout",
        //        button: true,
        //        closeModal: false
        //    })
        //    window.location = R_url;

        //});

    }
    function losstime_show(machine, shift, variant) {
          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_losstime").style.display = "block";
       // $("#mymodal_losstime").modal('show');
        $("#mymodal_losstime").modal({
            backdrop: 'static',
            keyboard: false
        });
        $('body').css({
            overflow: 'hidden'
        });
        var losstime_data = {
            "CompanyCode": '@Session["CompanyCode"]',
            "PlantCode": '@Session["PlantCode"]',
            //"Linecode": vars[0],
            "Linecode": line_name,
            "ShiftID": shift,
            "Machine_Code": machine,
            "Flag": 'LoseTime'
        };
         var R_url = '@Url.Action("Login", "Main")';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        //$.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/GetLossdetails',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: losstime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                console.log(response)
                document.getElementById("losstime_nodata").style.display = "none";
                document.getElementById("losstime_data").style.display = "block";
                $('#nok_mcno').text(machine)
                $('#ct_losstime').text(new Date().toLocaleString())
                $("#losstime_details").empty()
                //  $('#updated_time').text(response.data.Table[0].time_stamp);

                if ($.fn.DataTable.isDataTable('#datatable-losstime')) {
                    $('#datatable-losstime').DataTable().destroy();
                }

               var test_datatable= $('#datatable-losstime').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });
                test_datatable.clear()
                for (var i = 0; i < response.data.Table.length; i++) {
                    console.log(response.data.Table.length)
                    console.log(response.data.Table[i].DownTime_Reason)
                    var num = i + 1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    test_datatable.row.add([num, response.data.Table[i].DownTime_Reason, response.data.Table[i].Start_Time, 'Supervisor', response.data.Table[i].End_time, 'Supervisor', response.data.Table[i]["Duration_In_Sec"]]).draw();
                    //cols += "<td> " + num + "</td> ";
                    //cols += "<td> " + response.data.Table[i].DownTime_Reason + "</td> ";
                    //cols += "<td> " + response.data.Table[i].Start_Time + "</td> ";
                    //cols += "<td> Supervisor</td> ";
                    //cols += "<td> " + response.data.Table[i].End_time + "</td> ";
                    //cols += "<td> Supervisor</td> ";
                    //cols += "<td> " + response.data.Table[i]["Duration_In_Sec"] + "</td> ";




                    //cols += "</tr>"
                    ////cols += "</tr>";
                    //newRow.append(cols);
                    //$("#losstime_details").append(newRow);


                }

                //if ($.fn.DataTable.isDataTable('#datatable-losstime')) {
                //    $('#datatable-losstime').DataTable().destroy();
                //}

                //$('#datatable-losstime').DataTable({

                //    "responsive": true,
                //    "autoWidth": false,



                //});

            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#losstime_details").empty()
                document.getElementById("losstime_data").style.display = "none";
                document.getElementById("losstime_nodata").style.display = "block";
            }

            })
        .error(function (response) {

            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            else {
                swal({
                    icon: "warning",
                    title: response.responseText,
                    button: true,
                    closeModal: false
                })

            }

        });

        //pie chart to show percentage
        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        //  $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/losetimegraph_details',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: losstime_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                $('#totallosstime').text(response.data[0].End_time + " secs")
                console.log(response)
                d3.selectAll("#losstime_pie > *").remove();
                var svg_pie = d3.select("#losstime_pie").append("svg").attr("width", 700).attr("height", 300);
                console.log("original" + JSON.stringify(response.data))

                var test_pie_data = []
                var piechart_Data=""
                if (response.data.length == 1) {
                    
                   test_pie_data.push(response.data[0])
                     piechart_Data = test_pie_data;
                }
                else {
                   piechart_Data = response.data;
                }
                console.log("temp" + JSON.stringify(test_pie_data))
                //var piechart_Data = test_pie_data
                svg_pie.append("g").attr("id", "Donut");
                Donut3D.draw("Donut", getData(), 200, 150, 130, 100, 30, 0, svg_pie);



                function getData() {
                    var color = d3.scaleOrdinal(['#4daf4a', '#377eb8', '#ff7f00', '#984ea3', '#e41a1c']);
                    return piechart_Data.map(function (d) {
                        console.log(d)

                        return { label: d.DownTime_Reason, value: d.Start_Time, color: color(d.Start_Time) };
                    });
                }

            }


            else {
                //$(".custom_pre_error").text(response.msg);

            }


        }).error(function (response) {

            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            else {
                swal({
                    icon: "warning",
                    title: response.responseText,
                    button: true,
                    closeModal: false
                })

            }

        });
    }

    //to show rejection for every time
        function rejection_show(machine, shift, variant) {
          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        document.getElementById("mymodal_rejection").style.display = "block";
       // $("#mymodal_losstime").modal('show');
        $("#mymodal_rejection").modal({
            backdrop: 'static',
            keyboard: false
        });
        $('body').css({
            overflow: 'hidden'
        });
        var rejection_data = {
            "CompanyCode": '@Session["CompanyCode"]',
            "PlantCode": '@Session["PlantCode"]',
            "variantcode":variant,
            "Linecode": line_name,
            "ShiftID": shift,
            "Machine_Code": machine,

        };
         var R_url = '@Url.Action("Login", "Main")';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        //$.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/getrejectiondetails',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: rejection_data,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {
                console.log(response)
                document.getElementById("rejection_nodata").style.display = "none";
                document.getElementById("rejection_data").style.display = "block";
               // $('#nok_mcno').text(machine)
                $('#ct_rejtime').text(new Date().toLocaleString())
                $("#rejection_details").empty()
                //  $('#updated_time').text(response.data.Table[0].time_stamp);

                if ($.fn.DataTable.isDataTable('#datatable-rejection')) {
                    $('#datatable-rejection').DataTable().destroy();
                }

               var test_datatable= $('#datatable-rejection').DataTable({

                    "responsive": true,
                    "autoWidth": false,



                });
                test_datatable.clear()
                for (var i = 0; i < response.data.Table.length; i++) {

                    var num = i + 1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    test_datatable.row.add([num, response.data.Table[i].Timestamp, response.data.Table[i].Reject_Reason]).draw();



                }



            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#losstime_details").empty()
                document.getElementById("rejection_data").style.display = "none";
                document.getElementById("rejection_nodata").style.display = "block";
            }

            })
        .error(function (response) {

            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            else {
                swal({
                    icon: "warning",
                    title: response.responseText,
                    button: true,
                    closeModal: false
                })

            }

        });

        //pie chart to show percentage

    }


</script>
<style>
    #datatable-live {
        table-layout: fixed !important;
        width: 100%;
    }

    table {
        table-layout: fixed !important;
        width: 100%;
    }

    #datatable-live td {
        width: inherit !important;
        text-overflow: ellipsis;
    }

    #datatable-live tbody {
        width: inherit !important;
        text-overflow: ellipsis;
    }

    .circle {
        background-color: red;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }

    .circle_g {
        background-color: green;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }

    .circle_b {
        background-color: blue;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }

    .circle_grey {
        background-color: grey;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }

    .circle_y {
        background-color: yellow;
        display: block;
        height: 25px;
        width: 25px;
        border-radius: 50%;
        margin: auto;
        color: #fff;
        line-height: 50px;
        text-align: center
    }

    .red_circle {
        background-color: red;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }

    .green_circle {
        background-color: green;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }

    .blue_circle {
        background-color: blue;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }

    .grey_circle {
        background-color: grey;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }

    .yellow_circle {
        background-color: yellow;
        line-height: 20px;
        height: 15px;
        width: 15px;
        border-radius: 50%;
        margin: 0px;
        color: #fff;
        display: inline-flex;
    }

    #variant_list {
        display: none;
        float: right;
    }

    #myModal {
        overflow-y: scroll;
    }

    #mymodal_cthistogram {
        overflow-y: scroll;
        min-width:100% !important;
    }
    .modal .modal-dialog {
        width: 100%;
        max-width: none;
       
        margin: 0;
    }
    #mymodal_okparts {
        overflow-y: scroll;
    }

    #mymodal_nokparts {
        overflow-y: scroll;
    }

    #mymodal_downtime {
        overflow-y: scroll;
    }

    #mymodal_losstime {
        overflow-y: scroll;
    }

    .modal {
        overflow: auto !important;
    }
</style>
<script>
    function callhover() {
        alert("hovering")
    }
</script>
<script type="text/javascript">
    var ct_Data = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
        "Linecode": line_name,
        "ShiftID": '',
        "Machine_Code":''
    };
    console.log("new ct data" + ct_Data.CompanyCode)
    var modal = document.getElementById("myModal");
    // Get the <span> element that closes the modal
    var span = document.getElementsByClassName("close")[0];
    // When the user clicks on <span> (x), close the modal
    span.onclick = function () {
        $('#myModal').css('overflow-y', 'auto')
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal1 = document.getElementById("mymodal_cthistogram");
    // Get the <span> element that closes the modal
    var span1 = document.getElementById("ctclose")
    // When the user clicks on <span> (x), close the modal
    span1.onclick = function () {
        modal1.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal2 = document.getElementById("mymodal_okparts");
    // Get the <span> element that closes the modal
    var span2 = document.getElementById("okpartsclose1")
    // When the user clicks on <span> (x), close the modal
    span2.onclick = function () {
        modal2.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal3 = document.getElementById("mymodal_nokparts");
    // Get the <span> element that closes the modal
    var span3 = document.getElementById("nokpartsclose")
    // When the user clicks on <span> (x), close the modal
    span3.onclick = function () {
        modal3.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }

    var modal4 = document.getElementById("mymodal_downtime");
    var span4 = document.getElementById("downtimeclose")

    span4.onclick = function () {
        modal4.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal5 = document.getElementById("mymodal_losstime");
    var span5 = document.getElementById("losstimeclose")

    span5.onclick = function () {

        modal5.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }

    var modal6 = document.getElementById("mymodal_rejection");
    var span6 = document.getElementById("rejectionclose")

    span6.onclick = function () {

        modal6.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    var modal7 = document.getElementById("mymodal_previoussummary");
    var span7 = document.getElementById("previousclose")

    span7.onclick = function () {

        modal7.style.display = "none";
        modal.style.display = "none";
        $('body').css({
            overflow: 'visible'
        });
    }
    //var modal6 = document.getElementById("dummy");
    //var span6 = document.getElementById("dummyclose")

    //span6.onclick = function () {

    //    modal6.style.display = "none";
    //    modal.style.display = "none";

    //}

    //get live data for table
    function update_timer() {

        $('#next_update').text(timer_upd + 's')
        if (timer_upd != 0) {
            timer_upd = timer_upd - 1
        }
        else {
            timer_upd = 30
        }
        setTimeout(update_timer, 1000);
    }
    function createbarformachine() {
        //var nextTab = $('#ulelement li').size() + 1;

        // create the tab

        // make the new tab active
        //$('#tabs a:last').tab('show');
        var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var myData = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
                 "Linecode": line_name
        };
        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        // $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {
        $.ajax({
            type: 'POST',
            url: live_URL + 'api/Quality/getmachine_code',
            headers: {
                Authorization: 'Bearer ' + user1
            },
            data: myData,
            dataType: 'json'
        }).success(function (response) {
            if (response.data.length != 0) {


                for (var i = 0; i < response.data.Table.length; i++) {
                    $('<li id="ulelement' + response.data.Table[i].AssetID + '" onclick=showcontent(this)><a href="#ulelement' + response.data.Table[i].AssetID + '-" data-toggle="tab">Machine ' + response.data.Table[i].AssetID + '</a></li>').appendTo('#ulelement');
                    $('div#ulcontent').append('<div class="tab-pane" style="min-height:130px" id="ulelement' + response.data.Table[i].AssetID + '-"></div>')
                    var currentid = 'ulelement' + response.data.Table[i].AssetID + '-'
                    if (i == 0) {
                        var id_toshow = 'ulelement' + response.data.Table[i].AssetID + '-'
                        //alert(id_toshow)
                        //showinitialcontent(id_toshow)
                        document.getElementById(id_toshow).style.display = "block"
                    }
                    console.log("created block element" + currentid)
                }
                //for (var i = 0; i < 2; i++) {
                //    $('<li id="ulelement' + i + '" onclick=showcontent(this)><a href="#ulelement' + i + '-" data-toggle="tab">Machine ' + i + '</a></li>').appendTo('#ulelement');
                //    $('div#ulcontent').append('<div class="tab-pane" id="ulelement' +i + '-">Machine' + i + ' content</div>')




                //}
                $('#ulelement a:first').tab('show');
            }

        }).error(function (response) {

            if (response.status == "401") {
                swal({
                    icon: "warning",
                    title: "Session Timeout",
                    button: true,
                    closeModal: false
                })
                window.location = R_url;
            }
            else {
                swal({
                    icon: "warning",
                    title: response.responseText,
                    button: true,
                    closeModal: false
                })

            }

        });
    }
    function updatestatus(id, response) {




                        var test22 = '[{"Table":' + JSON.stringify(response.data) + '}]'
                        var obj2 = JSON.parse(test22)
                        console.log("testdata1" + test22)

                       // d3.selectAll("#status_bar > *").remove();
                        //status bar
                        var width_t = 500
                        var chart_t = d3.timeline();
                        console.log('call2')
                        console.log('check bar' + document.getElementById('statuschart0'))
                        console.log('bar id' + bar_id)
                      //  alert(bar_id)
                        var newid = id + " > *";
                        d3.selectAll(newid).remove();
                        //d3.select('#ulelementM1').append("svg").attr("width", width_t)
                        //    .datum(obj2).call(chart_t);
                        d3.select(bar_id).append("svg").attr("width", width_t)
                            .datum(obj2).call(chart_t);





    }
    function showcontent(element) {
        var tabContents = document.getElementsByClassName('tab-pane');
        for (var i = 0; i < tabContents.length; i++) {
            tabContents[i].style.display = 'none';
        }
       //alert((element.id).slice(-2))
        // change tabsX into tabs-X in order to find the correct tab content
        var tabContentIdToShow = element.id + '-'
        //alert(tabContentIdToShow)
        document.getElementById(tabContentIdToShow).style.display = 'block';
        var bar_id = '#ulelement' + (element.id).substring(9) + '-'
                     var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var R_url = '@Url.Action("Login", "Main")';
                     var data_bargraph = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Linecode": line_name,
                         "ShiftID": window.shift,
                         "Variant": window.variant,
                         "Machine_Code": (element.id).substring(9)
                        };
                        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                    $.ajax({
                        type: 'POST',
                        url: live_URL + 'api/Quality/Getmachine_status',
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                   // async:false,
                        data: data_bargraph,
                        dataType: 'json'
                    }).success(function (response) {

                        var test22 = '[{"Table":' + JSON.stringify(response.data) + '}]'
                        var obj2 = JSON.parse(test22)
                        console.log("testdata1" + test22)

                       // d3.selectAll("#status_bar > *").remove();
                        //status bar
                        var width_t = 500
                        var chart_t = d3.timeline();

                      //  alert(bar_id)
                        var newid = bar_id + " > *";
                        d3.selectAll(newid).remove();
                        //d3.select('#ulelementM1').append("svg").attr("width", width_t)
                        //    .datum(obj2).call(chart_t);
                        d3.select(bar_id).append("svg").attr("width", width_t)
                            .datum(obj2).call(chart_t);



                    }).error(function (response) {
                        if (response.status == "401") {
                            swal({
                                icon: "warning",
                                title: "Session Timeout",
                                button: true,
                                closeModal: false
                            })
                            window.location = R_url;
                        }
                        else {
                            swal({
                                icon: "warning",
                                title: response.responseText,
                                button: true,
                                closeModal: false
                            })

                        }
                    });

    }
    function showinitialcontent(id) {
        var tabContents = document.getElementsByClassName('tab-pane');
        for (var i = 0; i < tabContents.length; i++) {
            tabContents[i].style.display = 'none';
        }
       //alert((element.id).slice(-2))
        // change tabsX into tabs-X in order to find the correct tab content
        var tabContentIdToShow = id + '-'
        //alert(tabContentIdToShow)
        document.getElementById(tabContentIdToShow).style.display = 'block';
        var bar_id = '#ulelement' + (element.id).substring(9) + '-'
                     var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var R_url = '@Url.Action("Login", "Main")';
                     var data_bargraph = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Linecode": line_name,
                         "ShiftID": window.shift,
                         "Variant": window.variant,
                         "Machine_Code": (id).substring(9)
                        };
                        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                    $.ajax({
                        type: 'POST',
                        url: live_URL + 'api/Quality/Getmachine_status',
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                   // async:false,
                        data: data_bargraph,
                        dataType: 'json'
                    }).success(function (response) {

                        var test22 = '[{"Table":' + JSON.stringify(response.data) + '}]'
                        var obj2 = JSON.parse(test22)
                        console.log("testdata1" + test22)

                       // d3.selectAll("#status_bar > *").remove();
                        //status bar
                        var width_t = 500
                        var chart_t = d3.timeline();

                      //  alert(bar_id)
                        var newid = bar_id + " > *";
                        d3.selectAll(newid).remove();
                        //d3.select('#ulelementM1').append("svg").attr("width", width_t)
                        //    .datum(obj2).call(chart_t);
                        d3.select(bar_id).append("svg").attr("width", width_t)
                            .datum(obj2).call(chart_t);



                    }).error(function (response) {
                        if (response.status == "401") {
                            swal({
                                icon: "warning",
                                title: "Session Timeout",
                                button: true,
                                closeModal: false
                            })
                            window.location = R_url;
                        }
                        else {
                            swal({
                                icon: "warning",
                                title: response.responseText,
                                button: true,
                                closeModal: false
                            })

                        }
                    });
        return 1;
    }
    function getqualitylive_table() {

        window.count_loading = window.count_loading + 1;
        window.avail_downtime = 0;
        window.target_cycletime = 0;
        window.rej_percentage = 0;
        window.rework_percentage = 0;
        window.avail_prodloss = 0;
        window.alarm_reason = "";
        window.loss_reason=""
        var target_ct = 0.00;
        if ( window.count_loading == 1) {
            //$('.loading1').show();
            $('#nodata').hide();
        }
       // $("#details1").empty();
      console.log('called')
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('?');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
        }
        @*window.plant_table=@Session["CompanyCode"];*@
         //$('#updated_time').text('');
        var variant_target = '';
        var shift_target = '';
        var actual = 0;
        var firstpass = 0;
        var myData = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
                 "Linecode": line_name
        };
        var alarm_reason = '';
        //var myTable = $('#datatable-live').DataTable();
        //myTable.clear()

          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        // $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {


            $.ajax({
                type: 'POST',
                url: live_URL + 'api/Quality/GetQualitylivedata',
                headers: {
                   Authorization: 'Bearer ' + user1
                },
                //async:false,
                data: myData,
                dataType: 'json',
                cache:'false'
            }).success(function (response) {




                if (response.data.length != 0) {
                    $('#nodata').hide();
                    var arr = [];

                    if ($.fn.DataTable.isDataTable('#datatable-live')) {
                        $('#datatable-live').DataTable().destroy();
                    }


                    $('.loading1').hide();
                    variant_target = response.data.Table[0].Variant_Code;
                    window.variant = response.data.Table[0].Variant_Code;
                    shift_target = response.data.Table[0].ShiftID
                    console.log("Shift in prod:" + shift_target);
                    $('#line').text('@Session["FunctionName"]')
                    $('#live_time').text('Live Time :' + new Date().toLocaleString());
                    $('#shift').text(response.data.Table[0].ShiftID)
                    window.shift = response.data.Table[0].ShiftID;
                    $('#ok_shift').text(response.data.Table[0].ShiftID)
                    $('#nok_shift').text(response.data.Table[0].ShiftID)
                    $('.shift').text(response.data.Table[0].ShiftID)

                    $('#plant').text('@Session["PlantName"]')
                    $('.updated_time').text(new Date(response.data.Table[0].time_stamp).toLocaleString());
                    $('.shift_n').show();
                    $('.updated_time_n').show();
                    $('#lt_update').text(new Date(response.data.Table[0].time_stamp).toLocaleString());
                    $("#details1").empty();
                    $("#datatable-live tbody").empty();
                    //$("#details1").empty();
                  //  d3.selectAll("#status_bar > *").remove();
                    //  $('#updated_time').text(response.data.Table[0].time_stamp);

                    for (var i = 0; i < response.data.Table.length; i++) {
                        arr = response.data.Table[i].Asset_ID_Name.split('-');
                        //console.log('split machine' + arr[1])
                         var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                         var myData_mcavail = {
                             "CompanyCode": '@Session["CompanyCode"]',
                             "PlantCode": '@Session["PlantCode"]',
                             "Line_Code": '@Session["LineCode"]',
                             "Machine_Code": response.data.Table[i].AssetID
                        };
                       // alert(response.data.Table[i].AssetID)

                        $.ajax({
                            type: 'POST',
                            data: myData_mcavail,
                            url: live_URL + 'api/Availability/GetAvllivedata_mcwise',
                            headers: {
                                Authorization: 'Bearer ' + user1
                            },

                            dataType: 'json'
                        }).success(function (response_mc) {
                            if (response_mc.data.length != 0) {
                                //alert("inside")

                                for (var i = 0; i < response_mc.data.length; i++) {
                                    console.log("tolltip data"+response_mc.data[i].DownTime)
                                    window.avail_downtime = response_mc.data[i].DownTime
                                    window.avail_prodloss = response.data[i].LossTime;
                                }

                            }
                            else {

                            }
                        }).error(function (response) {

                            });

                        //to get stoppage
                         var myData_stoppage = {
                             "CompanyCode": '@Session["CompanyCode"]',
                             "PlantCode": '@Session["PlantCode"]',
                             "Linecode": response.data.Table[i].Line_Code,
                             "Machine_Code": response.data.Table[i].AssetID,
                             "Variantcode": response.data.Table[i].Variant_Code,
                             "ShiftID": response.data.Table[i].ShiftID
                         };
                        $.ajax({
                            type: 'POST',
                            data: myData_stoppage,
                            url: live_URL + 'api/Quality/GetStoppageReason',
                            headers: {
                                Authorization: 'Bearer ' + user1
                            },
                            async: false,
                            dataType: 'json'
                        }).success(function (response_mc) {
                            if (response_mc.data.length != 0) {
                                //alert("inside")
                                console.log("stoppage" + JSON.stringify(response_mc.data.Table[0]))

                                if (response_mc.data.Table[0]["Live_Alarm"] == 0 || response_mc.data.Table[0]["Live_Alarm"] == null) {

                                }
                                else {

                                    console.log(response_mc.data.Table[0]["Live_Alarm"])
                                    window.alarm_reason ="Alarm:"+ response_mc.data.Table[0]["Live_Alarm"]
                                }
                                if (response_mc.data.Table[0]["Live_Loss"] == 0 || response_mc.data.Table[0]["Live_Alarm"] == null) {

                                }
                                else {
                                    console.log(response_mc.data.Table[0]["Live_Loss"])
                                    window.loss_reason ="Loss:"+ response_mc.data.Table[0]["Live_Loss"]
                                }


                            }
                            else {

                            }
                        }).error(function (response) {

                        });



                        // to get target cycletime value

                        window.rej_percentage = ((response.data.Table[i].Scrap / (response.data.Table[i].Scrap + response.data.Table[i].OkParts + response.data.Table[i].ReworkParts)) * 100).toFixed(2)
                        if (window.rej_percentage == 'NaN') {
                            window.rej_percentage = 0.00.toFixed(2)
                        }


                        window.rework_percentage = ((response.data.Table[i].ReworkParts / (response.data.Table[i].ReworkParts + response.data.Table[i].OkParts + response.data.Table[i].Scrap)) * 100).toFixed(2)
                        if (window.rework_percentage == 'NaN') {
                            window.rework_percentage = 0.00.toFixed(2)
                        }


                        var newRow = $("<tr>");
                        var cols = '';
                        var cols1 = '';
                        var sc = '';
                        var sc_text = '';
                        var oee_col = ''
                        var avail_col = ''
                        var perf_col = ''
                        var quality_col=''
                        var num = i + 1;
                        var target_ct_data = 0;
                        var target_manual_ct = 0;
                        var target_auto_ct = 0;
                        //alert(gettarget_ct(vars[0], response.data.Table[i].AssetID, response.data.Table[i].Variant_Code))
                        //var cols = $("<tr>");
                        gettarget_ct('@Session["LineCode"]', response.data.Table[i].AssetID, response.data.Table[i].Variant_Code).then(function (response) {

                            target_ct_data = response.data.Table[0].cycletime;
                            target_manual_ct = response.data.Table[0].auto_cycletime;
                            target_auto_ct = response.data.Table[0].manual_cycletime;

                        })
                        cols += "<td style='text-align:center;'> " + response.data.Table[i].Batch_code + "</td> ";
                        cols += "<td><table><tr><td>" + response.data.Table[i].Asset_ID_Name + "</td></tr><tr><td>" + response.data.Table[i].VariantName+"_"+response.data.Table[i].Variant_Code+"</td></tr></table></td>";
                       // cols += "<td bgcolor='#A9A9A9' style='text-align:center;'> " + response.data.Table[i].AssetID+ "</td> ";
                      //  cols += "<td style='text-align:center;'> " + response.data.Table[i].OperatorID + "</td> ";
                        console.log('refresh check'+response.data.Table[i].OkParts)
                        //alert(response.data.Table[i].Machine_Status)
                        if (response.data.Table[i].Machine_Status == "0" ) {
                            //alert(response.data.Table[i].AssetID)
                            sc = 'circle'

                            sc_text = 'Machine Stopped'
                        }
                        else if (response.data.Table[i].Machine_Status == "1") {
                            sc = 'circle_g'
                            sc_text = 'Machine Running'
                        }
                        else if (response.data.Table[i].Machine_Status == "3" || response.data.Table[i].Machine_Status == "2") {
                            //alert("yellow")
                            sc = 'circle_y'
                            sc_text = 'M / c Running with error'
                        }
                        else if (response.data.Table[i].Machine_Status == "5") {
                            sc = 'circle_b'
                            sc_text = 'M/c disconnected/power off'
                        }
                        else if (response.data.Table[i].Machine_Status == "4") {
                            sc = 'circle_grey'
                            sc_text = 'Break'
                        }
                        else {
                            sc = 'circle_y'
                            sc_text = 'Break'
                        }

                        if (parseInt(response.data.Table[i].OEE) > 75) {
                            oee_col='green'
                        }
                        if (parseInt(response.data.Table[i].OEE) > 25 && parseInt(response.data.Table[i].OEE) <76) {
                            oee_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].OEE) < 26) {
                            oee_col = 'red'
                        }
                        if (parseInt(response.data.Table[i].Availability) > 75) {
                            avail_col = 'green'
                        }
                        if (parseInt(response.data.Table[i].Availability) > 25 && parseInt(response.data.Table[i].Availability) <76 ) {
                            avail_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].Availability) < 26) {
                            avail_col = 'red'
                        }
                        if (parseInt(response.data.Table[i].Performance) > 75) {
                            perf_col = 'green'
                        }
                        if (parseInt(response.data.Table[i].Performance) > 25 && parseInt(response.data.Table[i].Performance) <76) {
                            perf_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].Performance) < 26) {
                            perf_col = 'red'
                        }
                        if (parseInt(response.data.Table[i].Quality) > 75) {
                            quality_col = 'green'
                        }
                            if (parseInt(response.data.Table[i].Quality) > 25 && parseInt(response.data.Table[i].Quality) <76) {
                            quality_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].Quality) < 26) {
                            quality_col = 'red'
                        }
                       // alert(sc + response.data.Table[i].AssetID)
                        cols1 += "<strong style='float:left;'>Downtime</strong><strong style='padding-left:27%'>:</strong><strong style='float:right;'>" + window.avail_downtime + "mins</strong>";
                        cols1 += "<br />";
                        cols1 += "<strong style='float:left'>Production Loss</strong><strong style='padding-left:13.5%'>:</strong><strong style='float:right;'>" + window.avail_prodloss + "mins</strong>";

                            cols += "<td style='cursor:pointer;'  title='" + window.loss_reason + window.alarm_reason + "' onclick=mc_status('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "')><p style=display:none>" + sc_text + "</p><span  class=" + sc + " ></span></td>";



                        //cols += "<td bgcolor='#4A708B' id='var_list' style='text-align:center;'> " + response.data.Table[i].Variant_Code + "</td> ";
                        //cols += "<td bgcolor='#808080' style='cursor:pointer;text-align:center;'  data-tooltip='Target Cycletime:" + target_ct_data + "secs\n Manual Target Cycletime: " + target_manual_ct + " secs\n Auto Target Cycletime:" + target_auto_ct + "secs '  onclick=mc_status1('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "'); > " + response.data.Table[i].CycleTime + "</td> ";
                        cols += "<td bgcolor='#808080' style='cursor:pointer;text-align:center;'  title='Target Cycletime:" + target_ct_data + "secs\n Manual Target Cycletime: " + target_manual_ct + " secs\n Auto Target Cycletime:" + target_auto_ct + "secs '  onclick=mc_status1('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "'); > " + response.data.Table[i].CycleTime + "</td> ";
                        cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>OK</td><td>Scrap</td><td>Rwrk</td></tr><tr><td bgcolor='#3CB371' style='cursor:pointer;text-align:center;' onclick=okparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].OkParts + "</td><td bgcolor='#DC143C' style='cursor:pointer;text-align:center;' onclick=nokparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].Scrap + "</td><td>" + response.data.Table[i].ReworkParts+"</td></tr></table></td>"
                        //cols += "<td bgcolor='#3CB371' style='cursor:pointer;text-align:center;' onclick=okparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].OkParts + "</td> ";
                        //console.log('checkokparts' + cols)
                        cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>U</td><td>D</td><td>L</td><td>B</td></tr><tr><td style='text-align:center;' > " + response.data.Table[i].UpTime + "</td><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td><td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> <td>" + response.data.Table[i].BreakTime + "</td></tr></table></td>"
                        //cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>U/T</td><td>D/T</td><td>L/T</td><td>B/T<td></tr><tr><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].UpTime + "</td><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td><td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> <td>" + response.data.Table[i].LossTime + "</td></tr></table></td>"
                        //cols += "<td bgcolor='#DC143C' style='cursor:pointer;text-align:center;' onclick=nokparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].Scrap + "</td> ";
                        //cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>U/T</td><td>D/T</td><td>L/T</td><td>B/T<td></tr><tr><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].UpTime + "</td><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td><td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> <td>" + response.data.Table[i].LossTime + "</td></tr></table></td>"
                        //cols += "<td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td> ";
                        //cols += "<td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> ";
                        // cols += "<td style='cursor:pointer;text-align:center;' onclick=rejection_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + window.rej_percentage + "</td> ";
                        cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>Rej%</td><td>R%</td></tr><tr><td style='cursor:pointer;text-align:center;' onclick=rejection_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + window.rej_percentage + "</td><td>" + window.rework_percentage + "</td></tr></table></td>";
                        cols += "<td bgcolor='" + oee_col + "' style='text-align:center;'> " + response.data.Table[i].OEE + "<table border='1' style='border-collapse:collapse'><tr><td>A</td><td>P</td><td>Q</td></tr><tr><td> " + response.data.Table[i].Availability + "</td><td> " + response.data.Table[i].Performance + "</td><td> " + response.data.Table[i].Quality + "</td></tr></table></td>";
                        //cols += "<td bgcolor='#B4CDCD' style='text-align:center;'   data-tooltip='Downtime :" + window.avail_downtime + "secs \n Production Loss:" + window.avail_prodloss + "secs'> " + response.data.Table[i].Availability +  "</td> ";
                        //cols += "<td bgcolor='#B4CDCD' style='text-align:center;'> " + response.data.Table[i].Performance + "</td> ";
                        //cols += "<td bgcolor='#B4CDCD' style='text-align:center;'> " + response.data.Table[i].Quality + "</td> ";

                       // cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>A</td><td>P</td><td>Q</td></tr><tr><td> " + response.data.Table[i].Availability + "</td><td> " + response.data.Table[i].Performance + "</td><td> " + response.data.Table[i].Quality +"</td></tr></table></td>"
                        cols += "</tr>"


                       // cols +="<table><tr><td>A</td><td>P</td><td>Q</td></tr></table>"
                        //cols += "</tr>";
                        newRow.append(cols);

                        //$("#details1").append('');


                        $("#details1").append(newRow);
                        $("#mcname"+i).text(response.data.Table[i].Asset_ID_Name)

                        //for dynamic status bar
                        var cols = '';
                       //cols += "<div  id='statuschart" + i + "' >";
                        //var bar_id = '#statuschart' + i;


                //}).error(function (response) {

                //    swal({
                //        icon: "warning",
                //        title: "Session Timeout",
                //        button: true,
                //        closeModal: false
                //    })
                //    window.location = R_url;

                //});

                    }


                    $('#datatable-live').dataTable({
                        //"dom": '<"col-sm-12"f>t',
                        "responsive": true,
                        "autoWidth": false,
                        "pageLength": 5,
                        "bLengthChange": true,
                        "bFilter": true,
                        //"bInfo": false,
                        "scrollX":false


                   // pagination();

                    });
                    //$('#datatable-live').simplePagination({

                    //    //limit: 5,
                    //    //rowDisplayStyle: 'block',
                    //    //activePage: 0,
                    //    //rows: []

                    //});
                     var bar_id = '#ulelement' + response.data.Table[0].AssetID + '-'
                       // alert(bar_id)
                        //var new_bar_id = 'ulelement' + response.data.Table[i].AssetID
                        //alert('check123'+document.getElementById(new_bar_id).innerHTML)
                       // $("#status_bar").html(cols);
                       // alert("machine for data"+response.data.Table[i].AssetID);
                     var data_bargraph = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Linecode": line_name,
                        "ShiftID": shift_target,
                         "Variant": variant_target,
                         "Machine_Code": response.data.Table[0].AssetID
                        };
                        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                    $.ajax({
                        type: 'POST',
                        url: live_URL + 'api/Quality/Getmachine_status',
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                   // async:false,
                        data: data_bargraph,
                        dataType: 'json'
                    }).success(function (response) {

                        var test22 = '[{"Table":' + JSON.stringify(response.data) + '}]'
                        var obj2 = JSON.parse(test22)
                        console.log("testdata1" + test22)

                       // d3.selectAll("#status_bar > *").remove();
                        //status bar
                        var width_t = 500
                        var chart_t = d3.timeline();
                        console.log('call2')
                        console.log('check bar' + document.getElementById('statuschart0'))
                        console.log('bar id' + bar_id)
                      //  alert(bar_id)
                        var newid = bar_id + " > *";
                        d3.selectAll(newid).remove();
                        //d3.select('#ulelementM1').append("svg").attr("width", width_t)
                        //    .datum(obj2).call(chart_t);
                        d3.select(bar_id).append("svg").attr("width", width_t)
                            .datum(obj2).call(chart_t);



                    }).error(function (response) {
                        if (response.status == "401") {
                            swal({
                                icon: "warning",
                                title: "Session Timeout",
                                button: true,
                                closeModal: false
                            })
                            window.location = R_url;
                        }
                        else {
                            swal({
                                icon: "warning",
                                title: response.responseText,
                                button: true,
                                closeModal: false
                            })

                        }
                    });

                    timer_upd = 30;


                    //for progress chart
                    var oee_d = 0;
                    var perf_d = 0;
                    var availability_d = 0;
                    var quality_d = 0

                    for (var i = 0; i < response.data.Table.length; i++) {
                        var numb_array = [];
                        var mc_high_no = response.data.Table[i].AssetID.match(/(\d+)/)
                        numb_array.push(parseInt(mc_high_no));
                        console.log(numb_array)
                    }

                    var max = numb_array.reduce(function (a, b) {
                        return Math.max(a, b);
                    });
                    var max_station = 'M' + max;
                    for (var i = 0; i < response.data.Table.length; i++) {
                        if (response.data.Table[i].AssetID == max_station) {
                            oee_d = response.data.Table[i].OEE
                            perf_d = response.data.Table[i].Performance
                            availability_d = response.data.Table[i].Availability
                            quality_d = response.data.Table[i].Quality
                            actual = response.data.Table[i].OkParts
                            //firstpass = response.data.Table[i].Firstpassyeild.toFixed(2)

                        }
                    }
                    console.log(oee_d)
                    console.log(availability_d)
                    console.log(perf_d)
                    console.log(quality_d)
                    var id = "#progress_chart1"
                    // var dId = d3.select("#progress_chart1");
                    var progressData = [{
                        "skill": "OEE",
                        "progress": oee_d
                    }];
                    var progressData_avail = [{
                        "skill": "OEE",
                        "progress": availability_d
                    }];
                    var progressData_per = [{
                        "skill": "OEE",
                        "progress": perf_d
                    }];
                    var progressData_quality = [{
                        "skill": "OEE",
                        "progress": quality_d
                    }];
                    //trial chart for progress bar
                    update(progressData);
                    update1(progressData_avail);
                    update2(progressData_per);
                    update3(progressData_quality);
                    $('#firstpass').text(firstpass+'%')


                    //actual and target
                    var data_target = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Linecode": line_name,
                        "ShiftID": shift_target,
                        "Variant": variant_target
                    };
                    var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                //   $.ajax({
                //        type: 'Post',
                //        url: live_URL + 'api/OEE/GetEmployee',
                //        headers: {
                //                Authorization: 'Bearer ' + user1
                //        },
                //        dataType: 'json'
                //}).success(function (response) {
                    $.ajax({
                        type: 'POST',
                        url: live_URL + 'api/Quality/Gettarget_count',
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        data: data_target,
                        dataType: 'json'
                    }).success(function (response) {
                        console.log("target" + response.data)
                        $('#planned_quantity').text(response.data)
                        $('#actual_quantity').text(actual)
                        if (parseInt(response.data) > 0) {
                            var percentage_target = parseInt((actual / response.data) * 100)
                        }
                        else {
                            var percentage_target = 0;
                        }
                       // var percentage_target = parseInt((actual / response.data) * 100)
                        createdonut()
                        drawpie(percentage_target)


                        }).error(function (response) {
                            if (response.status == "401") {
                                swal({
                                    icon: "warning",
                                    title: "Session Timeout",
                                    button: true,
                                    closeModal: false
                                })
                                window.location = R_url;
                            }
                            else {
                                swal({
                                    icon: "warning",
                                    title: response.responseText,
                                    button: true,
                                    closeModal: false
                                })

                            }
                        });


                //}).error(function (response) {

                //    swal({
                //        icon: "warning",
                //        title: "Session Timeout",
                //        button: true,
                //        closeModal: false
                //    })
                //    window.location = R_url;

                //});
                }


                else {
                    //$(".custom_pre_error").text(response.msg);
                    $("#details1").empty()
                    $('#datatable-live tbody').empty();
                    $('.loading1').hide();
                    $('#nodata').show();
                    var newid = bar_id + " > *";
                    d3.selectAll(newid).remove();
                    var progressData = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    var progressData_avail = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    var progressData_per = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    var progressData_quality = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    //trial chart for progress bar
                    update(progressData);
                    update1(progressData_avail);
                    update2(progressData_per);
                    update3(progressData_quality);
                    createdonut()
                    drawpie(0)
                }
            }).error(function (response) {
                if (response.status == "401") {
                    swal({
                        icon: "warning",
                        title: "Session Timeout",
                        button: true,
                        closeModal: false
                    })
                    window.location = R_url;
                }
                else {
                    swal({
                        icon: "warning",
                        title: response.responseText,
                        button: true,
                        closeModal: false
                    })

                }
            });

         setTimeout(getqualitylive_table, 120000);
    }
    function previous_hour(machine,prehr,shift) {

                 var vars = [], hash;
                    var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
                for (var i = 0; i < hashes.length; i++) {
                    hash = hashes[i].split('?');
                    vars.push(hash[0]);
                    vars[hash[0]] = hash[1];
                }


                var today = new Date();
                var date = today.getFullYear() + '-' + (today.getMonth() + 1) + '-' + today.getDate();
                var time = today.getHours() + ":" + today.getMinutes() + ":" + today.getSeconds();

                var starttime = today.getHours() + ":00:00.00";
                var st = date + ' ' + starttime;
                var dateTime = date + ' ' + prehr +":00:00.00";
                 //var st = '2020-07-03 10:00:00.000';
                 //var dateTime = '2020-07-03 10:40:00.000';
                //var ft = response.data.Table[0].StartTime;
                var cols = '';
                var myData = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                         "linecode": '@Session["LineCode"]',
                         "Fromtime": st,
                         "Totime": dateTime,
                    "Machinecode": machine,
                    "Shift":shift
         };
         //alert(dateTime)
          var R_url = '@Url.Action("Login", "Main")';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

         var URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
    var HURL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';


            //$.ajax({
            //    type: 'Get',
            //    url: HURL + 'api/UserSettings/GetEmployee',
            //    headers: {
            //        Authorization: 'Bearer ' + user1
            //    },
            //    dataType: 'json'
            //}).success(function (response) {
         $.ajax({
             type: 'POST',
             url: HURL + 'api/Firstpassyield/GetPrevHourlysummarydata',
             data: myData,
               headers: {
                    Authorization: 'Bearer ' + user1
                },
             dataType: 'json'
         }).success(function (response) {

            if (response.data.length != 0) {
                document.getElementById("previous_data").style.display = "block";
                document.getElementById("previous_nodata").style.display = "none";
                $('#ok_mcno').text(machine);
                $('#ok_Line').text('@Session["LineCode"]');


                if ($.fn.DataTable.isDataTable('#datatable-previousdetails')) {
                    $('#datatable-previousdetails').DataTable().clear().draw();
                }

                if ($.fn.DataTable.isDataTable('#datatable-previousdetails')) {
                    $('#datatable-previousdetails').DataTable().destroy();
                }

                for (var i = 0; i < response.data.Table.length; i++) {

                  // var num=i+1
                    var newRow = $("<tr>");
                    var cols = '';
                    var sc = '';
                    //var cols = $("<tr>");
                    cols += "<td> " + response.data.Table[i].Date + "</td> ";
                    cols += "<td> " + response.data.Table[i].Variant_code + "</td> ";
                    cols += "<td> " + response.data.Table[i].Hour + "</td> ";
                    cols += "<td> " + response.data.Table[i].OK_Parts + "</td> ";
                    cols += "<td> " + response.data.Table[i].NOK_Parts + "</td> ";
                    cols += "<td> " + response.data.Table[i].Rework_Parts + "</td> ";



                    cols += "</tr>"
                    //cols += "</tr>";
                    newRow.append(cols);
                    $("#previous_details").append(newRow);

                    //okparts_datatable.row.add([num, response.data.Table[i].time_stamp, response.data.Table[i].count, response.data.Table[i]["Produced Qty"]]).draw();
                }



                var okparts_table1 = $('#datatable-previousdetails').DataTable({

                    "responsive": true,
                    "autoWidth": false,
                    "searching": false,
                    dom: 'frtip',

                });
                    $("#mymodal_okparts").modal('show');
            }


            else {
                //$(".custom_pre_error").text(response.msg);
                $("#previous_details").empty();
                    $("#mymodal_previoussummary").modal('show');
                document.getElementById("previous_data").style.display = "none";
                document.getElementById("previous_nodata").style.display = "block";
            }


         }).error(function (response) {
            // alert(response.status)
             cols += "<h4>No data available </h4>";
             //$("#variantsummary").html(cols);
             $("#mymodal_previoussummary").modal('show');
         }).error(function (response) {
             if (response.status == "401") {
                 swal({
                     icon: "warning",
                     title: "Session Timeout",
                     button: true,
                     closeModal: false
                 })
                 window.location = R_url;
             }
             else {
                 swal({
                     icon: "warning",
                     title: response.responseText,
                     button: true,
                     closeModal: false
                 })

             }
            });
    }

    function getdataonclick() {

              window.count_loading = window.count_loading + 1;
        window.avail_downtime = 0;
        window.target_cycletime = 0;
        window.rej_percentage = 0;
        window.rework_percentage = 0;
        window.avail_prodloss = 0;
        window.alarm_reason = "";
        window.loss_reason=""
        var target_ct = 0.00;
        if ( window.count_loading == 1) {
            //$('.loading1').show();
            $('#nodata').hide();
        }
       // $("#details1").empty();
      console.log('called')
            var vars = [], hash;
            var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
            for (var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('?');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
        }
        @*window.plant_table=@Session["CompanyCode"];*@
         //$('#updated_time').text('');
        var variant_target = '';
        var shift_target = '';
        var actual = 0;
        var firstpass = 0;
        var myData = {
                "CompanyCode": '@Session["CompanyCode"]',
                 "PlantCode": '@Session["PlantCode"]',
                 //"Linecode": vars[0],
                 "Linecode": line_name
        };
        var alarm_reason = '';
        //var myTable = $('#datatable-live').DataTable();
        //myTable.clear()

          var live_URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';
        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        // $.ajax({
        //    type: 'Post',
        //    url: live_URL + 'api/OEE/GetEmployee',
        //    headers: {
        //        Authorization: 'Bearer ' + user1
        //    },
        //    dataType: 'json'
        //}).success(function (response) {


            $.ajax({
                type: 'POST',
                url: live_URL + 'api/Quality/GetQualitylivedata',
                headers: {
                   Authorization: 'Bearer ' + user1
                },
                //async:false,
                data: myData,
                dataType: 'json',
                cache:'false'
            }).success(function (response) {




                if (response.data.length != 0) {
                    $('#nodata').hide();
                    var arr = [];

                    if ($.fn.DataTable.isDataTable('#datatable-live')) {
                        $('#datatable-live').DataTable().destroy();
                    }


                    $('.loading1').hide();
                    variant_target = response.data.Table[0].Variant_Code;
                    window.variant = response.data.Table[0].Variant_Code;
                    shift_target = response.data.Table[0].ShiftID
                    $('#line').text('@Session["LineCode"]')
                    $('#live_time').text('Live Time :' + new Date().toLocaleString());
                    $('#shift').text(response.data.Table[0].ShiftID)
                    window.shift = response.data.Table[0].ShiftID;
                    $('#ok_shift').text(response.data.Table[0].ShiftID)
                    $('#nok_shift').text(response.data.Table[0].ShiftID)
                    $('.shift').text(response.data.Table[0].ShiftID)

                    $('#plant').text(response.data.Table[0].PlantCode)
                    $('.updated_time').text(new Date(response.data.Table[0].time_stamp).toLocaleString());
                    $('#lt_update').text(new Date(response.data.Table[0].time_stamp).toLocaleString());
                    $("#details1").empty();
                    $("#datatable-live tbody").empty();
                    //$("#details1").empty();
                  //  d3.selectAll("#status_bar > *").remove();
                    //  $('#updated_time').text(response.data.Table[0].time_stamp);

                    for (var i = 0; i < response.data.Table.length; i++) {
                        arr = response.data.Table[i].Asset_ID_Name.split('-');
                        //console.log('split machine' + arr[1])
                         var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                         var myData_mcavail = {
                             "CompanyCode": '@Session["CompanyCode"]',
                             "PlantCode": '@Session["PlantCode"]',
                             "Line_Code": '@Session["LineCode"]',
                             "Machine_Code": response.data.Table[i].AssetID
                        };
                       // alert(response.data.Table[i].AssetID)

                        $.ajax({
                            type: 'POST',
                            data: myData_mcavail,
                            url: live_URL + 'api/Availability/GetAvllivedata_mcwise',
                            headers: {
                                Authorization: 'Bearer ' + user1
                            },

                            dataType: 'json'
                        }).success(function (response_mc) {
                            if (response_mc.data.length != 0) {
                                //alert("inside")

                                for (var i = 0; i < response_mc.data.length; i++) {
                                    console.log("tolltip data"+response_mc.data[i].DownTime)
                                    window.avail_downtime = response_mc.data[i].DownTime
                                    window.avail_prodloss = response.data[i].LossTime;
                                }

                            }
                            else {

                            }
                        }).error(function (response) {

                            });

                        //to get stoppage
                         var myData_stoppage = {
                             "CompanyCode": '@Session["CompanyCode"]',
                             "PlantCode": '@Session["PlantCode"]',
                             "Linecode": response.data.Table[i].Line_Code,
                             "Machine_Code": response.data.Table[i].AssetID,
                             "Variantcode": response.data.Table[i].Variant_Code,
                             "ShiftID": response.data.Table[i].ShiftID
                         };
                        $.ajax({
                            type: 'POST',
                            data: myData_stoppage,
                            url: live_URL + 'api/Quality/GetStoppageReason',
                            headers: {
                                Authorization: 'Bearer ' + user1
                            },
                            async: false,
                            dataType: 'json'
                        }).success(function (response_mc) {
                            if (response_mc.data.length != 0) {
                                //alert("inside")
                                console.log("stoppage" + JSON.stringify(response_mc.data.Table[0]))

                                if (response_mc.data.Table[0]["Live_Alarm"] == 0 || response_mc.data.Table[0]["Live_Alarm"] == null) {

                                }
                                else {

                                    console.log(response_mc.data.Table[0]["Live_Alarm"])
                                    window.alarm_reason ="Alarm:"+ response_mc.data.Table[0]["Live_Alarm"]
                                }
                                if (response_mc.data.Table[0]["Live_Loss"] == 0 || response_mc.data.Table[0]["Live_Alarm"] == null) {

                                }
                                else {
                                    console.log(response_mc.data.Table[0]["Live_Loss"])
                                    window.loss_reason ="Loss:"+ response_mc.data.Table[0]["Live_Loss"]
                                }


                            }
                            else {

                            }
                        }).error(function (response) {

                        });



                        // to get target cycletime value

                        window.rej_percentage = ((response.data.Table[i].Scrap / (response.data.Table[i].Scrap + response.data.Table[i].OkParts + response.data.Table[i].ReworkParts)) * 100).toFixed(2)
                        if (window.rej_percentage == 'NaN') {
                            window.rej_percentage = 0.00.toFixed(2)
                        }


                        window.rework_percentage = ((response.data.Table[i].ReworkParts / (response.data.Table[i].ReworkParts + response.data.Table[i].OkParts + response.data.Table[i].Scrap)) * 100).toFixed(2)
                        if (window.rework_percentage == 'NaN') {
                            window.rework_percentage = 0.00.toFixed(2)
                        }


                        var newRow = $("<tr>");
                        var cols = '';
                        var cols1 = '';
                        var sc = '';
                        var sc_text = '';
                        var oee_col = ''
                        var avail_col = ''
                        var perf_col = ''
                        var quality_col=''
                        var num = i + 1;
                        var target_ct_data = 0;
                        var target_manual_ct = 0;
                        var target_auto_ct = 0;
                        //alert(gettarget_ct(vars[0], response.data.Table[i].AssetID, response.data.Table[i].Variant_Code))
                        //var cols = $("<tr>");
                        gettarget_ct('@Session["LineCode"]', response.data.Table[i].AssetID, response.data.Table[i].Variant_Code).then(function (response) {

                            target_ct_data = response.data.Table[0].cycletime;
                            target_manual_ct = response.data.Table[0].auto_cycletime;
                            target_auto_ct = response.data.Table[0].manual_cycletime;

                        })
                        cols += "<td style='text-align:center;'> " + response.data.Table[i].Batch_code + "</td> ";
                        cols += "<td><table><tr><td>" + response.data.Table[i].Asset_ID_Name + "</td></tr><tr><td>" + response.data.Table[i].VariantName+"_"+response.data.Table[i].Variant_Code+"</td></tr></table></td>";
                       // cols += "<td bgcolor='#A9A9A9' style='text-align:center;'> " + response.data.Table[i].AssetID+ "</td> ";
                        cols += "<td style='text-align:center;'> " + response.data.Table[i].OperatorID + "</td> ";
                        console.log('refresh check'+response.data.Table[i].OkParts)
                        //alert(response.data.Table[i].Machine_Status)
                        if (response.data.Table[i].Machine_Status == "0" ) {
                            //alert(response.data.Table[i].AssetID)
                            sc = 'circle'

                            sc_text = 'Machine Stopped'
                        }
                        else if (response.data.Table[i].Machine_Status == "1") {
                            sc = 'circle_g'
                            sc_text = 'Machine Running'
                        }
                        else if (response.data.Table[i].Machine_Status == "3" || response.data.Table[i].Machine_Status == "2") {
                            //alert("yellow")
                            sc = 'circle_y'
                            sc_text = 'M / c Running with error'
                        }
                        else if (response.data.Table[i].Machine_Status == "5") {
                            sc = 'circle_b'
                            sc_text = 'M/c disconnected/power off'
                        }
                        else if (response.data.Table[i].Machine_Status == "4") {
                            sc = 'circle_grey'
                            sc_text = 'Break'
                        }
                        else {
                            sc = 'circle_y'
                            sc_text = 'Break'
                        }

                        if (parseInt(response.data.Table[i].OEE) > 75) {
                            oee_col='green'
                        }
                        if (parseInt(response.data.Table[i].OEE) > 25 && parseInt(response.data.Table[i].OEE) <76) {
                            oee_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].OEE) < 26) {
                            oee_col = 'red'
                        }
                        if (parseInt(response.data.Table[i].Availability) > 75) {
                            avail_col = 'green'
                        }
                        if (parseInt(response.data.Table[i].Availability) > 25 && parseInt(response.data.Table[i].Availability) <76 ) {
                            avail_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].Availability) < 26) {
                            avail_col = 'red'
                        }
                        if (parseInt(response.data.Table[i].Performance) > 75) {
                            perf_col = 'green'
                        }
                        if (parseInt(response.data.Table[i].Performance) > 25 && parseInt(response.data.Table[i].Performance) <76) {
                            perf_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].Performance) < 26) {
                            perf_col = 'red'
                        }
                        if (parseInt(response.data.Table[i].Quality) > 75) {
                            quality_col = 'green'
                        }
                            if (parseInt(response.data.Table[i].Quality) > 25 && parseInt(response.data.Table[i].Quality) <76) {
                            quality_col = 'yellow'
                        }
                        if (parseInt(response.data.Table[i].Quality) < 26) {
                            quality_col = 'red'
                        }
                       // alert(sc + response.data.Table[i].AssetID)
                        cols1 += "<strong style='float:left;'>Downtime</strong><strong style='padding-left:27%'>:</strong><strong style='float:right;'>" + window.avail_downtime + "mins</strong>";
                        cols1 += "<br />";
                        cols1 += "<strong style='float:left'>Production Loss</strong><strong style='padding-left:13.5%'>:</strong><strong style='float:right;'>" + window.avail_prodloss + "mins</strong>";

                            cols += "<td style='cursor:pointer;'  title='" + window.loss_reason + window.alarm_reason + "' onclick=mc_status('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "')><p style=display:none>" + sc_text + "</p><span  class=" + sc + " ></span></td>";



                        //cols += "<td bgcolor='#4A708B' id='var_list' style='text-align:center;'> " + response.data.Table[i].Variant_Code + "</td> ";
                        //cols += "<td bgcolor='#808080' style='cursor:pointer;text-align:center;'  data-tooltip='Target Cycletime:" + target_ct_data + "secs\n Manual Target Cycletime: " + target_manual_ct + " secs\n Auto Target Cycletime:" + target_auto_ct + "secs '  onclick=mc_status1('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "'); > " + response.data.Table[i].CycleTime + "</td> ";
                        cols += "<td bgcolor='#808080' style='cursor:pointer;text-align:center;'  title='Target Cycletime:" + target_ct_data + "secs\n Manual Target Cycletime: " + target_manual_ct + " secs\n Auto Target Cycletime:" + target_auto_ct + "secs '  onclick=mc_status1('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "'); > " + response.data.Table[i].CycleTime + "</td> ";
                        cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>OK</td><td>Scrap</td><td>Rwrk</td></tr><tr><td bgcolor='#3CB371' style='cursor:pointer;text-align:center;' onclick=okparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].OkParts + "</td><td bgcolor='#DC143C' style='cursor:pointer;text-align:center;' onclick=nokparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].Scrap + "</td><td>" + response.data.Table[i].ReworkParts+"</td></tr></table></td>"
                        //cols += "<td bgcolor='#3CB371' style='cursor:pointer;text-align:center;' onclick=okparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].OkParts + "</td> ";
                        //console.log('checkokparts' + cols)
                        cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>U</td><td>D</td><td>L</td><td>B</td></tr><tr><td style='text-align:center;' > " + response.data.Table[i].UpTime + "</td><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td><td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> <td>" + response.data.Table[i].BreakTime + "</td></tr></table></td>"
                        //cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>U/T</td><td>D/T</td><td>L/T</td><td>B/T<td></tr><tr><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].UpTime + "</td><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td><td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> <td>" + response.data.Table[i].LossTime + "</td></tr></table></td>"
                        //cols += "<td bgcolor='#DC143C' style='cursor:pointer;text-align:center;' onclick=nokparts_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].Scrap + "</td> ";
                        //cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>U/T</td><td>D/T</td><td>L/T</td><td>B/T<td></tr><tr><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].UpTime + "</td><td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td><td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> <td>" + response.data.Table[i].LossTime + "</td></tr></table></td>"
                        //cols += "<td style='cursor:pointer;text-align:center;' onclick=downtime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].DownTime + "</td> ";
                        //cols += "<td style='cursor:pointer;text-align:center;' onclick=losstime_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + response.data.Table[i].LossTime + "</td> ";
                        // cols += "<td style='cursor:pointer;text-align:center;' onclick=rejection_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + window.rej_percentage + "</td> ";
                        cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>Rej%</td><td>R%</td></tr><tr><td style='cursor:pointer;text-align:center;' onclick=rejection_show('" + response.data.Table[i].AssetID + "','" + response.data.Table[i].ShiftID + "','" + response.data.Table[i].Variant_Code + "');> " + window.rej_percentage + "</td><td>" + window.rework_percentage + "</td></tr></table></td>";
                        cols += "<td bgcolor='" + oee_col + "' style='text-align:center;'> " + response.data.Table[i].OEE + "<table border='1' style='border-collapse:collapse'><tr><td>A</td><td>P</td><td>Q</td></tr><tr><td> " + response.data.Table[i].Availability + "</td><td> " + response.data.Table[i].Performance + "</td><td> " + response.data.Table[i].Quality + "</td></tr></table></td>";
                        //cols += "<td bgcolor='#B4CDCD' style='text-align:center;'   data-tooltip='Downtime :" + window.avail_downtime + "secs \n Production Loss:" + window.avail_prodloss + "secs'> " + response.data.Table[i].Availability +  "</td> ";
                        //cols += "<td bgcolor='#B4CDCD' style='text-align:center;'> " + response.data.Table[i].Performance + "</td> ";
                        //cols += "<td bgcolor='#B4CDCD' style='text-align:center;'> " + response.data.Table[i].Quality + "</td> ";

                       // cols += "<td><table border='1' style='border-collapse:collapse'><tr><td>A</td><td>P</td><td>Q</td></tr><tr><td> " + response.data.Table[i].Availability + "</td><td> " + response.data.Table[i].Performance + "</td><td> " + response.data.Table[i].Quality +"</td></tr></table></td>"
                        cols += "</tr>"


                       // cols +="<table><tr><td>A</td><td>P</td><td>Q</td></tr></table>"
                        //cols += "</tr>";
                        newRow.append(cols);

                        //$("#details1").append('');


                        $("#details1").append(newRow);
                        $("#mcname"+i).text(response.data.Table[i].Asset_ID_Name)

                        //for dynamic status bar
                        var cols = '';
                       //cols += "<div  id='statuschart" + i + "' >";
                        //var bar_id = '#statuschart' + i;


                //}).error(function (response) {

                //    swal({
                //        icon: "warning",
                //        title: "Session Timeout",
                //        button: true,
                //        closeModal: false
                //    })
                //    window.location = R_url;

                //});

                    }


                    $('#datatable-live').dataTable({
                        //"dom": '<"col-sm-12"f>t',
                        "responsive": true,
                        "autoWidth": false,
                        "pageLength": 5,
                        "bLengthChange": true,
                        "bFilter": true,
                        //"bInfo": false,
                        "scrollX":false


                   // pagination();

                    });
                    //$('#datatable-live').simplePagination({

                    //    //limit: 5,
                    //    //rowDisplayStyle: 'block',
                    //    //activePage: 0,
                    //    //rows: []

                    //});
                     var bar_id = '#ulelement' + response.data.Table[0].AssetID + '-'
                       // alert(bar_id)
                        //var new_bar_id = 'ulelement' + response.data.Table[i].AssetID
                        //alert('check123'+document.getElementById(new_bar_id).innerHTML)
                       // $("#status_bar").html(cols);
                       // alert("machine for data"+response.data.Table[i].AssetID);
                     var data_bargraph = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Linecode": line_name,
                        "ShiftID": shift_target,
                         "Variant": variant_target,
                         "Machine_Code": response.data.Table[0].AssetID
                        };
                        var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

                    $.ajax({
                        type: 'POST',
                        url: live_URL + 'api/Quality/Getmachine_status',
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                   // async:false,
                        data: data_bargraph,
                        dataType: 'json'
                    }).success(function (response) {

                        var test22 = '[{"Table":' + JSON.stringify(response.data) + '}]'
                        var obj2 = JSON.parse(test22)
                        console.log("testdata1" + test22)

                       // d3.selectAll("#status_bar > *").remove();
                        //status bar
                        var width_t = 500
                        var chart_t = d3.timeline();
                        console.log('call2')
                        console.log('check bar' + document.getElementById('statuschart0'))
                        console.log('bar id' + bar_id)
                      //  alert(bar_id)
                        var newid = bar_id + " > *";
                        d3.selectAll(newid).remove();
                        //d3.select('#ulelementM1').append("svg").attr("width", width_t)
                        //    .datum(obj2).call(chart_t);
                        d3.select(bar_id).append("svg").attr("width", width_t)
                            .datum(obj2).call(chart_t);



                    }).error(function (response) {
                        if (response.status == "401") {
                            swal({
                                icon: "warning",
                                title: "Session Timeout",
                                button: true,
                                closeModal: false
                            })
                            window.location = R_url;
                        }
                        else {
                            swal({
                                icon: "warning",
                                title: response.responseText,
                                button: true,
                                closeModal: false
                            })

                        }
                    });

                    timer_upd = 30;


                    //for progress chart
                    var oee_d = 0;
                    var perf_d = 0;
                    var availability_d = 0;
                    var quality_d = 0

                    for (var i = 0; i < response.data.Table.length; i++) {
                        var numb_array = [];
                        var mc_high_no = response.data.Table[i].AssetID.match(/(\d+)/)
                        numb_array.push(parseInt(mc_high_no));
                        console.log(numb_array)
                    }

                    var max = numb_array.reduce(function (a, b) {
                        return Math.max(a, b);
                    });
                    var max_station = 'M' + max;
                    for (var i = 0; i < response.data.Table.length; i++) {
                        if (response.data.Table[i].AssetID == max_station) {
                            oee_d = response.data.Table[i].OEE
                            perf_d = response.data.Table[i].Performance
                            availability_d = response.data.Table[i].Availability
                            quality_d = response.data.Table[i].Quality
                            actual = response.data.Table[i].OkParts
                            firstpass = response.data.Table[i].Firstpassyeild.toFixed(2)

                        }
                    }
                    console.log(oee_d)
                    console.log(availability_d)
                    console.log(perf_d)
                    console.log(quality_d)
                    var id = "#progress_chart1"
                    // var dId = d3.select("#progress_chart1");
                    var progressData = [{
                        "skill": "OEE",
                        "progress": oee_d
                    }];
                    var progressData_avail = [{
                        "skill": "OEE",
                        "progress": availability_d
                    }];
                    var progressData_per = [{
                        "skill": "OEE",
                        "progress": perf_d
                    }];
                    var progressData_quality = [{
                        "skill": "OEE",
                        "progress": quality_d
                    }];
                    //trial chart for progress bar
                    update(progressData);
                    update1(progressData_avail);
                    update2(progressData_per);
                    update3(progressData_quality);
                    $('#firstpass').text(firstpass+'%')


                    //actual and target
                    var data_target = {
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Linecode": line_name,
                        "ShiftID": shift_target,
                        "Variant": variant_target
                    };
                    var R_url = '@Url.Action("Login", "Main")';
                   var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
                //   $.ajax({
                //        type: 'Post',
                //        url: live_URL + 'api/OEE/GetEmployee',
                //        headers: {
                //                Authorization: 'Bearer ' + user1
                //        },
                //        dataType: 'json'
                //}).success(function (response) {
                    $.ajax({
                        type: 'POST',
                        url: live_URL + 'api/Quality/Gettarget_count',
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        data: data_target,
                        dataType: 'json'
                    }).success(function (response) {
                        console.log("target" + response.data)
                        $('#planned_quantity').text(response.data)
                        $('#actual_quantity').text(actual)
                        if (parseInt(response.data) > 0) {
                            var percentage_target = parseInt((actual / response.data) * 100)
                        }
                        else {
                            var percentage_target = 0;
                        }
                       // var percentage_target = parseInt((actual / response.data) * 100)
                        createdonut()
                        drawpie(percentage_target)


                        }).error(function (response) {
                            if (response.status == "401") {
                                swal({
                                    icon: "warning",
                                    title: "Session Timeout",
                                    button: true,
                                    closeModal: false
                                })
                                window.location = R_url;
                            }
                            else {
                                swal({
                                    icon: "warning",
                                    title: response.responseText,
                                    button: true,
                                    closeModal: false
                                })

                            }
                        });


                //}).error(function (response) {

                //    swal({
                //        icon: "warning",
                //        title: "Session Timeout",
                //        button: true,
                //        closeModal: false
                //    })
                //    window.location = R_url;

                //});
                }


                else {
                    //$(".custom_pre_error").text(response.msg);
                    $("#details1").empty()
                    $('#datatable-live tbody').empty();
                    $('.loading1').hide();
                    $('#nodata').show();
                    var newid = bar_id + " > *";
                    d3.selectAll(newid).remove();
                    var progressData = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    var progressData_avail = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    var progressData_per = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    var progressData_quality = [{
                        "skill": "OEE",
                        "progress": 0
                    }];
                    //trial chart for progress bar
                    update(progressData);
                    update1(progressData_avail);
                    update2(progressData_per);
                    update3(progressData_quality);
                    createdonut()
                    drawpie(0)
                }
            }).error(function (response) {
                if (response.status == "401") {
                    swal({
                        icon: "warning",
                        title: "Session Timeout",
                        button: true,
                        closeModal: false
                    })
                    window.location = R_url;
                }
                else {
                    swal({
                        icon: "warning",
                        title: response.responseText,
                        button: true,
                        closeModal: false
                    })

                }
            });


    }
</script>
<script>
    function showorhide() {
        var x = document.getElementById("showorhide");
        if (x.style.display === "none") {
            x.style.display = "block";

        } else {
            x.style.display = "none";
        }
    }
    function showorhide1() {
        var x = document.getElementById("showorhide1");
        if (x.style.display === "none") {
            x.style.display = "block";

        } else {
            x.style.display = "none";
        }
    }
    $('body').on('mouseenter', '.tableContent', function () {
        if ($(this).attr('data-toggle') != 'popover') {
            $(this).popover({
                container: 'body',
                placement: 'left',
                trigger: 'hover'
            }).popover('show');
        }
    });
</script>
<script>
    //for 3d pie chart

    !function () {
        var Donut3D = {};

        function pieTop(d, rx, ry, ir) {
            if (d.endAngle - d.startAngle == 0) return "M 0 0";
            var sx = rx * Math.cos(d.startAngle),
                sy = ry * Math.sin(d.startAngle),
                ex = rx * Math.cos(d.endAngle),
                ey = ry * Math.sin(d.endAngle);

            var ret = [];
            ret.push("M", sx, sy, "A", rx, ry, "0", (d.endAngle - d.startAngle > Math.PI ? 1 : 0), "1", ex, ey, "L", ir * ex, ir * ey);
            ret.push("A", ir * rx, ir * ry, "0", (d.endAngle - d.startAngle > Math.PI ? 1 : 0), "0", ir * sx, ir * sy, "z");
            return ret.join(" ");
        }

        function pieOuter(d, rx, ry, h) {
            var startAngle = (d.startAngle > Math.PI ? Math.PI : d.startAngle);
            var endAngle = (d.endAngle > Math.PI ? Math.PI : d.endAngle);

            var sx = rx * Math.cos(startAngle),
                sy = ry * Math.sin(startAngle),
                ex = rx * Math.cos(endAngle),
                ey = ry * Math.sin(endAngle);

            var ret = [];
            ret.push("M", sx, h + sy, "A", rx, ry, "0 0 1", ex, h + ey, "L", ex, ey, "A", rx, ry, "0 0 0", sx, sy, "z");
            return ret.join(" ");
        }

        function pieInner(d, rx, ry, h, ir) {
            var startAngle = (d.startAngle < Math.PI ? Math.PI : d.startAngle);
            var endAngle = (d.endAngle < Math.PI ? Math.PI : d.endAngle);

            var sx = ir * rx * Math.cos(startAngle),
                sy = ir * ry * Math.sin(startAngle),
                ex = ir * rx * Math.cos(endAngle),
                ey = ir * ry * Math.sin(endAngle);

            var ret = [];
            ret.push("M", sx, sy, "A", ir * rx, ir * ry, "0 0 1", ex, ey, "L", ex, h + ey, "A", ir * rx, ir * ry, "0 0 0", sx, h + sy, "z");
            return ret.join(" ");
        }

        function getPercent(d) {
            return (d.endAngle - d.startAngle > 0.2 ?
                Math.round(1000 * (d.endAngle - d.startAngle) / (Math.PI * 2)) / 10 + '%' : '');
        }

        Donut3D.transition = function (id, data, rx, ry, h, ir) {
            function arcTweenInner(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return pieInner(i(t), rx + 0.5, ry + 0.5, h, ir); };
            }
            function arcTweenTop(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return pieTop(i(t), rx, ry, ir); };
            }
            function arcTweenOuter(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return pieOuter(i(t), rx - .5, ry - .5, h); };
            }
            function textTweenX(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return 0.6 * rx * Math.cos(0.5 * (i(t).startAngle + i(t).endAngle)); };
            }
            function textTweenY(a) {
                var i = d3.interpolate(this._current, a);
                this._current = i(0);
                return function (t) { return 0.6 * rx * Math.sin(0.5 * (i(t).startAngle + i(t).endAngle)); };
            }

            var _data = d3.pie().sort(null).value(function (d) { return d.value; })(data);

            d3.select("#" + id).selectAll(".innerSlice").data(_data)
                .transition().duration(750).attrTween("d", arcTweenInner);

            d3.select("#" + id).selectAll(".topSlice").data(_data)
                .transition().duration(750).attrTween("d", arcTweenTop);

            d3.select("#" + id).selectAll(".outerSlice").data(_data)
                .transition().duration(750).attrTween("d", arcTweenOuter);

            d3.select("#" + id).selectAll(".percent").data(_data).transition().duration(750)
                .attrTween("x", textTweenX).attrTween("y", textTweenY).text(getPercent);
        }

        Donut3D.draw = function (id, data, x /*center x*/, y/*center y*/,
            rx/*radius x*/, ry/*radius y*/, h/*height*/, ir/*inner radius*/, svg_pie) {

            var _data = d3.pie().sort(null).value(function (d) { return d.value; })(data);

            var slices = d3.select("#" + id).append("g").attr("transform", "translate(" + x + "," + y + ")")
                .attr("class", "slices");

            slices.selectAll(".innerSlice").data(_data).enter().append("path").attr("class", "innerSlice")
                .style("fill", function (d) { return d3.hsl(d.data.color).darker(0.7); })
                .attr("d", function (d) { return pieInner(d, rx + 0.5, ry + 0.5, h, ir); })
                .each(function (d) { this._current = d; });


            slices.selectAll(".topSlice").data(_data).enter().append("path").attr("class", "topSlice")
                .style("fill", function (d) { return d.data.color; })

                .style("stroke", function (d) { return d.data.color; })
                .attr("d", function (d) { return pieTop(d, rx, ry, ir); })
                .each(function (d) { this._current = d; });

            slices.selectAll(".outerSlice").data(_data).enter().append("path").attr("class", "outerSlice")
                .style("fill", function (d) { return d3.hsl(d.data.color).darker(0.7); })
                .attr("d", function (d) { return pieOuter(d, rx - .5, ry - .5, h); })
                .each(function (d) { this._current = d; })



            slices.selectAll(".percent").data(_data).enter().append("text").attr("class", "percent")
                .attr("x", function (d) { return 0.6 * rx * Math.cos(0.5 * (d.startAngle + d.endAngle)); })
                .attr("y", function (d) { return 0.6 * ry * Math.sin(0.5 * (d.startAngle + d.endAngle)); })
                .text(getPercent).each(function (d) { this._current = d; });

            var legendG = svg_pie.selectAll(".legend") // note appending it to mySvg and not svg to make positioning easier
                .data(_data)
                .enter().append("g")
                .attr("transform", function (d, i) {
                    return "translate(" + (x + rx) + "," + (i * 15 + 30) + ")"; // place each legend on the right and bump each one down 15 pixels
                })
                .attr("class", "legend");

            legendG.append("rect") // make a matching color rect
                .attr("width", 10)
                .attr("height", 10)
                .attr("fill", function (d, i) {

                    return d.data.color;
                });

            legendG.append("text") // add the text
                .text(function (d) {

                    return d.data.label;
                })
                .style("font-size", 12)
                .attr("y", 10)
                .attr("x", 11);

        }

        this.Donut3D = Donut3D;

        //bullet

        d3.bullet = function () {
            var orient = "left", // TODO top & bottom
                reverse = false,
                duration = 0,
                ranges = bulletRanges,
                markers = bulletMarkers,
                measures = bulletMeasures,
                width = 380, //380
                height = 30, //30
                tickFormat = d3.format(",");

            // For each small multiple…
            function bullet(g) {
                g.each(function (d, i) {
                    var rangez = ranges.call(this, d, i).slice().sort(d3.descending),
                        markerz = markers.call(this, d, i).slice().sort(d3.descending),
                        measurez = measures.call(this, d, i).slice().sort(d3.descending),
                        g = d3.select(this);

                    // Compute the new x-scale.
                    var x1 = d3.scaleLinear()
                        .domain([0, Math.max(rangez[0], markerz[0], measurez[0])])
                        .range(reverse ? [width, 0] : [0, width]);

                    // Retrieve the old x-scale, if this is an update.
                    var x0 = this.__chart__ || d3.scaleLinear()
                        .domain([0, Infinity])
                        .range(x1.range());

                    // Stash the new scale.
                    this.__chart__ = x1;

                    // Derive width-scales from the x-scales.
                    var w0 = bulletWidth(x0),
                        w1 = bulletWidth(x1);

                    // Update the range rects.
                    var range = g.selectAll("rect.range")
                        .data(rangez);

                    range.enter().append("rect")
                        .attr("class", function (d, i) { return "range s" + i; })
                        .attr("width", w0)
                        .attr("height", height)
                        .attr("x", reverse ? x0 : 0)
                        .transition()
                        .duration(duration)
                        .attr("width", w1)
                        .attr("x", reverse ? x1 : 0);

                    range.transition()
                        .duration(duration)
                        .attr("x", reverse ? x1 : 0)
                        .attr("width", w1)
                        .attr("height", height);

                    // Update the measure rects.
                    var measure = g.selectAll("rect.measure")
                        .data(measurez);

                    measure.enter().append("rect")
                        .attr("class", function (d, i) { return "measure s" + i; })
                        .attr("width", w0)
                        .attr("height", height / 3)
                        .attr("x", reverse ? x0 : 0)
                        .attr("y", height / 3)
                        .transition()
                        .duration(duration)
                        .attr("width", w1)
                        .attr("x", reverse ? x1 : 0);

                    measure.transition()
                        .duration(duration)
                        .attr("width", w1)
                        .attr("height", height / 3)
                        .attr("x", reverse ? x1 : 0)
                        .attr("y", height / 3);

                    // Update the marker lines.
                    var marker = g.selectAll("line.marker")
                        .data(markerz);

                    marker.enter().append("line")
                        .attr("class", "marker")
                        .attr("x1", x0)
                        .attr("x2", x0)
                        .attr("y1", height / 6)
                        .attr("y2", height * 5 / 6)
                        .transition()
                        .duration(duration)
                        .attr("x1", x1)
                        .attr("x2", x1);

                    marker.transition()
                        .duration(duration)
                        .attr("x1", x1)
                        .attr("x2", x1)
                        .attr("y1", height / 6)
                        .attr("y2", height * 5 / 6);

                    // Compute the tick format.
                    var format = tickFormat || x1.tickFormat(8);

                    // Update the tick groups.
                    var tick = g.selectAll("g.tick")
                        .data(x1.ticks(8), function (d) {
                            return this.textContent || format(d);
                        });

                    // Initialize the ticks with the old scale, x0.
                    var tickEnter = tick.enter().append("g")
                        .attr("class", "tick")
                        .attr("transform", bulletTranslate(x0))
                        .style("opacity", 1e-6);

                    tickEnter.append("line")
                        .attr("y1", height)
                        .attr("y2", height * 7 / 6);

                    tickEnter.append("text")
                        .attr("text-anchor", "middle")
                        .attr("dy", "1em")
                        .attr("y", height * 7 / 6)
                        .text(format);

                    // Transition the entering ticks to the new scale, x1.
                    tickEnter.transition()
                        .duration(duration)
                        .attr("transform", bulletTranslate(x1))
                        .style("opacity", 1);

                    // Transition the updating ticks to the new scale, x1.
                    var tickUpdate = tick.transition()
                        .duration(duration)
                        .attr("transform", bulletTranslate(x1))
                        .style("opacity", 1);

                    tickUpdate.select("line")
                        .attr("y1", height)
                        .attr("y2", height * 7 / 6);

                    tickUpdate.select("text")
                        .attr("y", height * 7 / 6);

                    // Transition the exiting ticks to the new scale, x1.
                    tick.exit().transition()
                        .duration(duration)
                        .attr("transform", bulletTranslate(x1))
                        .style("opacity", 1e-6)
                        .remove();
                });
                //d3.timer.flush();
            }

            // left, right, top, bottom
            bullet.orient = function (x) {
                if (!arguments.length) return orient;
                orient = x;
                reverse = orient == "right" || orient == "bottom";
                return bullet;
            };

            // ranges (bad, satisfactory, good)
            bullet.ranges = function (x) {
                if (!arguments.length) return ranges;

                ranges = x;
                return bullet;
            };

            // markers (previous, goal)
            bullet.markers = function (x) {
                if (!arguments.length) return markers;
                markers = x;
                return bullet;
            };

            // measures (actual, forecast)
            bullet.measures = function (x) {
                if (!arguments.length) return measures;
                measures = x;
                return bullet;
            };

            bullet.width = function (x) {
                if (!arguments.length) return width;
                width = x;
                return bullet;
            };

            bullet.height = function (x) {
                if (!arguments.length) return height;
                height = x;
                return bullet;
            };

            bullet.tickFormat = function (x) {
                if (!arguments.length) return tickFormat;
                tickFormat = x;
                return bullet;
            };

            bullet.duration = function (x) {
                if (!arguments.length) return duration;
                duration = x;
                return bullet;
            };

            return bullet;
        };

        function bulletRanges(d) {
            return d.ranges;
        }

        function bulletMarkers(d) {
            return d.markers;
        }

        function bulletMeasures(d) {
            return d.measures;
        }

        function bulletTranslate(x) {
            return function (d) {
                return "translate(" + x(d) + ",0)";
            };
        }

        function bulletWidth(x) {
            var x0 = x(0);
            return function (d) {
                return Math.abs(x(d) - x0);
            };
        }

        //till this bullet


        //status bar-timeline

        d3.timeline = function () {
            var DISPLAY_TYPES = ["circle", "rect"];
            d3.select(".toolTip").remove();
            var tooltip = d3.select("body").append("div").attr("class", "toolTip");
            var hover = function () { },
                mouseover = function (d, index, datum) {
                    var status = '';
                    var alarm = '';
                    var loss = '';
                    var totalstatus = '';
                    if (datum.Table[index].color == 'green') {
                        status='M/C Running'
                    }
                    else if (datum.Table[index].color == 'red') {
                        status = 'M/c under Error'
                    }
                    else if (datum.Table[index].color == 'yellow') {
                        status = 'M/c is Idle/Loss'
                    }
                    else if (datum.Table[index].color == 'blue') {
                        status = 'PLC disconnect with Gateway'
                    }
                    else if (datum.Table[index].color == 'grey') {
                        status = 'Planned Break'
                    }

                    if (datum.Table[index].Alarm == "0") {
                        alarm = "No Alarm"
                    }
                    else {
                        alarm = datum.Table[index].Alarm
                    }
                    if (datum.Table[index].Loss == "0") {
                        loss = "No Loss"
                    }
                    else {
                        loss = datum.Table[index].Loss
                    }
                   //// var totalstatus = datum.Table[index].Loss + status
                   // if (datum.Table[index].Alarm != "0") {
                   //     totalstatus = 'Alarm:'+datum.Table[index].Alarm+','
                   // }
                   // if (datum.Table[index].Loss != "0") {
                   //     totalstatus = 'Loss:' + datum.Table[index].Loss + ','
                   // }

                   // var totalstatus='Alarm:'+alarm+'\r\n'+' Loss:'+loss+'\r\n'+'Machine status'+status
                    tooltip
                        .style("left", d3.event.pageX - 50 + "px")
                        .style("top", d3.event.pageY - 100 + "px")
                        .style("display", "inline-block")
                        .html(totalstatus+status +" ("+new Date(datum.Table[index].starting_time).toLocaleTimeString() + "-" + new Date(datum.Table[index].ending_time).toLocaleTimeString()+" )");
                        //.html(totalstatus + status + " (" + new Date(datum.Table[index].starting_time).toLocaleTimeString() + "-" + new Date(datum.Table[index].ending_time).toLocaleTimeString() + " )");


                },
                mouseout = function () { tooltip.style("display", "none"); },
                click = function () { },
                scroll = function () { },
                labelFunction = function (label) { return label; },
                navigateLeft = function () { },
                navigateRight = function () { },
                orient = "bottom",
                width = document.getElementById("status_bar").clientWidth,
                height = null,
                rowSeparatorsColor = null,
                backgroundColor = null,
                tickFormat = {
                    //format: d3.timeFormat("%I %p"),
                    format: d3.timeFormat("%H:%M"),
                    tickTime: d3.timeFormat.hours,
                    tickInterval: 1,
                    tickSize: 6,
                    tickValues: null
                },
                colorCycle = d3.scaleOrdinal(d3.schemeCategory10);
            colorPropertyName = null,
                display = "rect",
                beginning = 0,
                labelMargin = 0,
                ending = 0,
                margin = { left: 30, right: 30, top: 20, bottom: 30 },
                stacked = false,
                rotateTicks = false,
                timeIsRelative = false,
                fullLengthBackgrounds = true,
                itemHeight = 20,
                itemMargin = 5,
                navMargin = 60,
                showTimeAxis = true,
                showAxisTop = false,
                showTodayLine = false,
                timeAxisTick = false,
                timeAxisTickFormat = { stroke: "stroke-dasharray", spacing: "4 10" },
                showTodayFormat = { marginTop: 25, marginBottom: 0, width: 1, color: colorCycle },
                showBorderLine = false,
                showBorderFormat = { marginTop: 25, marginBottom: 0, width: 1, color: colorCycle },
                showAxisHeaderBackground = false,
                showAxisNav = false,
                showAxisCalendarYear = false,
                axisBgColor = "white",
                chartData = {}
                ;

            var appendTimeAxis = function (g, xAxis, yPosition) {

                if (showAxisHeaderBackground) { appendAxisHeaderBackground(g, 0, 0); }

                if (showAxisNav) { appendTimeAxisNav(g) };

                var axis = g.append("g")
                    .attr("class", "axis")
                    .attr("transform", "translate(" + 0 + "," + yPosition + ")")
                    .call(xAxis);
            };

            var appendTimeAxisCalendarYear = function (nav) {
                var calendarLabel = beginning.getFullYear();

                if (beginning.getFullYear() != ending.getFullYear()) {
                    calendarLabel = beginning.getFullYear() + "-" + ending.getFullYear()
                }

                nav.append("text")
                    .attr("transform", "translate(" + 20 + ", 0)")
                    .attr("x", 0)
                    .attr("y", 14)
                    .attr("class", "calendarYear")
                    .text(calendarLabel)
                    ;
            };
            var appendTimeAxisNav = function (g) {
                var timelineBlocks = 6;
                var leftNavMargin = (margin.left - navMargin);
                var incrementValue = (width - margin.left) / timelineBlocks;
                var rightNavMargin = (width - margin.right - incrementValue + navMargin);

                var nav = g.append('g')
                    .attr("class", "axis")
                    .attr("transform", "translate(0, 20)")
                    ;

                if (showAxisCalendarYear) { appendTimeAxisCalendarYear(nav) };

                nav.append("text")
                    .attr("transform", "translate(" + leftNavMargin + ", 0)")
                    .attr("x", 0)
                    .attr("y", 14)
                    .attr("class", "chevron")
                    .text("<")
                    .on("click", function () {
                        return navigateLeft(beginning, chartData);
                    })
                    ;

                nav.append("text")
                    .attr("transform", "translate(" + rightNavMargin + ", 0)")
                    .attr("x", 0)
                    .attr("y", 14)
                    .attr("class", "chevron")
                    .text(">")
                    .on("click", function () {
                        return navigateRight(ending, chartData);
                    })
                    ;
            };

            var appendAxisHeaderBackground = function (g, xAxis, yAxis) {
                g.insert("rect")
                    .attr("class", "row-green-bar")
                    .attr("x", xAxis)
                    .attr("width", width)
                    .attr("y", yAxis)
                    .attr("height", itemHeight)
                    .attr("fill", axisBgColor);
            };

            var appendTimeAxisTick = function (g, xAxis, maxStack) {
                g.append("g")
                    .attr("class", "axis")
                    .attr("transform", "translate(" + 0 + "," + (margin.top + (itemHeight + itemMargin) * maxStack) + ")")
                    .attr(timeAxisTickFormat.stroke, timeAxisTickFormat.spacing)
                    .call(xAxis.tickFormat("").tickSize(-(margin.top + (itemHeight + itemMargin) * (maxStack - 1) + 3), 0, 0));
            };

            var appendBackgroundBar = function (yAxisMapping, index, g, data, datum) {
                var greenbarYAxis = ((itemHeight + itemMargin) * yAxisMapping[index]) + margin.top;
                g.selectAll("svg").data(data).enter()
                    .insert("rect")
                    .attr("class", "row-green-bar")
                    .attr("x", fullLengthBackgrounds ? 0 : margin.left)
                    .attr("width", fullLengthBackgrounds ? width : (width - margin.right - margin.left))
                    .attr("y", greenbarYAxis)
                    .attr("height", itemHeight)
                    .attr("fill", backgroundColor instanceof Function ? backgroundColor(datum, index) : backgroundColor)
                    ;
            };

            var appendLabel = function (gParent, yAxisMapping, index, hasLabel, datum) {
                var fullItemHeight = itemHeight + itemMargin;
                var rowsDown = margin.top + (fullItemHeight / 2) + fullItemHeight * (yAxisMapping[index] || 1);

                gParent.append("text")
                    .attr("class", "timeline-label")
                    .attr("transform", "translate(" + labelMargin + "," + rowsDown + ")")
                    .text(hasLabel ? labelFunction(datum.label) : datum.id)
                    .on("click", function (d, i) { click(d, index, datum); });
            };

            function timeline(gParent) {
                console.log('gparent ' + gParent)

                var g = gParent.append("g");
                //var gParentSize = gParent[0][0].getBoundingClientRect();
                var gParentSize = gParent.node().getBoundingClientRect();
                var gParentItem = d3.select(gParent.node());

                var yAxisMapping = {},
                    maxStack = 1,
                    minTime = 0,
                    maxTime = 0;

                setWidth();

                // check if the user wants relative time
                // if so, substract the first timestamp from each subsequent timestamps
                if (timeIsRelative) {
                    g.each(function (d, i) {
                        d.forEach(function (datum, index) {
                            datum.Table.forEach(function (time, j) {//change here
                                if (index === 0 && j === 0) {
                                    originTime = new Date(time.starting_time).getTime();               //Store the timestamp that will serve as origin
                                    time.starting_time = 0;                        //Set the origin
                                    time.ending_time = new Date(time.ending_time.getTime()) - originTime;     //Store the relative time (millis)
                                } else {
                                    time.starting_time = new Date(time.starting_time).getTime() - originTime;
                                    time.ending_time = new Date(time.ending_time).getTime() - originTime;
                                }
                            });
                        });
                    });
                }

                // check how many stacks we're gonna need
                // do this here so that we can draw the axis before the graph
                if (stacked || ending === 0 || beginning === 0) {
                    g.each(function (d, i) {
                        d.forEach(function (datum, index) {

                            // create y mapping for stacked graph
                            if (stacked && Object.keys(yAxisMapping).indexOf(index) == -1) {
                                yAxisMapping[index] = maxStack;
                                maxStack++;
                            }

                            // figure out beginning and ending times if they are unspecified
                            datum.Table.forEach(function (time, i) { //change here
                                console.log("bargraphtime" + new Date(time.starting_time).getTime())
                                if (beginning === 0)
                                    if (new Date(time.starting_time).getTime() < minTime || (minTime === 0 && timeIsRelative === false))
                                        minTime = new Date(time.starting_time).getTime();
                                if (ending === 0)
                                    if (new Date(time.ending_time).getTime() > maxTime)
                                        maxTime = new Date(time.ending_time).getTime();
                            });
                        });
                    });

                    if (ending === 0) {
                        ending = maxTime;
                    }
                    if (beginning === 0) {
                        beginning = minTime;
                    }
                }

                var scaleFactor = (1 / (ending - beginning)) * (width - margin.left - margin.right);

                // draw the axis
                var xScale = d3.scaleTime()
                    .domain([beginning, ending])
                    .range([margin.left, width - margin.right]);

                var xAxis = d3.axisBottom(xScale)

                    .tickFormat(tickFormat.format)
                    .tickSize(tickFormat.tickSize);

                if (tickFormat.tickValues != null) {
                    xAxis.tickValues(tickFormat.tickValues);
                } else {
                    xAxis.ticks(tickFormat.numTicks || tickFormat.tickTime, tickFormat.tickInterval);
                }

                // draw the chart
                g.each(function (d, i) {
                    chartData = d;
                    d.forEach(function (datum, index) {
                        var data = datum.Table;//change here
                        var hasLabel = (typeof (datum.label) != "undefined");

                        // issue warning about using id per data set. Ids should be individual to data elements
                        if (typeof (datum.id) != "undefined") {
                            console.warn("d3Timeline Warning: Ids per dataset is deprecated in favor of a 'class' key. Ids are now per data element.");
                        }

                        if (backgroundColor) { appendBackgroundBar(yAxisMapping, index, g, data, datum); }

                        g.selectAll("svg").data(data).enter()
                            .append(function (d, i) {
                                return document.createElementNS(d3.namespaces.svg, "display" in d ? d.display : display);
                            })
                            .attr("x", getXPos)
                            .attr("y", getStackPosition)
                            .attr("width", function (d, i) {
                                return (new Date(d.ending_time).getTime() - new Date(d.starting_time).getTime()) * scaleFactor;
                            })
                            .attr("cy", function (d, i) {
                                return getStackPosition(d, i) + itemHeight / 2;
                            })
                            .attr("cx", getXPos)
                            .attr("r", itemHeight / 2)
                            .attr("height", itemHeight)
                            .style("fill", function (d, i) {
                                var dColorPropName;
                                if (d.color) return d.color;
                                if (colorPropertyName) {
                                    dColorPropName = d[colorPropertyName];
                                    if (dColorPropName) {
                                        return colorCycle(dColorPropName);
                                    } else {
                                        return colorCycle(datum[colorPropertyName]);
                                    }
                                }
                                return colorCycle(index);
                            })
                            .on("mousemove", function (d, i) {
                                hover(d, index, datum);
                            })
                            .on("mouseover", function (d, i) {
                                mouseover(d, i, datum);
                            })
                            .on("mouseout", function (d, i) {
                                mouseout(d, i, datum);
                            })
                            .on("click", function (d, i) {
                                click(d, index, datum);
                            })
                            .attr("class", function (d, i) {
                                return datum.class ? "timelineSeries_" + datum.class : "timelineSeries_" + index;
                            })
                            .attr("id", function (d, i) {
                                // use deprecated id field
                                if (datum.id && !d.id) {
                                    return 'timelineItem_' + datum.id;
                                }

                                return d.id ? d.id : "timelineItem_" + index + "_" + i;
                            })
                            ;

                        g.selectAll("svg").data(data).enter()
                            .append("text")
                            .attr("x", getXTextPos)
                            .attr("y", getStackTextPosition)
                            .text(function (d) {
                                return d.label;
                            })
                            ;

                        if (rowSeparatorsColor) {
                            var lineYAxis = (itemHeight + itemMargin / 2 + margin.top + (itemHeight + itemMargin) * yAxisMapping[index]);
                            gParent.append("svg:line")
                                .attr("class", "row-separator")
                                .attr("x1", 0 + margin.left)
                                .attr("x2", width - margin.right)
                                .attr("y1", lineYAxis)
                                .attr("y2", lineYAxis)
                                .attr("stroke-width", 1)
                                .attr("stroke", rowSeparatorsColor);
                        }

                        // add the label
                        if (hasLabel) { appendLabel(gParent, yAxisMapping, index, hasLabel, datum); }

                        if (typeof (datum.icon) !== "undefined") {
                            gParent.append("image")
                                .attr("class", "timeline-label")
                                .attr("transform", "translate(" + 0 + "," + (margin.top + (itemHeight + itemMargin) * yAxisMapping[index]) + ")")
                                .attr("xlink:href", datum.icon)
                                .attr("width", margin.left)
                                .attr("height", itemHeight);
                        }

                        function getStackPosition(d, i) {
                            if (stacked) {
                                return margin.top + (itemHeight + itemMargin) * yAxisMapping[index];
                            }
                            return margin.top;
                        }
                        function getStackTextPosition(d, i) {
                            if (stacked) {
                                return margin.top + (itemHeight + itemMargin) * yAxisMapping[index] + itemHeight * 0.75;
                            }
                            return margin.top + itemHeight * 0.75;
                        }
                    });
                });

                var belowLastItem = (margin.top + (itemHeight + itemMargin) * maxStack);
                var aboveFirstItem = margin.top;
                var timeAxisYPosition = showAxisTop ? aboveFirstItem : belowLastItem;
                if (showTimeAxis) { appendTimeAxis(g, xAxis, timeAxisYPosition); }
                if (timeAxisTick) { appendTimeAxisTick(g, xAxis, maxStack); }

                if (width > gParentSize.width) {
                    var move = function () {
                        var x = Math.min(0, Math.max(gParentSize.width - width, d3.event.translate[0]));
                        zoom.translate([x, 0]);
                        g.attr("transform", "translate(" + x + ",0)");
                        scroll(x * scaleFactor, xScale);
                    };

                    var zoom = d3.behavior.zoom().x(xScale).on("zoom", move);

                    gParent
                        .attr("class", "scrollable")
                        .call(zoom);
                }

                if (rotateTicks) {
                    g.selectAll(".tick text")
                        .attr("transform", function (d) {
                            return "rotate(" + rotateTicks + ")translate("
                                + (this.getBBox().width / 2 + 10) + "," // TODO: change this 10
                                + this.getBBox().height / 2 + ")";
                        });
                }

                var gSize = g.node().getBoundingClientRect();
                setHeight();

                if (showBorderLine) {
                    g.each(function (d, i) {
                        d.forEach(function (datum) {
                            var times = datum.Table;  //change here
                            times.forEach(function (time) {
                                appendLine(xScale(new Date(time.starting_time).getTime()), showBorderFormat);
                                appendLine(xScale(new Date(time.ending_time).getTime()), showBorderFormat);
                            });
                        });
                    });
                }

                if (showTodayLine) {
                    var todayLine = xScale(new Date());
                    appendLine(todayLine, showTodayFormat);
                }

                function getXPos(d, i) {
                    return margin.left + (new Date(d.starting_time).getTime() - beginning) * scaleFactor;
                }

                function getXTextPos(d, i) {
                    return margin.left + (new Date(d.starting_time).getTime() - beginning) * scaleFactor + 5;
                }

                function setHeight() {
                    if (!height && !gParentItem.attr("height")) {
                        if (itemHeight) {
                            // set height based off of item height
                            height = gSize.height + gSize.top - gParentSize.top;
                            // set bounding rectangle height
                            d3.select(gParent.node()).attr("height", height);
                        } else {
                            throw "height of the timeline is not set";
                        }
                    } else {
                        if (!height) {
                            height = gParentItem.attr("height");
                        } else {
                            gParentItem.attr("height", height);
                        }
                    }
                }

                function setWidth() {
                    if (!width && !gParentSize.width) {
                        try {
                            width = gParentItem.attr("width");
                            if (!width) {
                                throw "width of the timeline is not set. As of Firefox 27, timeline().with(x) needs to be explicitly set in order to render";
                            }
                        } catch (err) {
                            console.log(err);
                        }
                    } else if (!(width && gParentSize.width)) {
                        try {
                            width = gParentItem.attr("width");
                        } catch (err) {
                            console.log(err);
                        }
                    }
                    // if both are set, do nothing
                }

                function appendLine(lineScale, lineFormat) {
                    gParent.append("svg:line")
                        .attr("x1", lineScale)
                        .attr("y1", lineFormat.marginTop)
                        .attr("x2", lineScale)
                        .attr("y2", height - lineFormat.marginBottom)
                        .style("stroke", lineFormat.color)//"rgb(6,120,155)")
                        .style("stroke-width", lineFormat.width);
                }

            }

            // SETTINGS

            timeline.margin = function (p) {
                if (!arguments.length) return margin;
                margin = p;
                return timeline;
            };

            timeline.orient = function (orientation) {
                if (!arguments.length) return orient;
                orient = orientation;
                return timeline;
            };

            timeline.itemHeight = function (h) {
                if (!arguments.length) return itemHeight;
                itemHeight = h;
                return timeline;
            };

            timeline.itemMargin = function (h) {
                if (!arguments.length) return itemMargin;
                itemMargin = h;
                return timeline;
            };

            timeline.navMargin = function (h) {
                if (!arguments.length) return navMargin;
                navMargin = h;
                return timeline;
            };

            timeline.height = function (h) {
                if (!arguments.length) return height;
                height = h;
                return timeline;
            };

            timeline.width = function (w) {
                if (!arguments.length) return width;
                width = w;
                return timeline;
            };

            timeline.display = function (displayType) {
                if (!arguments.length || (DISPLAY_TYPES.indexOf(displayType) == -1)) return display;
                display = displayType;
                return timeline;
            };

            timeline.labelFormat = function (f) {
                if (!arguments.length) return labelFunction;
                labelFunction = f;
                return timeline;
            };

            timeline.tickFormat = function (format) {
                if (!arguments.length) return tickFormat;
                tickFormat = format;
                return timeline;
            };

            timeline.hover = function (hoverFunc) {
                if (!arguments.length) return hover;
                hover = hoverFunc;
                return timeline;
            };

            timeline.mouseover = function (mouseoverFunc) {
                if (!arguments.length) return mouseover;
                mouseover = mouseoverFunc;
                return timeline;
            };

            timeline.mouseout = function (mouseoutFunc) {
                if (!arguments.length) return mouseout;
                mouseout = mouseoutFunc;
                return timeline;
            };

            timeline.click = function (clickFunc) {
                if (!arguments.length) return click;
                click = clickFunc;
                return timeline;
            };

            timeline.scroll = function (scrollFunc) {
                if (!arguments.length) return scroll;
                scroll = scrollFunc;
                return timeline;
            };

            timeline.colors = function (colorFormat) {
                if (!arguments.length) return colorCycle;
                colorCycle = colorFormat;
                return timeline;
            };

            timeline.beginning = function (b) {
                if (!arguments.length) return beginning;
                beginning = b;
                return timeline;
            };

            timeline.ending = function (e) {
                if (!arguments.length) return ending;
                ending = e;
                return timeline;
            };

            timeline.labelMargin = function (m) {
                if (!arguments.length) return labelMargin;
                labelMargin = m;
                return timeline;
            };

            timeline.rotateTicks = function (degrees) {
                if (!arguments.length) return rotateTicks;
                rotateTicks = degrees;
                return timeline;
            };

            timeline.stack = function () {
                stacked = !stacked;
                return timeline;
            };

            timeline.relativeTime = function () {
                timeIsRelative = !timeIsRelative;
                return timeline;
            };

            timeline.showBorderLine = function () {
                showBorderLine = !showBorderLine;
                return timeline;
            };

            timeline.showBorderFormat = function (borderFormat) {
                if (!arguments.length) return showBorderFormat;
                showBorderFormat = borderFormat;
                return timeline;
            };

            timeline.showToday = function () {
                showTodayLine = !showTodayLine;
                return timeline;
            };

            timeline.showTodayFormat = function (todayFormat) {
                if (!arguments.length) return showTodayFormat;
                showTodayFormat = todayFormat;
                return timeline;
            };

            timeline.colorProperty = function (colorProp) {
                if (!arguments.length) return colorPropertyName;
                colorPropertyName = colorProp;
                return timeline;
            };

            timeline.rowSeparators = function (color) {
                if (!arguments.length) return rowSeparatorsColor;
                rowSeparatorsColor = color;
                return timeline;

            };

            timeline.background = function (color) {
                if (!arguments.length) return backgroundColor;
                backgroundColor = color;
                return timeline;
            };

            timeline.showTimeAxis = function () {
                showTimeAxis = !showTimeAxis;
                return timeline;
            };

            timeline.showAxisTop = function () {
                showAxisTop = !showAxisTop;
                return timeline;
            };

            timeline.showAxisCalendarYear = function () {
                showAxisCalendarYear = !showAxisCalendarYear;
                return timeline;
            };

            timeline.showTimeAxisTick = function () {
                timeAxisTick = !timeAxisTick;
                return timeline;
            };

            timeline.fullLengthBackgrounds = function () {
                fullLengthBackgrounds = !fullLengthBackgrounds;
                return timeline;
            };

            timeline.showTimeAxisTickFormat = function (format) {
                if (!arguments.length) return timeAxisTickFormat;
                timeAxisTickFormat = format;
                return timeline;
            };

            timeline.showAxisHeaderBackground = function (bgColor) {
                showAxisHeaderBackground = !showAxisHeaderBackground;
                if (bgColor) { (axisBgColor = bgColor) };
                return timeline;
            };

            timeline.navigate = function (navigateBackwards, navigateForwards) {
                if (!arguments.length) return [navigateLeft, navigateRight];
                navigateLeft = navigateBackwards;
                navigateRight = navigateForwards;
                showAxisNav = !showAxisNav;
                return timeline;
            };

            return timeline;

        };
    }();





    //function for bullet chart

</script>
<script>
    function update(progressData) {
        var dId = d3.select("#progress_chart1");
        // var dId = d3.select(id);

        d3.select("#progress_chart1").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_chart1") //id
            .data(progressData);


        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");


        //Create the bars
        d3.select("#progress_chart1").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");


        //Create the path
        d3.select("#progress_chart1").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_chart1").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart(progressData);
    }


    //Animate the bars when they are both visible on screen
    function loadChart(progressData) {

        var start_val = progressData.progress;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_chart1").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_chart1").selectAll(".path")  //id
            //.transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            //.duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }
    function update1(progressData) {
        var dId = d3.select("#progress_avail");
        // var dId = d3.select(id);
        d3.select("#progress_avail").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        //console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_avail") //id
            .data(progressData);

        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");

        //Create the bars
        d3.select("#progress_avail").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");

        //Create the path
        d3.select("#progress_avail").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_avail").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart1(progressData);
    }


    //Animate the bars when they are both visible on screen
    function loadChart1(progressData) {

        var start_val = progressData.progress;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_avail").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .style("background-color", "#9932CC")
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_avail").selectAll(".path")  //id
            //.transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            //.duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }
    function update2(progressData) {
        var dId = d3.select("#progress_perf");
        // var dId = d3.select(id);
        d3.select("#progress_perf").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_perf") //id
            .data(progressData);

        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");

        //Create the bars
        d3.select("#progress_perf").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");

        //Create the path
        d3.select("#progress_perf").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_perf").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart2(progressData);
    }


    //Animate the bars when they are both visible on screen
    function loadChart2(progressData) {

        var start_val = progressData.progress;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_perf").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .style("background-color", "#FF7F50")
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_perf").selectAll(".path")  //id
            //.transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            //.duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }
    function update3(progressData) {
        var dId = d3.select("#progress_quality");
        // var dId = d3.select(id);
        d3.select("#progress_quality").selectAll(".shadow").remove();
        //var progressData = [{
        //    "skill": "AngularJS",
        //    "progress": 60
        //}];
        console.log(progressData)

        //var dId = d3.select(dId);
        //Bind data for right bars

        var divRight = dId.selectAll("#progress_quality") //id
            .data(progressData);

        //Add shadow for the right bars
        divRight.enter().append("div")
            .attr("class", "shadow");

        //Create the bars
        d3.select("#progress_quality").selectAll(".shadow") //id
            .append("div")
            .attr("class", "bar1");

        //Create the path
        d3.select("#progress_quality").selectAll(".bar1")  //id
            .append("div")
            .attr("class", "path");

        //Add the pattern for the bars
        d3.select("#progress_quality").selectAll(".path")   //id
            .append("div")
            .attr("class", "pattern");
        loadChart3(progressData);
    }


    //Animate the bars when they are both visible on screen
    function loadChart3(progressData) {

        var start_val = progressData.progress;

        //add the percentage to the progress bar and transition the number
        d3.select("#progress_quality").selectAll(".pattern") //id
            .append("div")
            .text(start_val)
            .attr("class", "percentage")
            .transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            .duration(1000)
            .style("min-width", function (d, i) {

                return (d.progress * 3) / 2 + "px";
                console.log(1);
            })
            .style("background-color", "#228B22")
            .tween(".percentage", function (d) {
                console.log(d);
                var i = d3.interpolate(this.textContent, d.progress),
                    prec = (d.progress + "").split("."),
                    round = (prec.length > 1) ? Math.pow(10, prec[1].length) : 1;

                return function (t) {
                    this.textContent = Math.round(i(t) * round) / round + "%";
                };
            });

        //transition the width of the path
        d3.select("#progress_quality").selectAll(".path")  //id
            //.transition()
            //.delay(function (d, i) {
            //    return 200;
            //})
            //.duration(1000)
            .style("width", function (d, i) {
                return d.progress * 3 + "px";
            });
    }

    function exportF(elem) {
        //var plantcode_table1 = window.plant_table
         var companycode_table='@Session["CompanyCode"].ToString()';
        var plantcode_table='@Session["PlantCode"].ToString()';
        var table = document.getElementById("datatable-live");
        
        var html1 = "<p>Date : " + new Date().toLocaleString() + "<br>Company Name: " + companycode_table+"<br>Plant Name: " + plantcode_table + "<br>Line Name :" + line_name + "<br>Shift: " + window.shift + " <p>"
        var html = html1+table.outerHTML;
        console.log(html)
       
            
            var url = 'data:application/vnd.ms-excel,' + escape(html); // Set your html table into url
            //console.log(url)
            //elem.setAttribute("href", url);
            //elem.setAttribute("download", "export.xls"); // Choose the file name
            var link = document.createElement("a");
            link.download = "Live_data";
            link.href = url;
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            delete link;
        
        return false;
      


    }
</script>
<style>
    #skills {
        margin: 25px 0 0 20px;
    }

    #rightSkills {
        width: 350px;
        min-height: 100px;
        margin-bottom: 50px;
        padding: 25px 0 0 25px;
        float: left;
    }

    .shadow {
        display: block;
        width: 0px;
        height: 20px;
        margin-bottom: 5px;
        margin-left: 10px;
        box-shadow: -5px 1px 1px #888888;
        border-radius: 10px;
    }

    .bar1 {
        display: block;
        width: 302px;
        height: 20px;
        margin-left: -10px;
        background-color: white;
        overflow: hidden;
    }

    .path {
        display: block;
        height: 18px;
        width: 0px;
        background-color: white;
        border: 1px solid rgba(0, 0, 0, 0.5);
        overflow: hidden;
    }

    .pattern {
        height: 100%;
        width: 100%;
        background-color: cadetblue;
    }

    table th {
        word-break: break-all;
    }
    table td {
        word-break: break-all;
    }
    .percentage {
        margin-left: 0px;
        text-align: center;
        font-family: "Verdana", sans-serif;
        font-size: 0.8em;
        line-height: 18px;
        color: white;
    }

    .blinking {
        animation: blinkingText 5s infinite;
    }

    #status_blinking {
        animation: blinkingcircle 1s infinite;
    }

    @@keyframes blinkingText {
        0% {
            color: #000;
        }

        49% {
            color: #000;
        }

        50% {
            color: #000;
        }

        99% {
            color: transparent;
        }

        100% {
            color: #000;
        }
    }

    @@keyframes blinkingcircle {


        100% {
            opacity: 0;
        }
    }

    body {
        padding-right: 0px !important;
        color: black;
        height: 100% !important;
        margin-bottom: 8%;
    }

    .content-body {
        padding-right: 30px !important;
    }

    .loading1 {
        font-family: Arial;
        font-size: 10pt;
        /*border: 5px solid #67CFF5;*/
        width: 100%;
        height: 100%;
        display: none;
        position: fixed;
        background-color: #0e0e0e4f;
        z-index: 999;
    }

   
    /*tolltip styles*/
    [data-tooltip] {
        position: relative;
        z-index: 2;
        cursor: pointer;
    }

        /* Hide the tooltip content by default */
        [data-tooltip]:before,
        [data-tooltip]:after {
            visibility: hidden;
            -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=0)";
            filter: "progid: DXImageTransform.Microsoft.Alpha(Opacity=0)";
            opacity: 0;
            pointer-events: none;
        }

        /* Position tooltip above the element */
        [data-tooltip]:before {
            position: absolute;
            bottom: 100%;
            left: 50%;
            margin-bottom: 5px;
            /*margin-left: -80px;*/
            padding: 7px;
            width: 160px;
            -webkit-border-radius: 3px;
            -moz-border-radius: 3px;
            border-radius: 3px;
            background-color: #000;
            background-color: hsla(0, 0%, 20%, 0.9);
            color: #fff;
            content: attr(data-tooltip);
            text-align: center;
            font-size: 14px;
            line-height: 1.2;
            white-space: pre-line;
        }

        /* Triangle hack to make tooltip look like a speech bubble */
        [data-tooltip]:after {
            position:absolute;
            bottom: 100%;
            left: 50%;
            /*margin-left: -5px;*/
            width: 0px;
            border-top: 5px solid #000;
            border-top: 5px solid hsla(0, 0%, 20%, 0.9);
            border-right: 5px solid transparent;
            border-left: 5px solid transparent;
            content: " ";
            font-size: 0;
            line-height: 0;
            white-space: pre-line;
        }

        /* Show tooltip content on hover */
        [data-tooltip]:hover:before,
        [data-tooltip]:hover:after {
            visibility: visible;
            -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=100)";
            filter: "progid: DXImageTransform.Microsoft.Alpha(Opacity=100)";
            opacity: 1;
           
           
        }
</style>


<script>

    function showLoader() {
        $('.loading1').show();
    }

    function genTables() {
        var tables = document.querySelectorAll(".pagination");
        for (var i = 0; i < tables.length; i++) {
            perPage = parseInt(tables[i].dataset.pagecount);
            createFooters(tables[i]);
            createTableMeta(tables[i]);
            loadTable(tables[i]);
        }
    }

    // based on current page, only show the elements in that range
    function loadTable(table) {
        var startIndex = 0;

        if (table.querySelector('th'))
            startIndex = 1;

        console.log(startIndex);

        var start = (parseInt(table.dataset.currentpage) * table.dataset.pagecount) + startIndex;
        var end = start + parseInt(table.dataset.pagecount);
        var rows = table.rows;

        for (var x = startIndex; x < rows.length; x++) {
            if (x < start || x >= end)
                rows[x].classList.add("inactive");
            else
                rows[x].classList.remove("inactive");
        }
    }

    function createTableMeta(table) {
        table.dataset.currentpage = "0";
    }

    function createFooters(table) {
        var hasHeader = false;
        if (table.querySelector('th'))
            hasHeader = true;

        var rows = table.rows.length;

        if (hasHeader)
            rows = rows - 1;

        var numPages = rows / perPage;
        var pager = document.createElement("div");

        // add an extra page, if we're 
        if (numPages % 1 > 0)
            numPages = Math.floor(numPages) + 1;

        pager.className = "pager";
        for (var i = 0; i < numPages; i++) {
            var page = document.createElement("div");
            page.innerHTML = i + 1;
            page.className = "pager-item";
            page.dataset.index = i;

            if (i == 0)
                page.classList.add("selected");

            page.addEventListener('click', function () {
                var parent = this.parentNode;
                var items = parent.querySelectorAll(".pager-item");
                for (var x = 0; x < items.length; x++) {
                    items[x].classList.remove("selected");
                }
                this.classList.add('selected');
                table.dataset.currentpage = this.dataset.index;
                loadTable(table);
            });
            pager.appendChild(page);
        }

        // insert page at the top of the table
        table.parentNode.insertBefore(pager, table);
    }

    window.addEventListener('load', function () {
        genTables();
    });
</script>
<style>
    .tab-pane{
        display:none;
    }
    #tooltip1 {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }

        #tooltip1 .tooltiptext {
            visibility: hidden;
            width: 280px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 5;
            /*bottom: 1%;*/
            top:1%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
          
        }

            #tooltip1 .tooltiptext::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: #555 transparent transparent transparent;
            }

        #tooltip1:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }



    #datatable-live td {
        text-align: center;
        vertical-align: middle;
    }
    select {
        border: 1px solid #E5E7E9;
        border-radius: 6px;
        height: 36px;
        padding: 12px;
        outline: none;
    }

    /*toopltip for OEE*/
    #tooltip2 {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }

        #tooltip2 .tooltiptext {
            visibility: visible;
            width: 150px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 5;
            /*bottom: 1%;*/
            top: 1%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
        }

            #tooltip2 .tooltiptext::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: #555 transparent transparent transparent;
            }

        #tooltip2:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

    #tooltip3 {
        position: relative;
        display: inline-block;
        border-bottom: 1px dotted black;
    }

        #tooltip3 .tooltiptext {
            visibility: hidden;
            width: 210px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 5;
            /*bottom: 1%;*/
            top: 1%;
            left: 50%;
            margin-left: -236px;
            opacity: 0;
            transition: opacity 0.3s;
        }

            #tooltip3 .tooltiptext::after {
                content: "";
                position: absolute;
                top: 100%;
                left: 50%;
                margin-left: -5px;
                border-width: 5px;
                border-style: solid;
                border-color: #555 transparent transparent transparent;
            }

        #tooltip3:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

</style>
@*<script src="~/assets1/vendor/jquery-datatables/media/js/jquery.dataTables.js"></script>
    <script src="~/assets1/vendor/jquery-datatables/examples/resources/bootstrap/3/dataTables.bootstrap.js"></script>*@
<script>


    function paginate(tableName, RecordsPerPage) {
        $('#nav').remove();
        $(tableName).after('<div id="nav" style="text-align:center; "></div>');
        var rowsShown = RecordsPerPage;
        var rowsTotal = $(tableName + ' tbody tr').length;
        var numPages = rowsTotal / rowsShown;
        for (i = 0; i < numPages; i++) {
            var pageNum = i + 1;
            $('#nav').append('<a onmouseover="this.style.textDecoration=\'underline\';" \
                                                                 onmouseout="this.style.textDecoration=\'none\';" \
                                                                 style="border: 1px solid #ddd; display: inline-block; border-radius: 5px; \
                                                                 padding: 5px; font-family: Helvetica; " href = "#" rel = "  ' + i + '  ">' + pageNum + '</a>');
        }
        $(tableName + ' tbody tr').hide();
        $(tableName + ' tbody tr').slice(0, rowsShown).show();
        $('#nav a:first').addClass('active');
        $('#nav a').bind('click', function () {
            $('#nav a').removeClass('active');
            $(this).addClass('active');
            var currPage = $(this).attr('rel');
            var startItem = currPage * rowsShown;
            var endItem = startItem + rowsShown;
            $(tableName + ' tbody tr').css('opacity', '0.0').hide().slice(startItem, endItem).
                css('display', 'table-row').animate({ opacity: 1 }, 300);
        });
    }

    function limitPagging() {
        // alert($('.pagination li').length)

        if ($('.pagination li').length > 7) {
            if ($('.pagination li.active').attr('data-page') <= 3) {
                $('.pagination li:gt(5)').hide();
                $('.pagination li:lt(5)').show();
                $('.pagination [data-page="next"]').show();
            } if ($('.pagination li.active').attr('data-page') > 3) {
                $('.pagination li:gt(0)').hide();
                $('.pagination [data-page="next"]').show();
                for (let i = (parseInt($('.pagination li.active').attr('data-page')) - 2); i <= (parseInt($('.pagination li.active').attr('data-page')) + 2); i++) {
                    $('.pagination [data-page="' + i + '"]').show();

                }

            }
        }
    }
</script>