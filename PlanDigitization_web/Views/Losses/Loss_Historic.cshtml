@{
    ViewBag.Title = "Loss_Historic";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="~/Scripts/d3_v4.min.js"></script>
<link rel="stylesheet" type="text/css" href="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.css">

<style>
    .dataTables_filter {
        float: right;
    }
</style>

<style type="text/css">
    .radiobtn {
        margin: 10px;
    }

    .line {
        fill: none;
        stroke: #007fd6;
        stroke-width: 4px;
    }

    .node {
        fill: #007fd6;
        stroke: #fff;
        stroke-width: 2px;
    }

    .tooltip {
        position: absolute;
        text-align: center;
        width: 60px;
        height: 28px;
        padding: 2px;
        font: 12px sans-serif;
        background: lightsteelblue;
        border: 0px;
        border-radius: 8px;
        pointer-events: none;
    }
</style>

<header class="page-header">
    <h2> 16 Big Loss Historic Report </h2>
    <div class="right-wrapper pull-right">
        <ol class="breadcrumbs">
            <li>
                <a href="@Url.Action("MainDashboard","MainDashboard")">
                    <i class="fa fa-home"></i>
                </a>
            </li>
            <li><span>Historic</span></li>
        </ol>
    </div>
</header>

@if (ViewContext.Controller.HasPermission("LossesHistoric-View"))
{

    <div class="row" id="Historic" style="display:block;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions" style="top: 15px;">
                        <a class="fa fa-caret-down"></a>
                    </div>
                    <h2 class="panel-title" style="color:white;"> Loss Historic </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <label class="col-sm-2 control-label"> Select Machine  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <select class="form-control" id="Machine">
                                <option value="0">Select</option>
                            </select>
                        </div>

                        <label class="col-sm-2 control-label"> Report  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <select class="form-control" id="Report_name">
                                <option value="0">Select </option>
                                <option value="1">Specific reason</option>
                                <option value="2">Duration of Loss- Split up Table</option>
                                @*<option value="3">Duration of Loss - Chart (MTTR)</option>*@
                                <option value="4">Top 10 Losses based on duration : Chart</option>
                                <option value="5">Top 10 Losses based on duration : Pareto</option>
                                @*<option value="6">Top 10 Losses based on number of occurences - MTBF</option>*@
                                <option value="7">Top 10 Losses based on number of occurences : Pareto</option>
                            </select>
                        </div>
                        <label class="col-sm-2 control-label"> TimeSlot  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <select class="form-control" id="TimeSlot"></select>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            <label class="col-sm-2 control-label"> Subassambly  <span class="required">*</span></label>
                            <div class="col-sm-2">
                                <select class="form-control" id="Subassambly"></select>
                            </div>
                            <label class="col-sm-2 control-label"> Loss Category  <span class="required">*</span></label>
                            <div class="col-sm-2">
                                <select class="form-control" id="Loss_Category"></select>
                            </div>
                            <label class="col-sm-2 control-label"> Loss Name  <span class="required">*</span></label>
                            <div class="col-sm-2">
                                <select class="form-control" id="Loss_Name"></select>
                            </div>

                        </div>
                    </div>


                    <div class="form-group" style="display:none;" id="divshift">
                        <label class="col-sm-2 control-label"> Shift  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <select id="ShiftID" class="form-control">
                            </select>
                        </div>
                        <label class="col-sm-2 control-label"> Date  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="text" class="form-control datepic" autocomplete="off" id="ShiftDate" />
                        </div>
                    </div>

                    <div class="form-group" style="display:none;" id="divday">
                        <label class="col-sm-2 control-label"> Date  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="text" class="form-control datepic" autocomplete="off" id="Date" />
                        </div>
                    </div>



                    <div class="form-group" style="display:none;" id="divmonth">
                        <label class="col-sm-2 control-label"> Month  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="text" class="form-control monthpic" autocomplete="off" id="Month" />
                        </div>
                    </div>

                    <div class="form-group" style="display:none;" id="divyear">
                        <label class="col-sm-2 control-label"> Year  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="text" class="form-control yearpic" autocomplete="off" id="Year" />
                        </div>
                    </div>

                    <div class="form-group" style="display:none;" id="divcustom">

                        <label class="col-sm-2 control-label"> FromDate  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="text" class="form-control" autocomplete="off" id="FromDate" />
                        </div>

                        <label class="col-sm-2 control-label"> ToDate  <span class="required">*</span></label>
                        <div class="col-sm-2">
                            <input type="text" class="form-control" autocomplete="off" id="ToDate" />
                        </div>
                    </div>

                </div>
                <footer class="panel-footer">
                    <div class="row">
                        <div class="col-sm-9 col-sm-offset-3" style="text-align:right;">
                            <button type="button" id="Search_Loss" class="btn btn-primary">Search</button>
                            <button type="button" id="btn_cancel" class="btn btn-danger cancel">Reset</button>
                        </div>
                    </div>
                </footer>
            </section>
        </div>
    </div>


    <!--



        Tables & Charts -->

    <div class="row" id="Horly_Specific_trend" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Hourly Specific Reason Trend-Table </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_specific_hour" data-swf-path="assets1/vendor/jquery-datatables/extras/TableTools/swf/copy_csv_xls_pdf.swf">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Hour </th>
                                    <th> Occurence </th>
                                    <th> Occurence %</th>
                                </tr>
                            </thead>
                            <tbody class="Specific_hourly_details">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="Hourly_Specific_trend_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Hourly Specific Reason Trend-Chart </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="Hourly_chart_specific">
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>



    <div class="row" id="Shiftwise_Specific_trend" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Shiftwise Specific Reason Trend-Table </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_specific_shift" data-swf-path="assets1/vendor/jquery-datatables/extras/TableTools/swf/copy_csv_xls_pdf.swf">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Shift </th>
                                    <th> Occurence </th>
                                    <th> Occurence %</th>
                                </tr>
                            </thead>
                            <tbody class="Specific_shift_details">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="Shiftwise_Specific_trend_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Shiftwise Specific Reason Trend-Chart </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="Shift_chart_specific">
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>



    <div class="row" id="Monthly_Specific_trend" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Monthwise Specific Reason Trend-Table </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_specific_month" data-swf-path="assets1/vendor/jquery-datatables/extras/TableTools/swf/copy_csv_xls_pdf.swf">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Week </th>
                                    <th> Occurence </th>
                                    <th> Occurence %</th>
                                </tr>
                            </thead>
                            <tbody class="Specific_month_details">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="Monthly_Specific_trend_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Monthwise Specific Reason Trend-Chart </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="Month_chart_specific">
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="Yearly_Specific_trend" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Yearwise Specific Reason Trend-Table </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_specific_year" data-swf-path="assets1/vendor/jquery-datatables/extras/TableTools/swf/copy_csv_xls_pdf.swf">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Month </th>
                                    <th> Occurence </th>
                                    <th> Occurence %</th>
                                </tr>
                            </thead>
                            <tbody class="Specific_year_details">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="Yearly_Specific_trend_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Yearwise Specific Reason Trend-Chart </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="Year_chart_specific">
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>



    <div class="row" id="Custom_Specific_trend" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Customwise Specific Reason Trend-Table </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_specific_custom" data-swf-path="assets1/vendor/jquery-datatables/extras/TableTools/swf/copy_csv_xls_pdf.swf">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Year </th>
                                    <th> Occurence </th>
                                    <th> Occurence %</th>
                                </tr>
                            </thead>
                            <tbody class="Specific_custom_details">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="Custom_Specific_trend_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;"> Customwise Specific Reason Trend-Chart </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="Custom_chart_specific">
                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="modal fade" id="exampleModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <dsiv class="modal-content">
                @*<div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Add duration within Slot Pop-up Window</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>*@
                <div class="modal-body">
                    <div class="row">
                        <div class="col-md-12">
                            <form class="form">
                                <section class="panel">
                                    <header class="panel-heading" style="background-color:teal;color:white;">
                                        <div class="panel-actions">
                                        </div>
                                        <h2 class="panel-title" style="color:white;">Add duration within Slot Pop-up Window</h2>
                                    </header>
                                    <div class="panel-body">
                                        <div class="form-group">
                                            <label class="col-sm-6 control-label"> Add Duration within the Slot : <span class="required">*</span></label>
                                            <div class="col-sm-4">
                                                <span class="stime"></span> - <span id="etime"></span>
                                                <input type="hidden" id="ID" />
                                                <input type="hidden" id="lossid" />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-sm-6 control-label">Selected Loss : <span class="required">*</span></label>
                                            <div class="col-sm-4">
                                                <span id="lname"></span>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-sm-6 control-label"> Start Time :  <span class="required">*</span></label>
                                            <div class="col-sm-4">
                                                @*<span class="stime"></span>*@
                                                <input type="time" class="form-control" id="S_Time" step="1" readonly onchange="checktime()" required />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-sm-6 control-label"> End Time :  <span class="required">*</span></label>
                                            <div class="col-sm-4">
                                                <input type="time" class="form-control" id="E_Time" step="1" onchange="checktimeend()" required />
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-sm-6 control-label"> Loss Category  <span class="required">*</span></label>
                                            <div class="col-sm-4">
                                                <select class="form-control" id="splitLoss_Category" required></select>
                                            </div>
                                        </div>
                                        <div class="form-group">
                                            <label class="col-sm-6 control-label"> Loss Name  <span class="required">*</span></label>
                                            <div class="col-sm-4">
                                                <select class="form-control" id="splitLoss_Name" required></select>
                                            </div>
                                        </div>



                                        @*<div class="form-group">
                                                <label class="col-sm-6 control-label"> Reason :  <span class="required">*</span></label>
                                                <div class="col-sm-4">
                                                    <input type="text" class="form-control" name="Reason" id="Reason" />
                                                </div>
                                            </div>*@

                                        <div class="form-group">
                                            <label class="col-sm-6 control-label"> Remarks :  <span class="required">*</span></label>
                                            <div class="col-sm-4">
                                                <input type="text" class="form-control" name="Remarks" id="Remarks" required />
                                            </div>
                                        </div>

                                    </div>
                                    <footer class="panel-footer">
                                        <div class="row">
                                            <div class="col-sm-6 col-sm-offset-3" style="text-align:center;">
                                                <button type="button" class="btn btn-primary" onclick="insert_loss_details()">Submit</button>
                                            </div>
                                        </div>
                                    </footer>
                                </section>
                            </form>
                        </div>
                    </div>
                </div>
            </dsiv>
        </div>
    </div>

    <!--Duration of Loss - Splitup Table-->

    <div class="row" id="Daily_splitup_table" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="loss_divs"> Duration of Loss - Splitup Table </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_loss_splitup">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> S.No </th>
                                    <th> Duration Start </th>
                                    <th> Duration End </th>
                                    <th> Duration </th>
                                    <th> Loss Name</th>
                                    <th> Loss Type </th>
                                    <th>Loss Category</th>
                                    @*<th>Reason</th>*@
                                    <th>Actual Data</th>
                                    <th>Remarks</th>
                                    <th style="text-align:center;">Split</th>
                                </tr>
                            </thead>
                            <tbody class="daily_splitup_details">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <!-- Duration of Loss - Chart (MTTR) -->

    <div class="row" id="Horly_duration_loss" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="loss_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_horly_duration_loss">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> S.No </th>
                                    <th> Loss Instance </th>
                                    <th> Loss Duration(min)</th>
                                    <th> Loss Duration %</th>
                                </tr>
                            </thead>
                            <tbody class="hourly_loss_details">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <div class="row" id="MTTR_duration_loss_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="MTTR_loss_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="MTTR_chart_details" style="height:500px;">

                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <!-- Top 10 Losses based on duration -Chart -->

    <div class="row" id="top_10_duration_chart_table" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="top_10_loss_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_top_10_duration_table">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Loss Instance </th>
                                    <th> Loss Duration(min)</th>
                                    <th> Percentage %</th>
                                    <th> Cumulative Percentage %</th>
                                </tr>
                            </thead>
                            <tbody class="top_10_duration_table">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="top_10_duration_loss_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="top_10_duration_loss_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="duration_chart_details" style="height:500px;">

                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <!-- Top 10 Losses based on duration -Chart Pareto-->

    <div class="row" id="top_10_duration_pareto" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="top_10_pareto_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        @*<div id='top_10_pareto_chart' style="height:600px;width:100%">

                            </div>*@
                        <div id='top_10_pareto_chart' class="custom" style="height:600px;">

                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <!-- Top 10 Losses based on MTBF-->

    <div class="row" id="top_10_loss_MTBF_table" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="top_10_MTBF_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_top_10_MTBF_table">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Loss Instance </th>
                                    <th> Number of Occurences</th>
                                    <th> MTBF (in mins)</th>
                                </tr>
                            </thead>
                            <tbody class="top_10_MTBF_detail">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="top_10_loss_MTBF_chart" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="top_10_loss_MTBF_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div class="MTBF_chart_details" style="height:500px;">

                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>

    <!-- Top 10 Losses based on number of occurences : Pareto -->

    <div class="row" id="top_10_loss_Pareto_table" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="top_10_Pareto_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <table class="table table-bordered table-striped mb-none" id="datatable_top_10_Pareto_table">
                            <thead style="background-color:teal;color:white;">
                                <tr>
                                    <th> Loss Instance </th>
                                    <th> Number of Occurences </th>
                                    <th> Number of Occurences %</th>
                                    <th> Cumulative Number of Occurences (%)</th>
                                </tr>
                            </thead>
                            <tbody class="top_10_Pareto_detail">
                                <span class="pre_error" style="color:red;font-size:13px;font-weight:bold;"></span>
                            </tbody>
                        </table>
                    </div>
                </div>
            </section>
        </div>
    </div>


    <div class="row" id="top_10_occurence_pareto" style="display:none;">
        <div class="col-md-2"></div>
        <div class="col-md-12">
            <section class="panel">
                <header class="panel-heading" style="background-color:teal;color:white;">
                    <div class="panel-actions">
                    </div>
                    <h2 class="panel-title" style="color:white;" id="top_10_Occurence_pareto_div">  </h2>
                </header>
                <div class="panel-body">
                    <div class="form-group">
                        <div id='top_10_Occurence_pareto_chart' style="height:600px;width:100%">

                        </div>
                    </div>
                </div>
            </section>
        </div>
    </div>

}
else
{
    <div class="row">
        <h2 class="panel-title">View Permission is denied</h2>
    </div>
}

@Scripts.Render("~/bundles/jquery")
@Scripts.Render("~/bundles/jqueryval")

<script src="~/assets1/javascripts/swal.js"></script>
<script src="~/assets1/javascripts/swal_alert.js"></script>
<script src="~/assets1/datepicker_normal/datepicker_normal_jquery.min.js"></script>
<script src="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>

<script type="text/javascript">
    $(".datepic").datepicker({
        format: "yyyy-mm-dd",
        orientation: "bottom",
        endDate: '+0d'
    });

    $('.monthpic').datepicker({
        format: "yyyy-mm",
        viewMode: "months",
        endDate: '+0m',
        minViewMode: "months",
        orientation: "bottom"
    });
    $('.yearpic').datepicker({
        minViewMode: 2,
        format: 'yyyy',
        startView: 2,
        endDate: '+0y',
        orientation: "bottom"
    });

    $(function () {
        var todaydt = new Date();
        $("#FromDate").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() + 1);
            $('#ToDate').datepicker('setStartDate', minDate);
        });

        $("#ToDate").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate() - 1);
            $('#FromDate').datepicker('setEndDate', minDate);
        });
    });

</script>

<script>

    $("#TimeSlot").change(function () {
        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
        var TimeSlot = $('#TimeSlot').val();
        if (TimeSlot == "1") {
            $('#divshift').show();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').hide();
        }
        else if (TimeSlot == "2") {
            $('#divshift').hide();
            $('#divday').show();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').hide();
        }
        else if (TimeSlot == "3") {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').show();
            $('#divyear').hide();
            $('#divcustom').hide();
        }
        else if (TimeSlot == "4") {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').show();
            $('#divcustom').hide();
        }
        else if (TimeSlot == "5") {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').show();
        }
        else {
            $('#divshift').hide();
            $('#divday').hide();
            $('#divmonth').hide();
            $('#divyear').hide();
            $('#divcustom').hide();
        }
    });

</script>

<script>
    $(document).ready(function () {


    //    if (localStorage.getItem("tempres") == "yes") {

    //        localStorage.setItem("tempres", '')


    //        var selId = document.getElementById("Machine");

    //        selId.value = localStorage.getItem("machine").toString()

    //        var options = document.getElementById('ddp').options;
    //        var n = options.length;
    //        for (var i = 0;  i < n; i++) {
    //            if (options[i].value === localStorage.getItem("machine").toString()) {
    //        options[i].selected = true;
    //        break;
    //    }
    //}

    //    }


        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';

        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        var myDatas1 = {
            "QueryType": "Assets",
            "Parameter": '@Session["PlantCode"]',
            "Parameter1": '@Session["CompanyCode"]',
            "Parameter2": '@Session["LineCode"]',
             "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
        };
        $.ajax({
            type: "POST",
            data: myDatas1,
            headers: {
                Authorization: 'Bearer ' + user1
            },
            url: URL + "api/Values/User_settings_details",
            dataType: "json",

            success: function (response)
            {
                var s = '<option value="">Select Machine</option>';
                for (var i = 0; i < response.data.Table.length; i++) {
                    s += '<option value="' + response.data.Table[i].AssetID + '">' + response.data.Table[i].AssetName + '</option>';
                }
                $("#Machine").html(s);
            }
         })

        var shiftdata = {
            "QueryType": "ShiftSettings",
            "Parameter": '@Session["PlantCode"]',
            "Parameter1": '@Session["CompanyCode"]',
            "Parameter2": '@Session["LineCode"]',
             "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
        };
         $.ajax({
             type: "POST",
             data: shiftdata,
             headers: {
                 Authorization: 'Bearer ' + user1
             },
             url: URL + "api/Values/User_settings_details",
             dataType: "json",

             success: function (response) {
                 var s = '<option value="">Select Shift</option>';
                 for (var i = 0; i < response.data.Table.length; i++) {
                     s += '<option value="' + response.data.Table[i].ShiftName + '">' + response.data.Table[i].ShiftName + '</option>';
                 }
                 $("#ShiftID").html(s);
             }
         })



         $("#Loss_Category").change(function () {
             var Report_name = $('#Report_name').val();

             var subassembly = ''
             if ($("#Subassambly").val() == "null") {
                 subassembly = null
             }
             else {
                 subassembly = $("#Subassambly").val()
             }
             var Loss_Category = $('#Loss_Category').val();
             var data = {
                 "QueryType": "Get_loss_details",
                 "Parameter": '@Session["PlantCode"]',
                 "Parameter1": '@Session["CompanyCode"]',
                 "Parameter2": Loss_Category,
                 "subassembly": subassembly,
                  "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'

             };

             $.ajax({
                 type: "POST",
                 data: data,
                 headers: {
                     Authorization: 'Bearer ' + user1
                 },
                 url: URL + "api/Values/User_settings_details",
                 dataType: "json",

                 success: function (response) {

                     if (Report_name == "1") {
                         var s = '<option value="">Select Loss</option>';
                         for (var i = 0; i < response.data.Table.length; i++) {
                             s += '<option value="' + response.data.Table[i].Loss_ID + '">' + response.data.Table[i].Loss_Description + '</option>';
                         }
                         $("#Loss_Name").html(s);
                     }
                     else if (Report_name == "2") {
                         var s = '<option value="">Select Loss</option>';
                         s += '<option value="All">All</option>';
                         for (var i = 0; i < response.data.Table.length; i++) {
                             s += '<option value="' + response.data.Table[i].Loss_ID + '">' + response.data.Table[i].Loss_Description + '</option>';
                         }
                         $("#Loss_Name").html(s);
                     }
                     else {
                         var s = '<option value="null">All</option>';
                         $("#Loss_Name").html(s);
                     }
                 }
             })
         });


         $("#Machine").change(function () {
             var Machine = $('#Machine').val();
             var data = {
                 "QueryType": "Get_subassambly",
                 "Parameter": '@Session["PlantCode"]',
                 "Parameter1": '@Session["CompanyCode"]',
                 "Parameter2": Machine,
                  "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
             };

             $.ajax({
                 type: "POST",
                 data: data,
                 headers: {
                     Authorization: 'Bearer ' + user1
                 },
                 url: URL + "api/Values/User_settings_details",
                 dataType: "json",

                 success: function (response) {
                     if (response.data.Table.length > 0) {
                         var s = '<option value="">Select</option>';
                         for (var i = 0; i < response.data.Table.length; i++) {
                             s += '<option value="' + response.data.Table[i].SubassemblyID + '">' + response.data.Table[i].SubassemblyName + '</option>';
                         }
                         $("#Subassambly").html(s);
                     }
                     else {
                         var s = '<option value="null">No Subassembly</option>';

                         $("#Subassambly").html(s);
                     }

                 }
             })
         });

         $("#Report_name").change(function () {
             var Report_name = $('#Report_name').val();

             if (Report_name == "2") {
                // var s = '<option value="0">Select Report</option>';
                 s += '<option value="2">Day</option>';
                 $("#TimeSlot").html(s);
             }
             else {
                 var s = '<option value="0">Select Report</option>';
                 s += '<option value="1">Shift</option>';
                 s += '<option value="2">Day</option>';
                 s += '<option value="3">Month</option>';
                 s += '<option value="4">Year</option>';
                 s += '<option value="5">Custom</option>';
                 $("#TimeSlot").html(s);
             }

             if (Report_name == "1") {
                 var data = {
                     "QueryType": "Get_LossCategory",
                     "Parameter": '@Session["PlantCode"]',
                     "Parameter1": '@Session["CompanyCode"]',
                     "Parameter2": '@Session["LineCode"]',
                      "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
                 };
                 $.ajax({
                     type: "POST",
                     data: data,
                     headers: {
                         Authorization: 'Bearer ' + user1
                     },
                     url: URL + "api/Values/User_settings_details",
                     dataType: "json",

                     success: function (response) {
                         var s = '<option value="">Select Category</option>';
                         for (var i = 0; i < response.data.Table.length; i++) {
                             s += '<option value="' + response.data.Table[i].ID + '">' + response.data.Table[i].Loss_Category + '</option>';
                         }
                         $("#Loss_Category").html(s);

                     }
                 })

             }
             else if (Report_name == "2") {
                  var s = '<option value="All">All</option>';
                 var data = {
                     "QueryType": "Get_LossCategory",
                     "Parameter": '@Session["PlantCode"]',
                     "Parameter1": '@Session["CompanyCode"]',
                     "Parameter2": '@Session["LineCode"]',
                      "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
                 };
                 $.ajax({
                     type: "POST",
                     data: data,
                     headers: {
                         Authorization: 'Bearer ' + user1
                     },
                     url: URL + "api/Values/User_settings_details",
                     dataType: "json",

                     success: function (response) {
                         var s = '<option value="null">All</option>';
                         for (var i = 0; i < response.data.Table.length; i++) {
                             s += '<option value="' + response.data.Table[i].ID + '">' + response.data.Table[i].Loss_Category + '</option>';
                         }
                         $("#Loss_Category").html(s);
                     }
                 })
                 $("#Loss_Name").html(s);
             }
             else {
                 var s = '<option value="">All</option>';
                 var data = {
                     "QueryType": "Get_LossCategory",
                     "Parameter": '@Session["PlantCode"]',
                     "Parameter1": '@Session["CompanyCode"]',
                     "Parameter2": '@Session["LineCode"]',
                      "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
                 };
                 $.ajax({
                     type: "POST",
                     data: data,
                     headers: {
                         Authorization: 'Bearer ' + user1
                     },
                     url: URL + "api/Values/User_settings_details",
                     dataType: "json",

                     success: function (response) {
                         var s = '<option value="null">All</option>';
                         for (var i = 0; i < response.data.Table.length; i++) {
                             s += '<option value="' + response.data.Table[i].ID + '">' + response.data.Table[i].Loss_Category + '</option>';
                         }
                         $("#Loss_Category").html(s);
                     }
                 })
                // $("#Loss_Category").html(s);
                 $("#Loss_Name").html(s);
             }
         });

    });



</script>


<style>
    .pie {
        margin-top: 100px;
        margin-left: 500px;
        width: 200px !important;
    }

    svg {
        float: left;
    }

    .legend {
        float: left;
        font-family: "Verdana";
        font-size: 12px;
        font-weight: bold;
    }

    .pie text {
        font-family: "Verdana";
        fill: #000;
    }

    .pie .name-text {
        font-size: 0.8em;
    }

    .pie .value-text {
        font-size: 3em;
    }
</style>

<script>

    function insert_loss_details()
    {
        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        var ETime = $("#E_Time").val();
        var Reason = $("#splitLoss_Name").val();
        var Remarks = $("#Remarks").val();
        var ID = $("#ID").val();
        var loss = $("#lossid").val();
        var STime = $("#S_Time").val();
        var querytype = '';

        if (Reason == "" || Reason == null) {
            swal({
                icon: "error",
                title: "Please Select Loss Reason...!",
                button: true,
                timer: 4500
            })
            return;
        }
        if (Remarks == "" ) {
            swal({
                icon: "error",
                title: "Please Select Remarks...!",
                button: true,
                timer: 4500
            })
            return;
        }
        if (ETime == "") {
            swal({
                icon: "error",
                title: "Please Select End Time...!",
                button: true,
                timer: 4500
            })
            return;
        }
        if (STime == "") {
            swal({
                icon: "error",
                title: "Please Select Start Time...!",
                button: true,
                timer: 4500
            })
            return;
        }
        //if (loss == "") {
        //    swal({
        //        icon: "error",
        //        title: "Please Select Loss Name...!",
        //        button: true,
        //        timer: 4500
        //    })
        //    return;
        //}






        var newstart = ''
        var newend=''
        if (STime == window.starttime && ETime != window.endtime) {
            newstart = ETime
            newend = window.endtime
            querytype='edit'
        }
        if (ETime == window.endtime && STime != window.starttime) {
            newend = STime
            newstart = window.starttime
            querytype = 'edit'
        }
        if (STime == window.starttime && ETime == window.endtime) {
            querytype = 'delete'
        }

        var myData = {
            "querytype": querytype,
            "ID": ID,
            "ETime": ETime,
            "STime": STime,
            "Reason" : Reason,
            "Remarks": Remarks,
            "lossid": loss,
            "newstart": newstart,
            "newend":newend,
             "CompanyCode": '@Session["CompanyCode"]',
              "PlantCode": '@Session["PlantCode"]',
             "Line_Code": '@Session["LineCode"]'

        };



        $.ajax({
            type: "POST",
            url: URL + 'api/Losses/Insert_loss_details',
            data: myData,
            headers: {
                Authorization: 'Bearer ' + user1
            },
            dataType: "json",
            beforeSend: function () {
                $('.loading').show();
            },
            complete: function () {
                $('.loading').hide();
            },
            success: function (response) {
                if (response == "Inserted") {
                    swal({
                        icon: "success",
                        title: "Loss Details Added Successfully...!",
                        button: true,
                        timer: 4500
                    })


                     var data_splitinside = {
                     "QueryType": 'Loss_splitup',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                         "date": localStorage.getItem('sdate'),
                         "Machine_Code": localStorage.getItem('machine'),
                         "report_type": localStorage.getItem('lossname'),

                };

                    //console.log('testDate' + localStorage.getItem('sdate'))
                    //console.log('testMachine' + localStorage.getItem('machine'))
                    //console.log('testLoss_Name' + localStorage.getItem('lossname'))

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: data_splitinside,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },

                    success: function (response) {

                       // $("#Daily_splitup_table").show();

                        var rowsCnt = document.getElementById("datatable_loss_splitup").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_loss_splitup").deleteRow(1);
                            }
                        }

                        if ($.fn.DataTable.isDataTable('#datatable_loss_splitup')) {
                            $('#datatable_loss_splitup').DataTable().clear();
                                }

                        if ($.fn.DataTable.isDataTable('#datatable_loss_splitup')) {
                            $('#datatable_loss_splitup').DataTable().destroy();
                        }


                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {

                                    var actualtemp = '', actremarks = ''
                                    if (response.data.Table[i].Actual_Data == null || response.data.Table[i].Actual_Data) {
                                        actualtemp = response.data.Table[i].Loss_Description;
                                    }
                                    else {
                                        actualtemp = response.data.Table[i].Actual_Data;
                                    }

                                    if (response.data.Table[i].Remarks == null || response.data.Table[i].Remarks) {
                                        actremarks = '';
                                    }
                                    else {
                                        actremarks = response.data.Table[i].Remarks;
                                    }

                                    var newRow = $("<tr>");
                                    var cols = '';
                                    cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Start + "</td> ";
                                    cols += "<td> " + response.data.Table[i].End + "</td> ";
                                    cols += "<td> " + response.data.Table[i].time_diff + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Loss_Description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Loss_Type + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Loss_Category + "</td> ";
                                    //cols += "<td> " + response.data.Table[i].Reason + "</td> ";
                                    cols += "<td> " + actualtemp + "</td> ";
                                    cols += "<td> " + actremarks + "</td> ";
                                    cols += "<td style='text-align:center;'> <a class='Edit'><span class='fa fa-pencil-square-o fa-2x' onclick='return update_loss(" + response.data.Table[i].ID + ");' data-toggle='modal' data-target='#exampleModal'></span></a>  </td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".daily_splitup_details").append(newRow);
                                    j++;

                                    $('#exampleModal').hide();
                                    $("body").css({ "overflow": "visible" });
                                }

                                var rawtable_table = $('#datatable_loss_splitup').DataTable({
                                    "responsive": true,
                                    "autoWidth": false,
                                    "scrollCollapse": true,
                                    dom: 'Bfrtip',
                                    buttons: [
                                        'excel'
                                    ]
                                });
                            }
                        }
                        else
                        {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response)
                    {

                    }
                });
                   // window.location = '@Url.Action("Loss_Historic", "Losses")';
                }
            },
            error: function (response) {

            }
        });
    }


    function update_loss(id)
    {

        $('#exampleModal').show();
        document.getElementById("S_Time").value = '';
        document.getElementById("E_Time").value = '';

        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        var myData = {
            "QueryType": 'Get_Loss_Date',
            "Line_Code": '@Session["LineCode"]',
             "CompanyCode": '@Session["CompanyCode"]',
            "PlantCode": '@Session["PlantCode"]',
                    "shiftid":id

        };

        $.ajax({
            type: "POST",
            url: URL + 'api/Losses/Get_Loss_Occurence_chart',
            data: myData,
            headers: {
                Authorization: 'Bearer ' + user1
            },
            dataType: "json",
            beforeSend: function () {
                $('.loading').show();
            },
            complete: function () {
                $('.loading').hide();
            },
            success: function (response) {
                $(".stime").html(response.data.Table[0].Start);
                $("#etime").html(response.data.Table[0].End);

                $("#lname").html(response.data.Table[0].Loss_Description);

                $("#S_Time").val(response.data.Table[0].Start);

                //$("#E_Time").val(response.data.Table[0].End);
                document.getElementById("E_Time").value = response.data.Table[0].End;
                $("#ID").val(response.data.Table[0].ID);
                $("#lossid").val("");
                window.starttime = response.data.Table[0].Start
                window.endtime = response.data.Table[0].End;

                 var splitcat_data = {
                     "QueryType": "Get_LossCategory",
                     "Parameter": '@Session["PlantCode"]',
                     "Parameter1": '@Session["CompanyCode"]',
                     "Parameter2": '@Session["LineCode"]',
                      "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'
                };
                $.ajax({
                    type: "POST",
                    data: splitcat_data,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    url: URL + "api/Values/User_settings_details",
                    dataType: "json",

                    success: function (response) {
                        var s = '<option value="">Select Category</option>';
                        for (var i = 0; i < response.data.Table.length; i++) {
                            s += '<option value="' + response.data.Table[i].ID + '">' + response.data.Table[i].Loss_Category + '</option>';
                        }
                        $("#splitLoss_Category").html(s);

                    }
                })
                $("#splitLoss_Category").change(function () {
                    var subassembly = ''
                    if ($("#Subassambly").val() == "null") {
                        subassembly = null
                    }
                    else {
                        subassembly = $("#Subassambly").val()
                    }
                     var Loss_Category = $('#splitLoss_Category').val();
                var data = {
                 "QueryType": "Get_loss_details",
                 "Parameter": '@Session["PlantCode"]',
                 "Parameter1": '@Session["CompanyCode"]',
                 "Parameter2": Loss_Category,
                 "subassembly": subassembly,
                  "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "LineCode": '@Session["LineCode"]'

             };

             $.ajax({
                 type: "POST",
                 data: data,
                 headers: {
                     Authorization: 'Bearer ' + user1
                 },
                 url: URL + "api/Values/User_settings_details",
                 dataType: "json",

                 success: function (response) {


                         var s = '<option value="">Select Loss</option>';
                         for (var i = 0; i < response.data.Table.length; i++) {
                             s += '<option value="' + response.data.Table[i].Loss_ID + '">' + response.data.Table[i].Loss_Description + '</option>';
                         }
                         $("#splitLoss_Name").html(s);

                 }
             })

                });


            },
            error: function (response) {

            }
        });
    }

    function checktime() {


        var timeString = document.getElementById("S_Time").value


        if (timeString < window.starttime || timeString > window.endtime) {
            alert('Select appropriate start time')
            document.getElementById("S_Time").value = '';
        }

    }

    function checktimeend() {

        var timeString = document.getElementById("E_Time").value
        //var hourEnd = timeString.indexOf(":");
        //var H = +timeString.substr(0, hourEnd);
        //var h = H % 12 || 12;
        //var ampm = (H < 12 || H === 24) ? " AM" : " PM";
        //timeString = h + timeString.substr(hourEnd, 3) + '.' + timeString.substr(hourEnd + 4, 7) + ampm;

        if (timeString > window.endtime || timeString < window.starttime) {
            alert('Select appropriate End time')
            document.getElementById("E_Time").value = '';

        }

        //if (document.getElementById("S_Time").value == window.starttime || document.getElementById("E_Time").value == window.endtime) {
        //    alert('Either start or end time should match')
        //}
    }

    document.getElementById("btn_cancel").addEventListener("click", function ()
    {
        $("#TimeSlot").val('0');
        $("#Report_name").val('0');
        $("#Machine").val('');
        $("#ShiftDate").val('');
        $("#ShiftID").val('');
        $("#Machine").val('');
        $("#Date").val('');
        $("#Month").val('');
        $("#Year").val('');
        $("#FromDate").val('');
        $("#ToDate").val('');
        $("#Loss_Name").val('');
        $("#Loss_Category").val('');
        $("#Subassambly").val('');
    });

    document.getElementById("Search_Loss").addEventListener("click", function () {
        var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
        var TimeSlot = $("#TimeSlot").val();
        var Report_name = $("#Report_name").val();
        var ShiftDate = $("#ShiftDate").val();
        var ShiftID = $("#ShiftID").val();
        var Machine = $("#Machine").val();
        var Date = $("#Date").val();
        var Month = $("#Month").val();
        var Year = $("#Year").val();
        var FDate = $("#FromDate").val();
        var TDate = $("#ToDate").val();
        var Loss_Name = $("#Loss_Name option:selected").text();
        var Loss_id = $("#Loss_Name").val();
        var cat_test = $("#Loss_Category").val();
        if (Machine == "") {
            swal({
                icon: "error",
                title: "Please Select Machine...!",
                button: true,
                timer: 4500
            })
            return;
        }

        if (Report_name == "0") {
            swal({
                icon: "error",
                title: "Please Select Report Name...!",
                button: true,
                timer: 4500
            })
            return;
        }

        if (cat_test == "" || cat_test==null) {
            swal({
                icon: "error",
                title: "Please Select Loss Category...!",
                button: true,
                timer: 4500
            })
            return;
        }

        if (TimeSlot == "0") {
            swal({
                icon: "error",
                title: "Please Select Timeslot...!",
                button: true,
                timer: 4500
            })
            return;
        }


        $("#Shiftwise_Specific_trend").hide();
        $("#Shiftwise_Specific_trend_chart").hide();
        $("#Horly_Specific_trend").hide();
        $("#Hourly_Specific_trend_chart").hide();
        $("#Monthly_Specific_trend").hide();
        $("#Monthly_Specific_trend_chart").hide();
        $("#Yearly_Specific_trend_chart").hide();
        $("#Yearly_Specific_trend").hide();
        $("#Custom_Specific_trend").hide();
        $("#Custom_Specific_trend_chart").hide();
        $("#Horly_duration_loss").hide();
        $("#Horly_duration_loss_chart").hide();
        $("#top_10_duration_chart_table").hide();

        $("#top_10_loss_MTBF_table").hide();
        $("#top_10_loss_Pareto_table").hide();
        $("#top_10_duration_pareto").hide();

        $("#top_10_occurence_pareto").hide();

        $("#Daily_splitup_table").hide();

        $("#MTTR_duration_loss_chart").hide();
        $("#top_10_duration_loss_chart").hide();
        $("#top_10_loss_MTBF_chart").hide();

        $(".pre_error").text('');

        //Hourly
        if (TimeSlot == "1") {

            if (ShiftID == "") {
                swal({
                    icon: "error",
                    title: "Please Select Shift...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (ShiftDate == "") {
                swal({
                    icon: "error",
                    title: "Please Select Date...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (Loss_Name == null || Loss_Name =="") {
                swal({
                    icon: "error",
                    title: "Please Select Loss Name...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (Report_name == "1")
            {
                var myData = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "shift": ShiftID,
                    "Date": ShiftDate,
                    "Machine": Machine,
                    "Loss": Loss_id,

                };
                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Shiftwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {
                        $("#Horly_Specific_trend").show();
                        $("#Hourly_Specific_trend_chart").show();

                        var rowsCnt = document.getElementById("datatable_specific_hour").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_specific_hour").deleteRow(1);
                            }
                        }

                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Hour + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurance_per + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".Specific_hourly_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }


                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Shiftwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (result) {

                        $("#Horly_Specific_trend").show();
                        $("#Hourly_Specific_trend_chart").show();

                        d3.select("svg").remove();

                        d3.select("svg").remove();

                        // If data is not available
                        if (typeof result.data.Table === "undefined") {

                            // Output error
                            $(".Hourly_chart_specific").text("No Data Available.");

                            // Otherwise
                        } else {

                            var data = result.data.Table;
                            // Set SVGs dimensions and margins
                            var margin = { top: 20, right: 20, bottom: 30, left: 50 },
                                width = 960 - margin.left - margin.right,
                                height = 300 - margin.top - margin.bottom;

                            // Setup ranges
                            var x = d3.scaleBand().range([0, width]),
                                y = d3.scaleLinear().range([height, 0]);


                            // Setup line
                            var valueline = d3.line()
                                .x(function (d) { console.log(x(d.Hour));return x(d.Hour); })
                                .y(function (d) { return y(d.Occurence); });

                            // Setup tooltips
                            var div = d3.select(".Hourly_chart_specific").append("div")
                                .attr("class", "tooltip")
                                .style("opacity", 0);

                            // Append SVG to container DIV, append group to SVG
                            var svg = d3.select(".Hourly_chart_specific").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform",
                                    "translate( " + margin.left + ", " + margin.top + " )");

                            // Format the data
                            data.forEach(function (d) {
                                d.Hour = d.Hour;
                                d.Occurence = +d.Occurence;
                            });

                            x.domain(data.map(function (d) { return (d.Hour); }));

                            y.domain([0, d3.max(data, function (d) { return d.Occurence; })]);

                            // Append the line to the graph
                            svg.append("path")
                                .data([data])
                                .attr("class", "line")
                                .attr("d", valueline);

                            // Append tooltips to the graph
                            svg.selectAll("dot")
                                .data(data)
                                .enter().append("circle")
                                .attr("class", "node")
                                .attr("r", 5)
                                .attr("cx", function (d) { return x(d.Hour); })
                                .attr("cy", function (d) { return y(d.Occurence); })
                                .on("mouseover", function (d) {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 1);
                                    div.html(d.Hour + "<br/>" + d.Occurence)
                                })
                                .on("mousemove", function () {
                                    return div
                                        .style("top", (d3.event.pageY + 16) + "px")
                                        .style("left", (d3.event.pageX + 16) + "px");
                                })
                                .on("mouseout", function () {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 0);
                                });


                            // Append X Axis to the graph
                            svg.append("g")
                                .attr("transform", "translate( 0," + height + " )")

                                .call(d3.axisBottom(x))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "middle")
                                .attr('x', 450)
                                .attr('y', 40)
                                .text("Hour");

                            // Append Y Axis to the graph
                            svg.append("g")
                                .call(d3.axisLeft(y))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "start")
                                .text("Occurense");
                        }

                    },
                    error: function (result) {

                    }
                });

            }

            else if (Report_name == "3")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }

                var myData = {
                    "QueryType": 'Shift',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "shiftid": ShiftID,
                    "date": ShiftDate,
                    "Machine_Code": Machine,
                    "report_type": '2',
                    "loss_category": losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#loss_div").html("Hourly Duration of Loss - Table (MTTR)");

                        $("#Horly_duration_loss").show();

                        var rowsCnt = document.getElementById("datatable_horly_duration_loss").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_horly_duration_loss").deleteRow(1);
                            }
                        }


                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;
                                }

                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(2) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".hourly_loss_details").append(newRow);
                                    j++;
                                }
                            }


                        }

                        else {
                            $(".pre_error").text(response.msg);
                        }

                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#MTTR_loss_div").html("Hourly Duration of Loss - Chart (MTTR)");

                        $("#MTTR_duration_loss_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var duration_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            duration_tot += response.data.Table[i].duration;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTTR_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.duration * 100) / duration_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2) })`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2) })`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "4" || Report_name == "5")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }

                var myData = {
                    "QueryType": 'Shift',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "shiftid": ShiftID,
                    "date": ShiftDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                var myData_new = {
                    "QueryType": 'Shift_duration',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "shiftid": ShiftID,
                    "date": ShiftDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData_new,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_div").html("Hourly Top 10 Losses based on Duration");

                        $("#top_10_duration_chart_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_duration_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_duration_table").deleteRow(1);
                            }
                        }

                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].duration * 100) / duration_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(2) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(2) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_duration_table").append(newRow);
                                    j++;
                                }
                            }

                        }

                        else {
                            $(".pre_error").text(response.msg);
                        }

                    },
                    error: function (response) {

                    }
                });

                if (Report_name == "4") {
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {

                            $("#top_10_duration_loss_div").html("Hourly Top 10 Losses based on duration - Chart");

                            $("#top_10_duration_loss_chart").show();

                            d3.select("svg").remove();

                            $(".legend").remove();

                            var duration_tot = 0;

                            for (var i = 0; i < response.data.Table.length; i++) {
                                duration_tot += response.data.Table[i].duration;
                            }

                            var data = response.data.Table;

                            var text = "";
                            var width = 200;
                            var height = 200;
                            var thickness = 40;
                            var duration = 750;
                            var padding = 10;
                            var opacity = 0.8;
                            var opacityHover = 1;
                            var otherOpacityOnHover = 0.8;
                            var tooltipMargin = 13;
                            var chart = ".duration_chart_details";

                            var radius = Math.min(width - padding, height - padding) / 2;
                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            var svg = d3
                                .select(chart)
                                .append("svg")
                                .attr("class", "pie")
                                .attr("width", width)
                                .attr("height", height);

                            var g = svg
                                .append("g")
                                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                            var arc = d3
                                .arc()
                                .innerRadius(0)
                                .outerRadius(radius);

                            var pie = d3
                                .pie()
                                .value(function (d) {
                                    return (d.duration * 100) / duration_tot;
                                })
                                .sort(null);

                            var path = g
                                .selectAll("path")
                                .data(pie(data))
                                .enter()
                                .append("g")
                                .append("path")
                                .attr("d", arc)
                                .attr("fill", (d, i) => color(i))
                                .style("opacity", opacity)
                                .style("stroke", "white")
                                .on("mouseover", function (d) {
                                    d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                    d3.select(this).style("opacity", opacityHover);

                                    let g = d3
                                        .select("svg")
                                        .style("cursor", "pointer")
                                        .append("g")
                                        .attr("class", "tooltip")
                                        .style("opacity", 0);

                                    g.append("text")
                                        .attr("class", "name-text")
                                        .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2)})`)
                                        .attr("text-anchor", "middle");

                                    let text = g.select("text");
                                    let bbox = text.node().getBBox();
                                    let padding = 2;
                                    g.insert("rect", "text")
                                        .attr("x", bbox.x - padding)
                                        .attr("y", bbox.y - padding)
                                        .attr("width", bbox.width + padding * 2)
                                        .attr("height", bbox.height + padding * 2)
                                        .style("fill", "white")
                                        .style("opacity", 0.75);
                                })
                                .on("mousemove", function (d) {
                                    let mousePosition = d3.mouse(this);
                                    let x = mousePosition[0] + width / 2;
                                    let y = mousePosition[1] + height / 2 - tooltipMargin;

                                    let text = d3.select(".tooltip text");
                                    let bbox = text.node().getBBox();
                                    if (x - bbox.width / 2 < 0) {
                                        x = bbox.width / 2;
                                    } else if (width - x - bbox.width / 2 < 0) {
                                        x = width - bbox.width / 2;
                                    }

                                    if (y - bbox.height / 2 < 0) {
                                        y = bbox.height + tooltipMargin * 2;
                                    } else if (height - y - bbox.height / 2 < 0) {
                                        y = height - bbox.height / 2;
                                    }

                                    d3.select(".tooltip")
                                        .style("opacity", 1)
                                        .attr("transform", `translate(${x}, ${y})`);
                                })
                                .on("mouseout", function (d) {
                                    d3.select("svg")
                                        .style("cursor", "none")
                                        .select(".tooltip")
                                        .remove();
                                    d3.selectAll("path").style("opacity", opacity);
                                })
                                .on("touchstart", function (d) {
                                    d3.select("svg").style("cursor", "none");
                                })
                                .each(function (d, i) {
                                    this._current = i;
                                });

                            let legend = d3
                                .select(chart)
                                .append("div")
                                .attr("class", "legend")
                                .style("margin-top", "30px");

                            let keys = legend
                                .selectAll(".key")
                                .data(data)
                                .enter()
                                .append("div")
                                .attr("class", "key")
                                .style("display", "flex")
                                .style("align-items", "center")
                                .style("margin-right", "20px");

                            keys
                                .append("div")
                                .attr("class", "symbol")
                                .style("height", "10px")
                                .style("width", "10px")
                                .style("margin", "5px 5px")
                                .style("background-color", (d, i) => color(i));

                            keys
                                .append("div")
                                .attr("class", "name")
                                .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2)})`);

                            keys.exit().remove();

                        },
                        error: function (response) {

                        }
                    });
                }

                if (Report_name == "5") {
                    var losscat = ''
                    if ($("#Loss_Category").val() == "null") {
                        losscat = null
                    }
                    else {
                        losscat = $("#Loss_Category").val()
                    }
                    var myData = {
                        "QueryType": 'Shift_duration',
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line_Code": '@Session["LineCode"]',
                        "shiftid": ShiftID,
                        "date": ShiftDate,
                        "Machine_Code": Machine,
                        "report_type": '1',
                        "loss_category":losscat
                    };

                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {

                            $("#top_10_duration_pareto").show();

                            d3.select("#top_10_pareto_chart svg").remove();

                            $("#top_10_pareto_div").html("Hourly Top 10 Losses based on duration : Pareto");

                            if (response.status != "Error") {

                                sample_pareto = response.data.Table;

                                if (sample_pareto.length < 2) {
                                    $('#top_10_pareto_chart').css("width", "30%");
                                }

                                else if (sample_pareto.length < 5) {
                                    $('#top_10_pareto_chart').css("width", "50%");

                                }
                                else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                    $('#top_10_pareto_chart').css("width", "80%");
                                }
                                else {
                                    $('#top_10_pareto_chart').css("width", "100%");
                                }

                                const a = $('#top_10_pareto_chart').height();
                                const b = $('#top_10_pareto_chart').width();



                                var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                    , h = a - m.top - m.bottom - 25
                                    , w = b - m.left - m.right
                                    , barWidth = 5;

                                var dataset = null;
                                //typecast Amount to #, calculate total, and cumulative amounts


                                //Axes and scales
                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                                xScale.paddingInner(0.2)
                                xScale.paddingOuter(0.2);

                                var yhist = d3.scaleLinear()
                                    .domain([0, d3.max(sample_pareto, function (d) { return d.duration; })])
                                    .range([h, 0]);

                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                var xAxis = d3.axisBottom()
                                    .scale(xScale);


                                var yAxis = d3.axisLeft()
                                    .scale(yhist)


                                var yAxis2 = d3.axisRight()
                                    .scale(ycum);

                                d3.selectAll(".custom > *").remove();

                                var tooltip = d3.select("#top_10_pareto_chart")
                                    .append("div")
                                    .style("opacity", 0)
                                    .attr("class", "tooltip")
                                    .style("background-color", "tranparent")
                                    .style("border", "solid")
                                    .style("border-width", "2px")
                                    .style("border-radius", "5px")
                                    .style("padding", "5px")



                                tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                                toolval = tooltip.append("div");

                                ////Draw svg
                                var svg_pareto = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", w + m.left + m.right)
                                    .attr("height", h + m.top + m.bottom)
                                    .append("g")
                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                //Draw histogram
                                var bar_pareto = svg_pareto.selectAll(".bar")
                                    .data(sample_pareto)
                                    .enter().append("g")
                                    .attr("class", "bar")




                                bar_pareto.append("rect")
                                    .attr("x", function (d) { return xScale(d.loss_description); })
                                    .attr("width", xScale.bandwidth() - 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .attr("height", function (d) { return h - yhist(d.duration); })
                                    .style("fill", function (d) {
                                        if (d.Percentage < 80)
                                        {
                                            return color(d.d)
                                        }
                                        else
                                        {
                                            return "#B8B0AF"
                                        }
                                    })
                                    .attr("fill", color)
                                    .attr("text", function (d) { return `${d.duration}` })

                                    .on("mouseout", function () {
                                        d3.select(this).style('Stroke', 'none');
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 1);
                                        tooltip.style("visibility", "hidden");
                                    })

                                    .on("mousemove", function (d) {
                                        var bar = d3.select(this);
                                        var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 4);
                                        d3.select(this).style('Stroke', 'black');
                                        d3.select(this).style('stroke-width', '2');
                                        d3.select(this).transition()
                                            .style("opacity", 2);
                                        tooltip.style("visibility", "visible")
                                            .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                        var text = 'Duration: ' + d.duration + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                        tooltip.select("div").html(text)


                                    })
                                    //.on("click", function (d) {
                                    //    get_Rejection_data(d.RejectionDescription);

                                    //})


                                bar_pareto.selectAll(".bar-title")
                                    .data(sample_pareto)
                                    .enter()
                                    .append("text")
                                    .classed('bar-title', true)
                                    .attr('text-anchor', 'middle')
                                    .style("color", "black")
                                    .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .text((a) => `${a.duration}`)


                                ////Draw CDF line
                                var guide = d3.line()
                                    .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .y(function (d) { return ycum(d.Percentage) });


                                var line = svg_pareto.append('path')
                                    .datum(sample_pareto)
                                    .attr('d', guide)
                                    .attr('class', 'line');
                                svg_pareto.selectAll(".line")
                                    .data(sample_pareto)
                                    .enter().append("circle")
                                    .attr("r", 3.5)
                                    .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .attr("cy", function (d) { return ycum(d.Percentage) });

                                //Draw axes
                                svg_pareto.append("g")
                                    .attr("class", "x axis")
                                    .attr("transform", "translate(0," + h + ")")
                                    .call(xAxis)
                                    .selectAll("text")
                                    .style("text-anchor", "end")
                                    .attr("transform", "rotate(-65)");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .call(yAxis)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", -50)
                                    .attr("dy", ".71em")
                                    .style("text-anchor", "end")

                                    .text("Duration");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .call(yAxis2)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", 50)
                                    .attr("dy", "-.71em")
                                    .style("text-anchor", "end")
                                    .text("Pareto Percentage");


                                svg_pareto.append("text")
                                    .attr("class", "y label")
                                    //.attr("text-anchor", "end")
                                    .attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "rotate(-90)")
                                    .text("Duration");

                                svg_pareto.append("text")
                                    .attr("class", "y label2")
                                    //.attr("text-anchor", "end")
                                    //.attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", w + 40)
                                    .text("Pareto Percentage %");

                            }
                            else {

                                $("#top_10_pareto_chart").empty();
                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                    .style("font-size", "40px");


                            }
                        },
                        error: function (response) {

                        }
                    });
                }
            }

            else if (Report_name == "6")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Shift',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "shiftid": ShiftID,
                    "date": ShiftDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_MTBF_div").html("Hourly Top 10 Losses based on MTBF");

                        $("#top_10_loss_MTBF_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_MTBF_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_MTBF_table").deleteRow(1);
                            }
                        }

                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + response.data.Table[i].MTBF + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_MTBF_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else
                        {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_MTBF_div").html("Hourly Top 10 Losses based on MTBF - Chart");

                        $("#top_10_loss_MTBF_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var MTBF_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            MTBF_tot += response.data.Table[i].MTBF;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTBF_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.MTBF * 100) / MTBF_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.MTBF * 100) / MTBF_tot).toFixed(2)})`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.MTBF * 100) / MTBF_tot).toFixed(2)})`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "7")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Shift_occurence',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "shiftid": ShiftID,
                    "date": ShiftDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category": losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_Pareto_div").html("Hourly Top 10 Losses based on number of occurences : Pareto");

                        $("#top_10_loss_Pareto_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_Pareto_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_Pareto_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var Occurence_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Occurence_tot += response.data.Table[i].Occurence;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].Occurence * 100) / Occurence_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].Occurence * 100) / Occurence_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_Pareto_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {
                        $("#top_10_occurence_pareto").show();

                        d3.select("#top_10_Occurence_pareto_chart svg").remove();

                        $("#top_10_Occurence_pareto_div").html("Hourly Top 10 Losses based on number of occurences : Pareto");

                        if (response.status != "Error") {
                            sample_pareto = response.data.Table;

                            if (sample_pareto.length < 2) {
                                $('#top_10_Occurence_pareto_chart').css("width", "30%");
                            }

                            else if (sample_pareto.length < 5) {
                                $('#top_10_Occurence_pareto_chart').css("width", "50%");

                            }
                            else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                $('#top_10_Occurence_pareto_chart').css("width", "80%");
                            }
                            else {
                                $('#top_10_Occurence_pareto_chart').css("width", "100%");
                            }

                            const a = $('#top_10_Occurence_pareto_chart').height();
                            const b = $('#top_10_Occurence_pareto_chart').width();



                            var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                , h = a - m.top - m.bottom - 25
                                , w = b - m.left - m.right
                                , barWidth = 5;

                            var dataset = null;
                            //typecast Amount to #, calculate total, and cumulative amounts


                            //Axes and scales
                            var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                            xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                            xScale.paddingInner(0.2)
                            xScale.paddingOuter(0.2);

                            var yhist = d3.scaleLinear()
                                .domain([0, d3.max(sample_pareto, function (d) { return d.Occurence; })])
                                .range([h, 0]);

                            var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                            var xAxis = d3.axisBottom()
                                .scale(xScale);


                            var yAxis = d3.axisLeft()
                                .scale(yhist)


                            var yAxis2 = d3.axisRight()
                                .scale(ycum);

                            d3.selectAll(".custom > *").remove();

                            var tooltip = d3.select("#top_10_Occurence_pareto_chart")
                                .append("div")
                                .style("opacity", 0)
                                .attr("class", "tooltip")
                                .style("background-color", "tranparent")
                                .style("border", "solid")
                                .style("border-width", "2px")
                                .style("border-radius", "5px")
                                .style("padding", "5px")



                            tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                            toolval = tooltip.append("div");

                            ////Draw svg
                            var svg_pareto = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", w + m.left + m.right)
                                .attr("height", h + m.top + m.bottom)
                                .append("g")
                                .attr("transform", "translate(" + m.left + "," + m.top + ")");




                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            //Draw histogram
                            var bar_pareto = svg_pareto.selectAll(".bar")
                                .data(sample_pareto)
                                .enter().append("g")
                                .attr("class", "bar")




                            bar_pareto.append("rect")
                                .attr("x", function (d) { return xScale(d.loss_description); })
                                .attr("width", xScale.bandwidth() - 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .attr("height", function (d) { return h - yhist(d.Occurence); })
                                .style("fill", function (d) {
                                    if (d.Percentage < 80) {
                                        return color(d.d)
                                    }
                                    else {
                                        return "#B8B0AF"
                                    }
                                })
                                .attr("fill", color)
                                .attr("text", function (d) { return `${d.Occurence}` })

                                .on("mouseout", function () {
                                    d3.select(this).style('Stroke', 'none');
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 1);
                                    tooltip.style("visibility", "hidden");
                                })

                                .on("mousemove", function (d) {
                                    var bar = d3.select(this);
                                    var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 4);
                                    d3.select(this).style('Stroke', 'black');
                                    d3.select(this).style('stroke-width', '2');
                                    d3.select(this).transition()
                                        .style("opacity", 2);
                                    tooltip.style("visibility", "visible")
                                        .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                    var text = 'Occurence: ' + d.Occurence + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                    tooltip.select("div").html(text)


                                })
                            //.on("click", function (d) {
                            //    get_Rejection_data(d.RejectionDescription);

                            //})


                            bar_pareto.selectAll(".bar-title")
                                .data(sample_pareto)
                                .enter()
                                .append("text")
                                .classed('bar-title', true)
                                .attr('text-anchor', 'middle')
                                .style("color", "black")
                                .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .text((a) => `${a.Occurence}`)


                            ////Draw CDF line
                            var guide = d3.line()
                                .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .y(function (d) { return ycum(d.Percentage) });


                            var line = svg_pareto.append('path')
                                .datum(sample_pareto)
                                .attr('d', guide)
                                .attr('class', 'line');
                            svg_pareto.selectAll(".line")
                                .data(sample_pareto)
                                .enter().append("circle")
                                .attr("r", 3.5)
                                .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .attr("cy", function (d) { return ycum(d.Percentage) });

                            //Draw axes
                            svg_pareto.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + h + ")")
                                .call(xAxis)
                                .selectAll("text")
                                .style("text-anchor", "end")
                                .attr("transform", "rotate(-65)");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .call(yAxis)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", -50)
                                .attr("dy", ".71em")
                                .style("text-anchor", "end")

                                .text("Occurence");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .attr("transform", "translate(" + [w, 0] + ")")
                                .call(yAxis2)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", 50)
                                .attr("dy", "-.71em")
                                .style("text-anchor", "end")
                                .text("Pareto Percentage");


                            svg_pareto.append("text")
                                .attr("class", "y label")
                                //.attr("text-anchor", "end")
                                .attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "rotate(-90)")
                                .text("Occurence");

                            svg_pareto.append("text")
                                .attr("class", "y label2")
                                //.attr("text-anchor", "end")
                                //.attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "translate(" + [w, 0] + ")")
                                .attr("transform", "rotate(-90)")
                                .attr("y", w + 40)
                                .text("Pareto Percentage %");

                        }
                        else {
                            $("#top_10_Occurence_pareto_chart").empty();
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            svg.append("text")
                                .text("No Data Available")
                                .style("font-size", "40px");
                        }
                    },
                    error: function (response) {

                    }
                });
            }
        }

        //Daily
        else if (TimeSlot == "2") {
            if (Date == "") {
                swal({
                    icon: "error",
                    title: "Please Select Date...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
            if (Loss_Name == "") {
                swal({
                    icon: "error",
                    title: "Please Select Loss Name...!",
                    button: true,
                    timer: 4500
                })
                return;
            }
            if (Report_name == "1") {
                var myData = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "Date": Date,
                    "Machine": Machine,
                    /* "Loss": Loss_Name,*/
                    "Loss": Loss_id,
                };
                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Daywise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#Shiftwise_Specific_trend").show();
                        $("#Shiftwise_Specific_trend_chart").show();

                        var rowsCnt = document.getElementById("datatable_specific_shift").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_specific_shift").deleteRow(1);
                            }
                        }

                        if (response.status != "Error") {

                            if (response.data.Table.length != 0) {
                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Shift_ID + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurance_per + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".Specific_shift_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else
                        {
                            $(".pre_error").text(response.msg);
                        }


                    },
                    error: function (response) {

                    }
                });


                var Data = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "Date": Date,
                    "Machine": Machine,
                    "Loss": Loss_Name,
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Daywise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (result) {

                        $("#Shiftwise_Specific_trend").show();
                        $("#Shiftwise_Specific_trend_chart").show();

                        d3.select("svg").remove();

                        // If data is not available
                        if (typeof result.data.Table === "undefined") {

                            // Output error
                            $(".Shift_chart_specific").text("No Data Available.");

                            // Otherwise
                        } else {

                            var data = result.data.Table;
                            // Set SVGs dimensions and margins
                            var margin = { top: 20, right: 20, bottom: 30, left: 50 },
                                width = 960 - margin.left - margin.right,
                                height = 300 - margin.top - margin.bottom;

                            // Setup ranges
                            var x = d3.scaleBand().range([0, width]),
                                y = d3.scaleLinear().range([height, 0]);


                            // Setup line
                            var valueline = d3.line()
                                .x(function (d) { return x(d.Shift_ID); })
                                .y(function (d) { return y(d.Occurence); });

                            // Setup tooltips
                            var div = d3.select(".Shift_chart_specific").append("div")
                                .attr("class", "tooltip")
                                .style("opacity", 0);

                            // Append SVG to container DIV, append group to SVG
                            var svg = d3.select(".Shift_chart_specific").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform",
                                    "translate( " + margin.left + ", " + margin.top + " )");

                            // Format the data
                            data.forEach(function (d) {
                                d.Shift_ID = d.Shift_ID;
                                d.Occurence = +d.Occurence;
                            });

                            x.domain(data.map(function (d) { return d.Shift_ID; }));

                            y.domain([0, d3.max(data, function (d) { return d.Occurence; })]);

                            // Append the line to the graph
                            svg.append("path")
                                .data([data])
                                .attr("class", "line")
                                .attr("d", valueline);

                            // Append tooltips to the graph
                            svg.selectAll("dot")
                                .data(data)
                                .enter().append("circle")
                                .attr("class", "node")
                                .attr("r", 5)
                                .attr("cx", function (d) { return x(d.Shift_ID); })
                                .attr("cy", function (d) { return y(d.Occurence); })
                                .on("mouseover", function (d) {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 1);
                                    div.html(d.Shift_ID + "<br/>" + d.Occurence)
                                })
                                .on("mousemove", function () {
                                    return div
                                        .style("top", (d3.event.pageY + 16) + "px")
                                        .style("left", (d3.event.pageX + 16) + "px");
                                })
                                .on("mouseout", function () {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 0);
                                });

                            // Append X Axis to the graph
                            svg.append("g")
                                .attr("transform", "translate( 0," + height + " )")
                                .call(d3.axisBottom(x))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "middle")
                                .attr('x', 450)
                                .attr('y', 40)
                                .text("Shift ID");

                            // Append Y Axis to the graph
                            svg.append("g")
                                .call(d3.axisLeft(y))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "start")
                                .text("Occurense");
                        }

                    },
                    error: function (result) {

                    }
                });

            }

            else if (Report_name == "2") {
                var myData = {
                    "QueryType": 'Loss_splitup',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "date": Date,
                    "Machine_Code": Machine,
                    "report_type": Loss_Name,
                };

                localStorage.setItem('machine', Machine)
                localStorage.setItem('report', Report_name)
                localStorage.setItem('timeslot', TimeSlot)
                localStorage.setItem('subassembly', $("Subassambly").val())
                localStorage.setItem('losscat', $("#Loss_Category").val())
                localStorage.setItem('lossname', Loss_Name)
                localStorage.setItem('sdate', Date)



                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#Daily_splitup_table").show();

                        var rowsCnt = document.getElementById("datatable_loss_splitup").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_loss_splitup").deleteRow(1);
                            }
                        }

                        if ($.fn.DataTable.isDataTable('#datatable_loss_splitup')) {
                            $('#datatable_loss_splitup').DataTable().clear();
                        }

                        if ($.fn.DataTable.isDataTable('#datatable_loss_splitup')) {
                            $('#datatable_loss_splitup').DataTable().destroy();
                        }


                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {

                                    var actualtemp = '', actremarks = ''
                                    if (response.data.Table[i].Actual_Data == null || response.data.Table[i].Actual_Data) {
                                        actualtemp = response.data.Table[i].Loss_Description;
                                    }
                                    else {
                                        actualtemp = response.data.Table[i].Actual_Data;
                                    }

                                    if (response.data.Table[i].Remarks == null || response.data.Table[i].Remarks) {
                                        actremarks = '';
                                    }
                                    else {
                                        actremarks = response.data.Table[i].Remarks;
                                    }
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Start + "</td> ";
                                    cols += "<td> " + response.data.Table[i].End + "</td> ";
                                    cols += "<td> " + response.data.Table[i].time_diff + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Loss_Description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Loss_Type + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Loss_Category + "</td> ";
                                    //cols += "<td> " + response.data.Table[i].Reason + "</td> ";
                                    cols += "<td> " + actualtemp + "</td> ";
                                    cols += "<td> " + actremarks + "</td> ";
                                    cols += "<td style='text-align:center;'> <a class='Edit'><span class='fa fa-pencil-square-o fa-2x' onclick='return update_loss(" + response.data.Table[i].ID + ");' data-toggle='modal' data-target='#exampleModal'></span></a>  </td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".daily_splitup_details").append(newRow);
                                    j++;
                                }

                                var rawtable_table = $('#datatable_loss_splitup').DataTable({
                                    "responsive": true,
                                    "autoWidth": false,
                                    "scrollCollapse": true,
                                    dom: 'Bfrtip',
                                    buttons: [
                                        'excel'
                                    ]
                                });
                            }
                        }
                        else
                        {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response)
                    {

                    }
                });
            }

            else if (Report_name == "3")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {

                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }


                var myData = {
                    "QueryType": 'Date',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "date": Date,
                    "Machine_Code": Machine,
                    "report_type": '2',
                    "loss_category": losscat
                };

                 $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#loss_div").html("Daywise Duration of Loss - Table (MTTR)");

                        $("#Horly_duration_loss").show();

                        var rowsCnt = document.getElementById("datatable_horly_duration_loss").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_horly_duration_loss").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;
                                }

                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration  + "</td> ";

                                  /*  cols += "<td> " + response.data.Table[i].duration + "</td> ";*/
                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(2) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".hourly_loss_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                 $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#MTTR_loss_div").html("Daily Duration of Loss - Chart (MTTR)");

                        $("#MTTR_duration_loss_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var duration_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            duration_tot += response.data.Table[i].duration;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTTR_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.duration * 100) / duration_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2) })`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${ ((d.duration * 100) / duration_tot).toFixed(2) })`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "4" || Report_name == "5")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }

                var myData = {
                    "QueryType": 'Date',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "date": Date,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                var myData_new = {
                    "QueryType": 'Date_duration',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "date": Date,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData_new,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_div").html("Daily Top 10 Losses based on Duration");

                        $("#top_10_duration_chart_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_duration_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_duration_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;

                                }

                                var j = 1;
                                var Cum_percentage = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].duration * 100) / duration_tot;

                                    var newRow = $("<tr>");
                                    var cols = '';
                                  /*  /cols += "<td> " + j + "</td> ";*/
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration + "</td> ";

                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_duration_table").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                if (Report_name == "4") {

                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {

                            $("#top_10_duration_loss_div").html("Daily Top 10 Losses based on duration - Chart");

                            $("#top_10_duration_loss_chart").show();

                            d3.select("svg").remove();

                            $(".legend").remove();

                            var duration_tot = 0;

                            for (var i = 0; i < response.data.Table.length; i++) {
                                duration_tot += response.data.Table[i].duration;
                            }

                            var data = response.data.Table;

                            var text = "";
                            var width = 200;
                            var height = 200;
                            var thickness = 40;
                            var duration = 750;
                            var padding = 10;
                            var opacity = 0.8;
                            var opacityHover = 1;
                            var otherOpacityOnHover = 0.8;
                            var tooltipMargin = 13;
                            var chart = ".duration_chart_details";

                            var radius = Math.min(width - padding, height - padding) / 2;
                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            var svg = d3
                                .select(chart)
                                .append("svg")
                                .attr("class", "pie")
                                .attr("width", width)
                                .attr("height", height);

                            var g = svg
                                .append("g")
                                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                            var arc = d3
                                .arc()
                                .innerRadius(0)
                                .outerRadius(radius);

                            var pie = d3
                                .pie()
                                .value(function (d) {
                                    return (d.duration * 100) / duration_tot;
                                })
                                .sort(null);

                            var path = g
                                .selectAll("path")
                                .data(pie(data))
                                .enter()
                                .append("g")
                                .append("path")
                                .attr("d", arc)
                                .attr("fill", (d, i) => color(i))
                                .style("opacity", opacity)
                                .style("stroke", "white")
                                .on("mouseover", function (d) {
                                    d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                    d3.select(this).style("opacity", opacityHover);

                                    let g = d3
                                        .select("svg")
                                        .style("cursor", "pointer")
                                        .append("g")
                                        .attr("class", "tooltip")
                                        .style("opacity", 0);

                                    g.append("text")
                                        .attr("class", "name-text")
                                        .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2)})`)
                                        .attr("text-anchor", "middle");

                                    let text = g.select("text");
                                    let bbox = text.node().getBBox();
                                    let padding = 2;
                                    g.insert("rect", "text")
                                        .attr("x", bbox.x - padding)
                                        .attr("y", bbox.y - padding)
                                        .attr("width", bbox.width + padding * 2)
                                        .attr("height", bbox.height + padding * 2)
                                        .style("fill", "white")
                                        .style("opacity", 0.75);
                                })
                                .on("mousemove", function (d) {
                                    let mousePosition = d3.mouse(this);
                                    let x = mousePosition[0] + width / 2;
                                    let y = mousePosition[1] + height / 2 - tooltipMargin;

                                    let text = d3.select(".tooltip text");
                                    let bbox = text.node().getBBox();
                                    if (x - bbox.width / 2 < 0) {
                                        x = bbox.width / 2;
                                    } else if (width - x - bbox.width / 2 < 0) {
                                        x = width - bbox.width / 2;
                                    }

                                    if (y - bbox.height / 2 < 0) {
                                        y = bbox.height + tooltipMargin * 2;
                                    } else if (height - y - bbox.height / 2 < 0) {
                                        y = height - bbox.height / 2;
                                    }

                                    d3.select(".tooltip")
                                        .style("opacity", 1)
                                        .attr("transform", `translate(${x}, ${y})`);
                                })
                                .on("mouseout", function (d) {
                                    d3.select("svg")
                                        .style("cursor", "none")
                                        .select(".tooltip")
                                        .remove();
                                    d3.selectAll("path").style("opacity", opacity);
                                })
                                .on("touchstart", function (d) {
                                    d3.select("svg").style("cursor", "none");
                                })
                                .each(function (d, i) {
                                    this._current = i;
                                });

                            let legend = d3
                                .select(chart)
                                .append("div")
                                .attr("class", "legend")
                                .style("margin-top", "30px");

                            let keys = legend
                                .selectAll(".key")
                                .data(data)
                                .enter()
                                .append("div")
                                .attr("class", "key")
                                .style("display", "flex")
                                .style("align-items", "center")
                                .style("margin-right", "20px");

                            keys
                                .append("div")
                                .attr("class", "symbol")
                                .style("height", "10px")
                                .style("width", "10px")
                                .style("margin", "5px 5px")
                                .style("background-color", (d, i) => color(i));

                            keys
                                .append("div")
                                .attr("class", "name")
                                .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2)})`);

                            keys.exit().remove();

                        },
                        error: function (response) {

                        }
                    });
                }

                if (Report_name == "5") {
                    var losscat = ''
                    if ($("#Loss_Category").val() == "null") {
                        losscat = null
                    }
                    else {
                        losscat = $("#Loss_Category").val()
                    }
                    var myData = {
                        "QueryType": 'Date_duration',
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line_Code": '@Session["LineCode"]',
                        "date": Date,
                        "Machine_Code": Machine,
                        "report_type": '1',
                        "loss_category":losscat
                    };

                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {
                            $("#top_10_duration_pareto").show();

                            d3.select("#top_10_pareto_chart svg").remove();

                            $("#top_10_pareto_div").html("Daily Top 10 Losses based on duration : Pareto");

                            if (response.status != "Error") {

                                sample_pareto = response.data.Table;

                                if (sample_pareto.length < 2) {
                                    $('#top_10_pareto_chart').css("width", "30%");
                                }

                                else if (sample_pareto.length < 5) {
                                    $('#top_10_pareto_chart').css("width", "50%");

                                }
                                else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                    $('#top_10_pareto_chart').css("width", "80%");
                                }
                                else {
                                    $('#top_10_pareto_chart').css("width", "100%");
                                }

                                const a = $('#top_10_pareto_chart').height();
                                const b = $('#top_10_pareto_chart').width();



                                var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                    , h = a - m.top - m.bottom - 25
                                    , w = b - m.left - m.right
                                    , barWidth = 5;

                                var dataset = null;
                                //typecast Amount to #, calculate total, and cumulative amounts


                                //Axes and scales
                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                                xScale.paddingInner(0.2)
                                xScale.paddingOuter(0.2);

                                var yhist = d3.scaleLinear()
                                    .domain([0, d3.max(sample_pareto, function (d) { return d.duration; })])
                                    .range([h, 0]);

                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                var xAxis = d3.axisBottom()
                                    .scale(xScale);


                                var yAxis = d3.axisLeft()
                                    .scale(yhist)


                                var yAxis2 = d3.axisRight()
                                    .scale(ycum);

                                d3.selectAll(".custom > *").remove();

                                var tooltip = d3.select("#top_10_pareto_chart")
                                    .append("div")
                                    .style("opacity", 0)
                                    .attr("class", "tooltip")
                                    .style("background-color", "tranparent")
                                    .style("border", "solid")
                                    .style("border-width", "2px")
                                    .style("border-radius", "5px")
                                    .style("padding", "5px")



                                tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                                toolval = tooltip.append("div");

                                ////Draw svg
                                var svg_pareto = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", w + m.left + m.right)
                                    .attr("height", h + m.top + m.bottom)
                                    .append("g")
                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                //Draw histogram
                                var bar_pareto = svg_pareto.selectAll(".bar")
                                    .data(sample_pareto)
                                    .enter().append("g")
                                    .attr("class", "bar")




                                bar_pareto.append("rect")
                                    .attr("x", function (d) { return xScale(d.loss_description); })
                                    .attr("width", xScale.bandwidth() - 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .attr("height", function (d) { return h - yhist(d.duration); })
                                    .style("fill", function (d) {
                                        if (d.Percentage < 80) {
                                            return color(d.d)
                                        }
                                        else {
                                            return "#B8B0AF"
                                        }
                                    })
                                    .attr("fill", color)
                                    .attr("text", function (d) { return `${d.duration}` })

                                    .on("mouseout", function () {
                                        d3.select(this).style('Stroke', 'none');
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 1);
                                        tooltip.style("visibility", "hidden");
                                    })

                                    .on("mousemove", function (d) {
                                        var bar = d3.select(this);
                                        var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 4);
                                        d3.select(this).style('Stroke', 'black');
                                        d3.select(this).style('stroke-width', '2');
                                        d3.select(this).transition()
                                            .style("opacity", 2);
                                        tooltip.style("visibility", "visible")
                                            .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                        var text = 'Duration: ' + d.duration + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                        tooltip.select("div").html(text)


                                    })
                                //.on("click", function (d) {
                                //    get_Rejection_data(d.RejectionDescription);

                                //})


                                bar_pareto.selectAll(".bar-title")
                                    .data(sample_pareto)
                                    .enter()
                                    .append("text")
                                    .classed('bar-title', true)
                                    .attr('text-anchor', 'middle')
                                    .style("color", "black")
                                    .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .text((a) => `${a.duration}`)


                                ////Draw CDF line
                                var guide = d3.line()
                                    .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .y(function (d) { return ycum(d.Percentage) });


                                var line = svg_pareto.append('path')
                                    .datum(sample_pareto)
                                    .attr('d', guide)
                                    .attr('class', 'line');
                                svg_pareto.selectAll(".line")
                                    .data(sample_pareto)
                                    .enter().append("circle")
                                    .attr("r", 3.5)
                                    .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .attr("cy", function (d) { return ycum(d.Percentage) });

                                //Draw axes
                                svg_pareto.append("g")
                                    .attr("class", "x axis")
                                    .attr("transform", "translate(0," + h + ")")
                                    .call(xAxis)
                                    .selectAll("text")
                                    .style("text-anchor", "end")
                                    .attr("transform", "rotate(-65)");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .call(yAxis)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", -50)
                                    .attr("dy", ".71em")
                                    .style("text-anchor", "end")

                                    .text("Duration");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .call(yAxis2)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", 50)
                                    .attr("dy", "-.71em")
                                    .style("text-anchor", "end")
                                    .text("Pareto Percentage");


                                svg_pareto.append("text")
                                    .attr("class", "y label")
                                    //.attr("text-anchor", "end")
                                    .attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "rotate(-90)")
                                    .text("Duration");

                                svg_pareto.append("text")
                                    .attr("class", "y label2")
                                    //.attr("text-anchor", "end")
                                    //.attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", w + 40)
                                    .text("Pareto Percentage %");


                            }
                            else {
                                $("#top_10_pareto_chart").empty();
                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                    .style("font-size", "40px");
                            }
                        },
                        error: function (response) {

                        }
                    });
                }
            }

            else if (Report_name == "6")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Date',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "date": Date,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_MTBF_div").html("Daily Top 10 Losses based on MTBF");

                        $("#top_10_loss_MTBF_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_MTBF_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_MTBF_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + response.data.Table[i].MTBF + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_MTBF_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_MTBF_div").html("Daily Top 10 Losses based on MTBF - Chart");

                        $("#top_10_loss_MTBF_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var MTBF_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            MTBF_tot += response.data.Table[i].MTBF;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTBF_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.MTBF * 100) / MTBF_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.MTBF * 100) / MTBF_tot).toFixed(2)})`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.MTBF * 100) / MTBF_tot).toFixed(2)})`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "7")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Date_occurence',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "date": Date,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_Pareto_div").html("Daily Top 10 Losses based on number of occurences : Pareto");

                        $("#top_10_loss_Pareto_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_Pareto_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_Pareto_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var Occurence_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Occurence_tot += response.data.Table[i].Occurence;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].Occurence * 100) / Occurence_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].Occurence * 100) / Occurence_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_Pareto_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {
                        $("#top_10_occurence_pareto").show();

                        d3.select("#top_10_Occurence_pareto_chart svg").remove();

                        $("#top_10_Occurence_pareto_div").html("Daily Top 10 Losses based on number of occurences : Pareto");

                        if (response.status != "Error") {

                            sample_pareto = response.data.Table;

                            if (sample_pareto.length < 2) {
                                $('#top_10_Occurence_pareto_chart').css("width", "30%");
                            }

                            else if (sample_pareto.length < 5) {
                                $('#top_10_Occurence_pareto_chart').css("width", "50%");

                            }
                            else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                $('#top_10_Occurence_pareto_chart').css("width", "80%");
                            }
                            else {
                                $('#top_10_Occurence_pareto_chart').css("width", "100%");
                            }

                            const a = $('#top_10_Occurence_pareto_chart').height();
                            const b = $('#top_10_Occurence_pareto_chart').width();



                            var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                , h = a - m.top - m.bottom - 25
                                , w = b - m.left - m.right
                                , barWidth = 5;

                            var dataset = null;
                            //typecast Amount to #, calculate total, and cumulative amounts


                            //Axes and scales
                            var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                            xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                            xScale.paddingInner(0.2)
                            xScale.paddingOuter(0.2);

                            var yhist = d3.scaleLinear()
                                .domain([0, d3.max(sample_pareto, function (d) { return d.Occurence; })])
                                .range([h, 0]);

                            var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                            var xAxis = d3.axisBottom()
                                .scale(xScale);


                            var yAxis = d3.axisLeft()
                                .scale(yhist)


                            var yAxis2 = d3.axisRight()
                                .scale(ycum);

                            d3.selectAll(".custom > *").remove();

                            var tooltip = d3.select("#top_10_Occurence_pareto_chart")
                                .append("div")
                                .style("opacity", 0)
                                .attr("class", "tooltip")
                                .style("background-color", "tranparent")
                                .style("border", "solid")
                                .style("border-width", "2px")
                                .style("border-radius", "5px")
                                .style("padding", "5px")



                            tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                            toolval = tooltip.append("div");

                            ////Draw svg
                            var svg_pareto = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", w + m.left + m.right)
                                .attr("height", h + m.top + m.bottom)
                                .append("g")
                                .attr("transform", "translate(" + m.left + "," + m.top + ")");




                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            //Draw histogram
                            var bar_pareto = svg_pareto.selectAll(".bar")
                                .data(sample_pareto)
                                .enter().append("g")
                                .attr("class", "bar")




                            bar_pareto.append("rect")
                                .attr("x", function (d) { return xScale(d.loss_description); })
                                .attr("width", xScale.bandwidth() - 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .attr("height", function (d) { return h - yhist(d.Occurence); })
                                .style("fill", function (d) {
                                    if (d.Percentage < 80) {
                                        return color(d.d)
                                    }
                                    else {
                                        return "#B8B0AF"
                                    }
                                })
                                .attr("fill", color)
                                .attr("text", function (d) { return `${d.Occurence}` })

                                .on("mouseout", function () {
                                    d3.select(this).style('Stroke', 'none');
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 1);
                                    tooltip.style("visibility", "hidden");
                                })

                                .on("mousemove", function (d) {
                                    var bar = d3.select(this);
                                    var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 4);
                                    d3.select(this).style('Stroke', 'black');
                                    d3.select(this).style('stroke-width', '2');
                                    d3.select(this).transition()
                                        .style("opacity", 2);
                                    tooltip.style("visibility", "visible")
                                        .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                    var text = 'Occurence: ' + d.Occurence + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                    tooltip.select("div").html(text)


                                })
                            //.on("click", function (d) {
                            //    get_Rejection_data(d.RejectionDescription);

                            //})


                            bar_pareto.selectAll(".bar-title")
                                .data(sample_pareto)
                                .enter()
                                .append("text")
                                .classed('bar-title', true)
                                .attr('text-anchor', 'middle')
                                .style("color", "black")
                                .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .text((a) => `${a.Occurence}`)


                            ////Draw CDF line
                            var guide = d3.line()
                                .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .y(function (d) { return ycum(d.Percentage) });


                            var line = svg_pareto.append('path')
                                .datum(sample_pareto)
                                .attr('d', guide)
                                .attr('class', 'line');
                            svg_pareto.selectAll(".line")
                                .data(sample_pareto)
                                .enter().append("circle")
                                .attr("r", 3.5)
                                .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .attr("cy", function (d) { return ycum(d.Percentage) });

                            //Draw axes
                            svg_pareto.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + h + ")")
                                .call(xAxis)
                                .selectAll("text")
                                .style("text-anchor", "end")
                                .attr("transform", "rotate(-65)");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .call(yAxis)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", -50)
                                .attr("dy", ".71em")
                                .style("text-anchor", "end")

                                .text("Occurence");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .attr("transform", "translate(" + [w, 0] + ")")
                                .call(yAxis2)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", 50)
                                .attr("dy", "-.71em")
                                .style("text-anchor", "end")
                                .text("Pareto Percentage");


                            svg_pareto.append("text")
                                .attr("class", "y label")
                                //.attr("text-anchor", "end")
                                .attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "rotate(-90)")
                                .text("Occurence");

                            svg_pareto.append("text")
                                .attr("class", "y label2")
                                //.attr("text-anchor", "end")
                                //.attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "translate(" + [w, 0] + ")")
                                .attr("transform", "rotate(-90)")
                                .attr("y", w + 40)
                                .text("Pareto Percentage %");

                        }
                        else {
                            $("#top_10_Occurence_pareto_chart").empty();
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            svg.append("text")
                                .text("No Data Available")
                                .style("font-size", "40px");
                        }
                    },
                    error: function (response) {

                    }
                });
            }
        }

            //Monthly
        else if (TimeSlot == "3") {

            if (Month == "") {
                swal({
                    icon: "error",
                    title: "Please Select Month...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (Loss_Name == "") {
                swal({
                    icon: "error",
                    title: "Please Select Loss Name...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (Report_name == "1") {
                var myData = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "Date": Month,
                    "Machine": Machine,
                    /*"Loss": Loss_Name,*/
                    "Loss": Loss_id,

                };
                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Monthwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#Monthly_Specific_trend").show();
                        $("#Monthly_Specific_trend_chart").show();

                        var rowsCnt = document.getElementById("datatable_specific_month").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_specific_month").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Week + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurance + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurance_per + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".Specific_month_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });



                var Data = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "Date": Month,
                    "Machine": Machine,
                    "Loss": Loss_Name,
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Monthwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (result) {

                        $("#Monthly_Specific_trend").show();
                        $("#Monthly_Specific_trend_chart").show();

                        d3.select("svg").remove();

                        // If data is not available
                        if (typeof result.data.Table === "undefined") {

                            // Output error
                            $(".Month_chart_specific").text("No Data Available.");

                            // Otherwise
                        } else {

                            var data = result.data.Table;
                            // Set SVGs dimensions and margins
                            var margin = { top: 20, right: 20, bottom: 30, left: 50 },
                                width = 960 - margin.left - margin.right,
                                height = 300 - margin.top - margin.bottom;

                            // Setup ranges
                            var x = d3.scaleBand().range([0, width]),
                                y = d3.scaleLinear().range([height, 0]);


                            // Setup line
                            var valueline = d3.line()
                                .x(function (d) { return x(d.Week); })
                                .y(function (d) { return y(d.Occurance); });

                            // Setup tooltips
                            var div = d3.select(".Month_chart_specific").append("div")
                                .attr("class", "tooltip")
                                .style("opacity", 0);

                            // Append SVG to container DIV, append group to SVG
                            var svg = d3.select(".Month_chart_specific").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform",
                                    "translate( " + margin.left + ", " + margin.top + " )");

                            // Format the data
                            data.forEach(function (d) {
                                d.Week = d.Week;
                                d.Occurance = +d.Occurance;
                            });

                            x.domain(data.map(function (d) { return d.Week; }));

                            y.domain([0, d3.max(data, function (d) { return d.Occurance; })]);

                            // Append the line to the graph
                            svg.append("path")
                                .data([data])
                                .attr("class", "line")
                                .attr("d", valueline);

                            // Append tooltips to the graph
                            svg.selectAll("dot")
                                .data(data)
                                .enter().append("circle")
                                .attr("class", "node")
                                .attr("r", 5)
                                .attr("cx", function (d) { return x(d.Week); })
                                .attr("cy", function (d) { return y(d.Occurance); })
                                .on("mouseover", function (d) {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 1);
                                    div.html(d.Week + "<br/>" + d.Occurance)
                                })
                                .on("mousemove", function () {
                                    return div
                                        .style("top", (d3.event.pageY + 16) + "px")
                                        .style("left", (d3.event.pageX + 16) + "px");
                                })
                                .on("mouseout", function () {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 0);
                                });

                            // Append X Axis to the graph
                            svg.append("g")
                                .attr("transform", "translate( 0," + height + " )")
                                .call(d3.axisBottom(x))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "middle")
                                .attr('x', 450)
                                .attr('y', 40)
                                .text("Week");

                            // Append Y Axis to the graph
                            svg.append("g")
                                .call(d3.axisLeft(y))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "start")
                                .text("Occurense");
                        }

                    },
                    error: function (result) {

                    }
                });

            }

            else if (Report_name == "3")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Month',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "month": Month,
                    "Machine_Code": Machine,
                    "report_type": '2',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#loss_div").html("Monthly Duration of Loss - Table (MTTR)");

                        $("#Horly_duration_loss").show();

                        var rowsCnt = document.getElementById("datatable_horly_duration_loss").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_horly_duration_loss").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;
                                }

                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                    cols += "<td> " + response.data.Table[i].tot_duration + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(2) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".hourly_loss_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#MTTR_loss_div").html("Monthly Duration of Loss - Chart (MTTR)");

                        $("#MTTR_duration_loss_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var duration_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            duration_tot += response.data.Table[i].duration;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTTR_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.duration * 100) / duration_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2) })`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2) })`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "4" || Report_name == "5")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Month',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "month": Month,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                var myData_new = {
                    "QueryType": 'Month_duration',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "month": Month,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData_new,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_div").html("Monthly Top 10 Losses based on Duration");

                        $("#top_10_duration_chart_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_duration_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_duration_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].duration * 100) / duration_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_duration_table").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                if (Report_name == "4") {
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {

                            $("#top_10_duration_loss_div").html("Monthly Top 10 Losses based on duration - Chart");

                            $("#top_10_duration_loss_chart").show();

                            d3.select("svg").remove();

                            $(".legend").remove();

                            var duration_tot = 0;

                            for (var i = 0; i < response.data.Table.length; i++) {
                                duration_tot += response.data.Table[i].duration;
                            }

                            var data = response.data.Table;

                            var text = "";
                            var width = 200;
                            var height = 200;
                            var thickness = 40;
                            var duration = 750;
                            var padding = 10;
                            var opacity = 0.8;
                            var opacityHover = 1;
                            var otherOpacityOnHover = 0.8;
                            var tooltipMargin = 13;
                            var chart = ".duration_chart_details";

                            var radius = Math.min(width - padding, height - padding) / 2;
                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            var svg = d3
                                .select(chart)
                                .append("svg")
                                .attr("class", "pie")
                                .attr("width", width)
                                .attr("height", height);

                            var g = svg
                                .append("g")
                                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                            var arc = d3
                                .arc()
                                .innerRadius(0)
                                .outerRadius(radius);

                            var pie = d3
                                .pie()
                                .value(function (d) {
                                    return (d.duration * 100) / duration_tot;
                                })
                                .sort(null);

                            var path = g
                                .selectAll("path")
                                .data(pie(data))
                                .enter()
                                .append("g")
                                .append("path")
                                .attr("d", arc)
                                .attr("fill", (d, i) => color(i))
                                .style("opacity", opacity)
                                .style("stroke", "white")
                                .on("mouseover", function (d) {
                                    d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                    d3.select(this).style("opacity", opacityHover);

                                    let g = d3
                                        .select("svg")
                                        .style("cursor", "pointer")
                                        .append("g")
                                        .attr("class", "tooltip")
                                        .style("opacity", 0);

                                    g.append("text")
                                        .attr("class", "name-text")
                                        .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2)})`)
                                        .attr("text-anchor", "middle");

                                    let text = g.select("text");
                                    let bbox = text.node().getBBox();
                                    let padding = 2;
                                    g.insert("rect", "text")
                                        .attr("x", bbox.x - padding)
                                        .attr("y", bbox.y - padding)
                                        .attr("width", bbox.width + padding * 2)
                                        .attr("height", bbox.height + padding * 2)
                                        .style("fill", "white")
                                        .style("opacity", 0.75);
                                })
                                .on("mousemove", function (d) {
                                    let mousePosition = d3.mouse(this);
                                    let x = mousePosition[0] + width / 2;
                                    let y = mousePosition[1] + height / 2 - tooltipMargin;

                                    let text = d3.select(".tooltip text");
                                    let bbox = text.node().getBBox();
                                    if (x - bbox.width / 2 < 0) {
                                        x = bbox.width / 2;
                                    } else if (width - x - bbox.width / 2 < 0) {
                                        x = width - bbox.width / 2;
                                    }

                                    if (y - bbox.height / 2 < 0) {
                                        y = bbox.height + tooltipMargin * 2;
                                    } else if (height - y - bbox.height / 2 < 0) {
                                        y = height - bbox.height / 2;
                                    }

                                    d3.select(".tooltip")
                                        .style("opacity", 1)
                                        .attr("transform", `translate(${x}, ${y})`);
                                })
                                .on("mouseout", function (d) {
                                    d3.select("svg")
                                        .style("cursor", "none")
                                        .select(".tooltip")
                                        .remove();
                                    d3.selectAll("path").style("opacity", opacity);
                                })
                                .on("touchstart", function (d) {
                                    d3.select("svg").style("cursor", "none");
                                })
                                .each(function (d, i) {
                                    this._current = i;
                                });

                            let legend = d3
                                .select(chart)
                                .append("div")
                                .attr("class", "legend")
                                .style("margin-top", "30px");

                            let keys = legend
                                .selectAll(".key")
                                .data(data)
                                .enter()
                                .append("div")
                                .attr("class", "key")
                                .style("display", "flex")
                                .style("align-items", "center")
                                .style("margin-right", "20px");

                            keys
                                .append("div")
                                .attr("class", "symbol")
                                .style("height", "10px")
                                .style("width", "10px")
                                .style("margin", "5px 5px")
                                .style("background-color", (d, i) => color(i));

                            keys
                                .append("div")
                                .attr("class", "name")
                                .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2)})`);

                            keys.exit().remove();

                        },
                        error: function (response) {

                        }
                    });
                }

                if (Report_name == "5") {
                    var losscat = ''
                    if ($("#Loss_Category").val() == "null") {
                        losscat = null
                    }
                    else {
                        losscat = $("#Loss_Category").val()
                    }
                    var myData = {
                        "QueryType": 'Month_duration',
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line_Code": '@Session["LineCode"]',
                        "month": Month,
                        "Machine_Code": Machine,
                        "report_type": '1',
                        "loss_category": losscat
                    };

                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {
                            $("#top_10_duration_pareto").show();

                            d3.select("#top_10_pareto_chart svg").remove();

                            $("#top_10_pareto_div").html("Monthly Top 10 Losses based on duration : Pareto");

                            if (response.status != "Error") {

                                sample_pareto = response.data.Table;

                                if (sample_pareto.length < 2) {
                                    $('#top_10_pareto_chart').css("width", "30%");
                                }

                                else if (sample_pareto.length < 5) {
                                    $('#top_10_pareto_chart').css("width", "50%");

                                }
                                else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                    $('#top_10_pareto_chart').css("width", "80%");
                                }
                                else {
                                    $('#top_10_pareto_chart').css("width", "100%");
                                }

                                const a = $('#top_10_pareto_chart').height();
                                const b = $('#top_10_pareto_chart').width();



                                var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                    , h = a - m.top - m.bottom - 25
                                    , w = b - m.left - m.right
                                    , barWidth = 5;

                                var dataset = null;
                                //typecast Amount to #, calculate total, and cumulative amounts


                                //Axes and scales
                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                                xScale.paddingInner(0.2)
                                xScale.paddingOuter(0.2);

                                var yhist = d3.scaleLinear()
                                    .domain([0, d3.max(sample_pareto, function (d) { return d.duration; })])
                                    .range([h, 0]);

                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                var xAxis = d3.axisBottom()
                                    .scale(xScale);


                                var yAxis = d3.axisLeft()
                                    .scale(yhist)


                                var yAxis2 = d3.axisRight()
                                    .scale(ycum);

                                d3.selectAll(".custom > *").remove();

                                var tooltip = d3.select("#top_10_pareto_chart")
                                    .append("div")
                                    .style("opacity", 0)
                                    .attr("class", "tooltip")
                                    .style("background-color", "tranparent")
                                    .style("border", "solid")
                                    .style("border-width", "2px")
                                    .style("border-radius", "5px")
                                    .style("padding", "5px")



                                tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                                toolval = tooltip.append("div");

                                ////Draw svg
                                var svg_pareto = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", w + m.left + m.right)
                                    .attr("height", h + m.top + m.bottom)
                                    .append("g")
                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                //Draw histogram
                                var bar_pareto = svg_pareto.selectAll(".bar")
                                    .data(sample_pareto)
                                    .enter().append("g")
                                    .attr("class", "bar")




                                bar_pareto.append("rect")
                                    .attr("x", function (d) { return xScale(d.loss_description); })
                                    .attr("width", xScale.bandwidth() - 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .attr("height", function (d) { return h - yhist(d.duration); })
                                    .style("fill", function (d) {
                                        if (d.Percentage < 80) {
                                            return color(d.d)
                                        }
                                        else {
                                            return "#B8B0AF"
                                        }
                                    })
                                    .attr("fill", color)
                                    .attr("text", function (d) { return `${d.duration}` })

                                    .on("mouseout", function () {
                                        d3.select(this).style('Stroke', 'none');
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 1);
                                        tooltip.style("visibility", "hidden");
                                    })

                                    .on("mousemove", function (d) {
                                        var bar = d3.select(this);
                                        var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 4);
                                        d3.select(this).style('Stroke', 'black');
                                        d3.select(this).style('stroke-width', '2');
                                        d3.select(this).transition()
                                            .style("opacity", 2);
                                        tooltip.style("visibility", "visible")
                                            .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                        var text = 'Duration: ' + d.duration + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                        tooltip.select("div").html(text)


                                    })
                                //.on("click", function (d) {
                                //    get_Rejection_data(d.RejectionDescription);

                                //})


                                bar_pareto.selectAll(".bar-title")
                                    .data(sample_pareto)
                                    .enter()
                                    .append("text")
                                    .classed('bar-title', true)
                                    .attr('text-anchor', 'middle')
                                    .style("color", "black")
                                    .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .text((a) => `${a.duration}`)


                                ////Draw CDF line
                                var guide = d3.line()
                                    .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .y(function (d) { return ycum(d.Percentage) });


                                var line = svg_pareto.append('path')
                                    .datum(sample_pareto)
                                    .attr('d', guide)
                                    .attr('class', 'line');
                                svg_pareto.selectAll(".line")
                                    .data(sample_pareto)
                                    .enter().append("circle")
                                    .attr("r", 3.5)
                                    .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .attr("cy", function (d) { return ycum(d.Percentage) });

                                //Draw axes
                                svg_pareto.append("g")
                                    .attr("class", "x axis")
                                    .attr("transform", "translate(0," + h + ")")
                                    .call(xAxis)
                                    .selectAll("text")
                                    .style("text-anchor", "end")
                                    .attr("transform", "rotate(-65)");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .call(yAxis)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", -50)
                                    .attr("dy", ".71em")
                                    .style("text-anchor", "end")

                                    .text("Duration");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .call(yAxis2)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", 50)
                                    .attr("dy", "-.71em")
                                    .style("text-anchor", "end")
                                    .text("Pareto Percentage");


                                svg_pareto.append("text")
                                    .attr("class", "y label")
                                    //.attr("text-anchor", "end")
                                    .attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "rotate(-90)")
                                    .text("Duration");

                                svg_pareto.append("text")
                                    .attr("class", "y label2")
                                    //.attr("text-anchor", "end")
                                    //.attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", w + 40)
                                    .text("Pareto Percentage %");

                            }
                            else {
                                $("#top_10_pareto_chart").empty();
                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                    .style("font-size", "40px");
                            }
                        },
                        error: function (response) {

                        }
                    });
                }
            }

            else if (Report_name == "6")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Month',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "month": Month,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_MTBF_div").html("Monthly Top 10 Losses based on MTBF");

                        $("#top_10_loss_MTBF_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_MTBF_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_MTBF_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + response.data.Table[i].MTBF + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_MTBF_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }

                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_MTBF_div").html("Monthly Top 10 Losses based on MTBF - Chart");

                        $("#top_10_loss_MTBF_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var MTBF_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            MTBF_tot += response.data.Table[i].MTBF;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTBF_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.MTBF * 100) / MTBF_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.MTBF * 100) / MTBF_tot).toFixed(2)})`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.MTBF * 100) / MTBF_tot).toFixed(2)})`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "7")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
               var myData = {
                    "QueryType": 'Month_occurence',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "month": Month,
                    "Machine_Code": Machine,
                   "report_type": '1',
                   "loss_category": losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_Pareto_div").html("Monthly Top 10 Losses based on number of occurences : Pareto");

                        $("#top_10_loss_Pareto_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_Pareto_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_Pareto_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var Occurence_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Occurence_tot += response.data.Table[i].Occurence;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].Occurence * 100) / Occurence_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].Occurence * 100) / Occurence_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_Pareto_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else
                        {
                            $(".pre_error").text(response.msg);
                        }


                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {
                        $("#top_10_occurence_pareto").show();

                        d3.select("#top_10_Occurence_pareto_chart svg").remove();

                        $("#top_10_Occurence_pareto_div").html("Monthly Top 10 Losses based on number of occurences : Pareto");

                        if (response.status != "Error") {


                            sample_pareto = response.data.Table;

                            if (sample_pareto.length < 2) {
                                $('#top_10_Occurence_pareto_chart').css("width", "30%");
                            }

                            else if (sample_pareto.length < 5) {
                                $('#top_10_Occurence_pareto_chart').css("width", "50%");

                            }
                            else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                $('#top_10_Occurence_pareto_chart').css("width", "80%");
                            }
                            else {
                                $('#top_10_Occurence_pareto_chart').css("width", "100%");
                            }

                            const a = $('#top_10_Occurence_pareto_chart').height();
                            const b = $('#top_10_Occurence_pareto_chart').width();



                            var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                , h = a - m.top - m.bottom - 25
                                , w = b - m.left - m.right
                                , barWidth = 5;

                            var dataset = null;
                            //typecast Amount to #, calculate total, and cumulative amounts


                            //Axes and scales
                            var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                            xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                            xScale.paddingInner(0.2)
                            xScale.paddingOuter(0.2);

                            var yhist = d3.scaleLinear()
                                .domain([0, d3.max(sample_pareto, function (d) { return d.Occurence; })])
                                .range([h, 0]);

                            var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                            var xAxis = d3.axisBottom()
                                .scale(xScale);


                            var yAxis = d3.axisLeft()
                                .scale(yhist)


                            var yAxis2 = d3.axisRight()
                                .scale(ycum);

                            d3.selectAll(".custom > *").remove();

                            var tooltip = d3.select("#top_10_Occurence_pareto_chart")
                                .append("div")
                                .style("opacity", 0)
                                .attr("class", "tooltip")
                                .style("background-color", "tranparent")
                                .style("border", "solid")
                                .style("border-width", "2px")
                                .style("border-radius", "5px")
                                .style("padding", "5px")



                            tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                            toolval = tooltip.append("div");

                            ////Draw svg
                            var svg_pareto = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", w + m.left + m.right)
                                .attr("height", h + m.top + m.bottom)
                                .append("g")
                                .attr("transform", "translate(" + m.left + "," + m.top + ")");




                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            //Draw histogram
                            var bar_pareto = svg_pareto.selectAll(".bar")
                                .data(sample_pareto)
                                .enter().append("g")
                                .attr("class", "bar")




                            bar_pareto.append("rect")
                                .attr("x", function (d) { return xScale(d.loss_description); })
                                .attr("width", xScale.bandwidth() - 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .attr("height", function (d) { return h - yhist(d.Occurence); })
                                .style("fill", function (d) {
                                    if (d.Percentage < 80) {
                                        return color(d.d)
                                    }
                                    else {
                                        return "#B8B0AF"
                                    }
                                })
                                .attr("fill", color)
                                .attr("text", function (d) { return `${d.Occurence}` })

                                .on("mouseout", function () {
                                    d3.select(this).style('Stroke', 'none');
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 1);
                                    tooltip.style("visibility", "hidden");
                                })

                                .on("mousemove", function (d) {
                                    var bar = d3.select(this);
                                    var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 4);
                                    d3.select(this).style('Stroke', 'black');
                                    d3.select(this).style('stroke-width', '2');
                                    d3.select(this).transition()
                                        .style("opacity", 2);
                                    tooltip.style("visibility", "visible")
                                        .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                    var text = 'Occurence: ' + d.Occurence + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                    tooltip.select("div").html(text)


                                })
                            //.on("click", function (d) {
                            //    get_Rejection_data(d.RejectionDescription);

                            //})


                            bar_pareto.selectAll(".bar-title")
                                .data(sample_pareto)
                                .enter()
                                .append("text")
                                .classed('bar-title', true)
                                .attr('text-anchor', 'middle')
                                .style("color", "black")
                                .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .text((a) => `${a.Occurence}`)


                            ////Draw CDF line
                            var guide = d3.line()
                                .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .y(function (d) { return ycum(d.Percentage) });


                            var line = svg_pareto.append('path')
                                .datum(sample_pareto)
                                .attr('d', guide)
                                .attr('class', 'line');
                            svg_pareto.selectAll(".line")
                                .data(sample_pareto)
                                .enter().append("circle")
                                .attr("r", 3.5)
                                .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .attr("cy", function (d) { return ycum(d.Percentage) });

                            //Draw axes
                            svg_pareto.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + h + ")")
                                .call(xAxis)
                                .selectAll("text")
                                .style("text-anchor", "end")
                                .attr("transform", "rotate(-65)");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .call(yAxis)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", -50)
                                .attr("dy", ".71em")
                                .style("text-anchor", "end")

                                .text("Occurence");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .attr("transform", "translate(" + [w, 0] + ")")
                                .call(yAxis2)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", 50)
                                .attr("dy", "-.71em")
                                .style("text-anchor", "end")
                                .text("Pareto Percentage");


                            svg_pareto.append("text")
                                .attr("class", "y label")
                                //.attr("text-anchor", "end")
                                .attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "rotate(-90)")
                                .text("Occurence");

                            svg_pareto.append("text")
                                .attr("class", "y label2")
                                //.attr("text-anchor", "end")
                                //.attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "translate(" + [w, 0] + ")")
                                .attr("transform", "rotate(-90)")
                                .attr("y", w + 40)
                                .text("Pareto Percentage %");


                        }
                        else {
                            $("#top_10_Occurence_pareto_chart").empty();
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            svg.append("text")
                                .text("No Data Available")
                                .style("font-size", "40px");
                        }
                    },
                    error: function (response) {

                    }
                });
            }
        }

            //Yearly
        else if (TimeSlot == "4") {
            if (Year == "") {
                swal({
                    icon: "error",
                    title: "Please Select Year...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (Loss_Name == "") {
                swal({
                    icon: "error",
                    title: "Please Select Loss Name...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (Report_name == "1") {
                var myData = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "Date": Year,
                    "Machine": Machine,
                    /*"Loss": Loss_Name,*/
                    "Loss": Loss_id,
                };
                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Yearwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#Yearly_Specific_trend_chart").show();
                        $("#Yearly_Specific_trend").show();

                        var rowsCnt = document.getElementById("datatable_specific_year").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_specific_year").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {

                            if (response.data.Table.length != 0) {
                                var total = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {

                                    total += response.data.Table[i].Occurance;

                                }
                            }
                            if (response.data.Table.length != 0) {
                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Name + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurance + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].Occurance / total) * 100).toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".Specific_year_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                var Data = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "Date": Year,
                    "Machine": Machine,
                    "Loss": Loss_Name,
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Yearwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (result) {

                        $("#Yearly_Specific_trend_chart").show();
                        $("#Yearly_Specific_trend").show();

                        d3.select("svg").remove();

                        // If data is not available
                        if (typeof result.data.Table === "undefined") {

                            // Output error
                            $(".Year_chart_specific").text("No Data Available.");

                            // Otherwise
                        } else {

                            var data = result.data.Table;
                            // Set SVGs dimensions and margins
                            var margin = { top: 20, right: 20, bottom: 30, left: 50 },
                                width = 960 - margin.left - margin.right,
                                height = 300 - margin.top - margin.bottom;

                            // Setup ranges
                            var x = d3.scaleBand().range([0, width]),
                                y = d3.scaleLinear().range([height, 0]);


                            // Setup line
                            var valueline = d3.line()
                                .x(function (d) { return x(d.Name); })
                                .y(function (d) { return y(d.Occurance); });

                            // Setup tooltips
                            var div = d3.select(".Year_chart_specific").append("div")
                                .attr("class", "tooltip")
                                .style("opacity", 0);

                            // Append SVG to container DIV, append group to SVG
                            var svg = d3.select(".Year_chart_specific").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform",
                                    "translate( " + margin.left + ", " + margin.top + " )");

                            // Format the data
                            data.forEach(function (d) {
                                d.Name = d.Name;
                                d.Occurance = +d.Occurance;
                            });

                            x.domain(data.map(function (d) { return d.Name; }));

                            y.domain([0, d3.max(data, function (d) { return d.Occurance; })]);

                            // Append the line to the graph
                            svg.append("path")
                                .data([data])
                                .attr("class", "line")
                                .attr("d", valueline);

                            // Append tooltips to the graph
                            svg.selectAll("dot")
                                .data(data)
                                .enter().append("circle")
                                .attr("class", "node")
                                .attr("r", 5)
                                .attr("cx", function (d) { return x(d.Name); })
                                .attr("cy", function (d) { return y(d.Occurance); })
                                .on("mouseover", function (d) {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 1);
                                    div.html(d.Name + "<br/>" + d.Occurance)
                                })
                                .on("mousemove", function () {
                                    return div
                                        .style("top", (d3.event.pageY + 16) + "px")
                                        .style("left", (d3.event.pageX + 16) + "px");
                                })
                                .on("mouseout", function () {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 0);
                                });

                            // Append X Axis to the graph
                            svg.append("g")
                                .attr("transform", "translate( 0," + height + " )")
                                .call(d3.axisBottom(x))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "middle")
                                .attr('x', 450)
                                .attr('y', 40)
                                .text("Month");

                            // Append Y Axis to the graph
                            svg.append("g")
                                .call(d3.axisLeft(y))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "start")
                                .text("Occurense");
                        }

                    },
                    error: function (result) {

                    }
                });

            }

            else if (Report_name == "3")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Year',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "year": Year,
                    "Machine_Code": Machine,
                    "report_type": '2',
                    "loss_category": losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#loss_div").html("Yearly Duration of Loss - Table (MTTR)");

                        $("#Horly_duration_loss").show();

                        var rowsCnt = document.getElementById("datatable_horly_duration_loss").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_horly_duration_loss").deleteRow(1);
                            }
                        }
                        if (response.data.Table.length != 0)
                        {
                            var duration_tot = 0;

                            for (var i = 0; i < response.data.Table.length; i++) {
                                duration_tot += response.data.Table[i].duration;
                            }

                            var j = 1;
                            for (var i = 0; i < response.data.Table.length; i++) {
                                var newRow = $("<tr>");
                                var cols = '';
                                cols += "<td> " + j + "</td> ";
                                cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(2) + "</td> ";
                                cols += "</tr>";
                                newRow.append(cols);
                                $(".hourly_loss_details").append(newRow);
                                j++;
                            }
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#MTTR_loss_div").html("Yearly Duration of Loss - Chart (MTTR)");

                        $("#MTTR_duration_loss_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var duration_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            duration_tot += response.data.Table[i].duration;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTTR_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.duration * 100) / duration_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${ ((d.data.duration * 100) / duration_tot).toFixed(2) })`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${ ((d.duration * 100) / duration_tot).toFixed(2) })`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "4" || Report_name == "5")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
               var myData = {
                    "QueryType": 'Year',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "year": Year,
                    "Machine_Code": Machine,
                   "report_type": '1',
                    "loss_category":losscat
               };

                 var myData_new = {
                     "QueryType": 'Year_duration',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "year": Year,
                    "Machine_Code": Machine,
                   "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData_new,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_div").html("Yearly Top 10 Losses based on Duration");

                        $("#top_10_duration_chart_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_duration_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_duration_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].duration * 100) / duration_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_duration_table").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                if (Report_name == "4") {
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {

                            $("#top_10_duration_loss_div").html("Yearly Top 10 Losses based on duration - Chart");

                            $("#top_10_duration_loss_chart").show();

                            d3.select("svg").remove();

                            $(".legend").remove();

                            var duration_tot = 0;

                            for (var i = 0; i < response.data.Table.length; i++) {
                                duration_tot += response.data.Table[i].duration;
                            }

                            var data = response.data.Table;

                            var text = "";
                            var width = 200;
                            var height = 200;
                            var thickness = 40;
                            var duration = 750;
                            var padding = 10;
                            var opacity = 0.8;
                            var opacityHover = 1;
                            var otherOpacityOnHover = 0.8;
                            var tooltipMargin = 13;
                            var chart = ".duration_chart_details";

                            var radius = Math.min(width - padding, height - padding) / 2;
                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            var svg = d3
                                .select(chart)
                                .append("svg")
                                .attr("class", "pie")
                                .attr("width", width)
                                .attr("height", height);

                            var g = svg
                                .append("g")
                                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                            var arc = d3
                                .arc()
                                .innerRadius(0)
                                .outerRadius(radius);

                            var pie = d3
                                .pie()
                                .value(function (d) {
                                    return (d.duration * 100) / duration_tot;
                                })
                                .sort(null);

                            var path = g
                                .selectAll("path")
                                .data(pie(data))
                                .enter()
                                .append("g")
                                .append("path")
                                .attr("d", arc)
                                .attr("fill", (d, i) => color(i))
                                .style("opacity", opacity)
                                .style("stroke", "white")
                                .on("mouseover", function (d) {
                                    d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                    d3.select(this).style("opacity", opacityHover);

                                    let g = d3
                                        .select("svg")
                                        .style("cursor", "pointer")
                                        .append("g")
                                        .attr("class", "tooltip")
                                        .style("opacity", 0);

                                    g.append("text")
                                        .attr("class", "name-text")
                                        .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2)})`)
                                        .attr("text-anchor", "middle");

                                    let text = g.select("text");
                                    let bbox = text.node().getBBox();
                                    let padding = 2;
                                    g.insert("rect", "text")
                                        .attr("x", bbox.x - padding)
                                        .attr("y", bbox.y - padding)
                                        .attr("width", bbox.width + padding * 2)
                                        .attr("height", bbox.height + padding * 2)
                                        .style("fill", "white")
                                        .style("opacity", 0.75);
                                })
                                .on("mousemove", function (d) {
                                    let mousePosition = d3.mouse(this);
                                    let x = mousePosition[0] + width / 2;
                                    let y = mousePosition[1] + height / 2 - tooltipMargin;

                                    let text = d3.select(".tooltip text");
                                    let bbox = text.node().getBBox();
                                    if (x - bbox.width / 2 < 0) {
                                        x = bbox.width / 2;
                                    } else if (width - x - bbox.width / 2 < 0) {
                                        x = width - bbox.width / 2;
                                    }

                                    if (y - bbox.height / 2 < 0) {
                                        y = bbox.height + tooltipMargin * 2;
                                    } else if (height - y - bbox.height / 2 < 0) {
                                        y = height - bbox.height / 2;
                                    }

                                    d3.select(".tooltip")
                                        .style("opacity", 1)
                                        .attr("transform", `translate(${x}, ${y})`);
                                })
                                .on("mouseout", function (d) {
                                    d3.select("svg")
                                        .style("cursor", "none")
                                        .select(".tooltip")
                                        .remove();
                                    d3.selectAll("path").style("opacity", opacity);
                                })
                                .on("touchstart", function (d) {
                                    d3.select("svg").style("cursor", "none");
                                })
                                .each(function (d, i) {
                                    this._current = i;
                                });

                            let legend = d3
                                .select(chart)
                                .append("div")
                                .attr("class", "legend")
                                .style("margin-top", "30px");

                            let keys = legend
                                .selectAll(".key")
                                .data(data)
                                .enter()
                                .append("div")
                                .attr("class", "key")
                                .style("display", "flex")
                                .style("align-items", "center")
                                .style("margin-right", "20px");

                            keys
                                .append("div")
                                .attr("class", "symbol")
                                .style("height", "10px")
                                .style("width", "10px")
                                .style("margin", "5px 5px")
                                .style("background-color", (d, i) => color(i));

                            keys
                                .append("div")
                                .attr("class", "name")
                                .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2)})`);

                            keys.exit().remove();

                        },
                        error: function (response) {

                        }
                    });
                }

                if (Report_name == "5") {
                    var losscat = ''
                    if ($("#Loss_Category").val() == "null") {
                        losscat = null
                    }
                    else {
                        losscat = $("#Loss_Category").val()
                    }
                    var myData = {
                        "QueryType": 'Year_duration',
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line_Code": '@Session["LineCode"]',
                        "year": Year,
                        "Machine_Code": Machine,
                        "report_type": '1',
                        "loss_category": losscat
                    };

                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {
                            $("#top_10_duration_pareto").show();

                            d3.select("#top_10_pareto_chart svg").remove();

                            $("#top_10_pareto_div").html("Yearly Top 10 Losses based on duration : Pareto");

                            if (response.status != "Error") {
                                sample_pareto = response.data.Table;

                                if (sample_pareto.length < 2) {
                                    $('#top_10_pareto_chart').css("width", "30%");
                                }

                                else if (sample_pareto.length < 5) {
                                    $('#top_10_pareto_chart').css("width", "50%");

                                }
                                else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                    $('#top_10_pareto_chart').css("width", "80%");
                                }
                                else {
                                    $('#top_10_pareto_chart').css("width", "100%");
                                }

                                const a = $('#top_10_pareto_chart').height();
                                const b = $('#top_10_pareto_chart').width();



                                var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                    , h = a - m.top - m.bottom - 25
                                    , w = b - m.left - m.right
                                    , barWidth = 5;

                                var dataset = null;
                                //typecast Amount to #, calculate total, and cumulative amounts


                                //Axes and scales
                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                                xScale.paddingInner(0.2)
                                xScale.paddingOuter(0.2);

                                var yhist = d3.scaleLinear()
                                    .domain([0, d3.max(sample_pareto, function (d) { return d.duration; })])
                                    .range([h, 0]);

                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                var xAxis = d3.axisBottom()
                                    .scale(xScale);


                                var yAxis = d3.axisLeft()
                                    .scale(yhist)


                                var yAxis2 = d3.axisRight()
                                    .scale(ycum);

                                d3.selectAll(".custom > *").remove();

                                var tooltip = d3.select("#top_10_pareto_chart")
                                    .append("div")
                                    .style("opacity", 0)
                                    .attr("class", "tooltip")
                                    .style("background-color", "tranparent")
                                    .style("border", "solid")
                                    .style("border-width", "2px")
                                    .style("border-radius", "5px")
                                    .style("padding", "5px")



                                tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                                toolval = tooltip.append("div");

                                ////Draw svg
                                var svg_pareto = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", w + m.left + m.right)
                                    .attr("height", h + m.top + m.bottom)
                                    .append("g")
                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                //Draw histogram
                                var bar_pareto = svg_pareto.selectAll(".bar")
                                    .data(sample_pareto)
                                    .enter().append("g")
                                    .attr("class", "bar")




                                bar_pareto.append("rect")
                                    .attr("x", function (d) { return xScale(d.loss_description); })
                                    .attr("width", xScale.bandwidth() - 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .attr("height", function (d) { return h - yhist(d.duration); })
                                    .style("fill", function (d) {
                                        if (d.Percentage < 80) {
                                            return color(d.d)
                                        }
                                        else {
                                            return "#B8B0AF"
                                        }
                                    })
                                    .attr("fill", color)
                                    .attr("text", function (d) { return `${d.duration}` })

                                    .on("mouseout", function () {
                                        d3.select(this).style('Stroke', 'none');
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 1);
                                        tooltip.style("visibility", "hidden");
                                    })

                                    .on("mousemove", function (d) {
                                        var bar = d3.select(this);
                                        var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 4);
                                        d3.select(this).style('Stroke', 'black');
                                        d3.select(this).style('stroke-width', '2');
                                        d3.select(this).transition()
                                            .style("opacity", 2);
                                        tooltip.style("visibility", "visible")
                                            .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                        var text = 'Duration: ' + d.duration + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                        tooltip.select("div").html(text)


                                    })
                                //.on("click", function (d) {
                                //    get_Rejection_data(d.RejectionDescription);

                                //})


                                bar_pareto.selectAll(".bar-title")
                                    .data(sample_pareto)
                                    .enter()
                                    .append("text")
                                    .classed('bar-title', true)
                                    .attr('text-anchor', 'middle')
                                    .style("color", "black")
                                    .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .text((a) => `${a.duration}`)


                                ////Draw CDF line
                                var guide = d3.line()
                                    .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .y(function (d) { return ycum(d.Percentage) });


                                var line = svg_pareto.append('path')
                                    .datum(sample_pareto)
                                    .attr('d', guide)
                                    .attr('class', 'line');
                                svg_pareto.selectAll(".line")
                                    .data(sample_pareto)
                                    .enter().append("circle")
                                    .attr("r", 3.5)
                                    .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .attr("cy", function (d) { return ycum(d.Percentage) });

                                //Draw axes
                                svg_pareto.append("g")
                                    .attr("class", "x axis")
                                    .attr("transform", "translate(0," + h + ")")
                                    .call(xAxis)
                                    .selectAll("text")
                                    .style("text-anchor", "end")

                                    .attr("transform", "rotate(-65)");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .call(yAxis)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", -50)
                                    .attr("dy", ".71em")
                                    .style("text-anchor", "end")

                                    .text("Duration");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .call(yAxis2)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", 50)
                                    .attr("dy", "-.71em")
                                    .style("text-anchor", "end")
                                    .text("Pareto Percentage");


                                svg_pareto.append("text")
                                    .attr("class", "y label")
                                    //.attr("text-anchor", "end")
                                    .attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "rotate(-90)")
                                    .text("Duration");

                                svg_pareto.append("text")
                                    .attr("class", "y label2")
                                    //.attr("text-anchor", "end")
                                    //.attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", w + 40)
                                    .text("Pareto Percentage %");

                            }
                            else {
                                $("#top_10_pareto_chart").empty();
                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                    .style("font-size", "40px");
                            }
                        },
                        error: function (response) {

                        }
                    });
                }
            }

            else if (Report_name == "6")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
               var myData = {
                    "QueryType": 'Year',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "year": Year,
                    "Machine_Code": Machine,
                   "report_type": '1',
                   "loss_category": losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_MTBF_div").html("Yearly Top 10 Losses based on MTBF");

                        $("#top_10_loss_MTBF_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_MTBF_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_MTBF_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++)
                                {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + response.data.Table[i].MTBF + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_MTBF_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response)
                    {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_MTBF_div").html("Yearly Top 10 Losses based on MTBF - Chart");

                        $("#top_10_loss_MTBF_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var MTBF_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            MTBF_tot += response.data.Table[i].MTBF;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTBF_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.MTBF * 100) / MTBF_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.MTBF * 100) / MTBF_tot).toFixed(2)})`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.MTBF * 100) / MTBF_tot).toFixed(2)})`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "7")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Year_occurence',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "year": Year,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_Pareto_div").html("Yearly Top 10 Losses based on number of occurences : Pareto");

                        $("#top_10_loss_Pareto_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_Pareto_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_Pareto_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0) {
                                var Occurence_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Occurence_tot += response.data.Table[i].Occurence;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].Occurence * 100) / Occurence_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].Occurence * 100) / Occurence_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_Pareto_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {
                        $("#top_10_occurence_pareto").show();

                        d3.select("#top_10_Occurence_pareto_chart svg").remove();

                        $("#top_10_Occurence_pareto_div").html("Yearly Top 10 Losses based on number of occurences : Pareto");

                        if (response.status != "Error") {

                            sample_pareto = response.data.Table;

                            if (sample_pareto.length < 2) {
                                $('#top_10_Occurence_pareto_chart').css("width", "30%");
                            }

                            else if (sample_pareto.length < 5) {
                                $('#top_10_Occurence_pareto_chart').css("width", "50%");

                            }
                            else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                $('#top_10_Occurence_pareto_chart').css("width", "80%");
                            }
                            else {
                                $('#top_10_Occurence_pareto_chart').css("width", "100%");
                            }

                            const a = $('#top_10_Occurence_pareto_chart').height();
                            const b = $('#top_10_Occurence_pareto_chart').width();



                            var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                , h = a - m.top - m.bottom - 25
                                , w = b - m.left - m.right
                                , barWidth = 5;

                            var dataset = null;
                            //typecast Amount to #, calculate total, and cumulative amounts


                            //Axes and scales
                            var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                            xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                            xScale.paddingInner(0.2)
                            xScale.paddingOuter(0.2);

                            var yhist = d3.scaleLinear()
                                .domain([0, d3.max(sample_pareto, function (d) { return d.Occurence; })])
                                .range([h, 0]);

                            var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                            var xAxis = d3.axisBottom()
                                .scale(xScale);


                            var yAxis = d3.axisLeft()
                                .scale(yhist)


                            var yAxis2 = d3.axisRight()
                                .scale(ycum);

                            d3.selectAll(".custom > *").remove();

                            var tooltip = d3.select("#top_10_Occurence_pareto_chart")
                                .append("div")
                                .style("opacity", 0)
                                .attr("class", "tooltip")
                                .style("background-color", "tranparent")
                                .style("border", "solid")
                                .style("border-width", "2px")
                                .style("border-radius", "5px")
                                .style("padding", "5px")



                            tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                            toolval = tooltip.append("div");

                            ////Draw svg
                            var svg_pareto = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", w + m.left + m.right)
                                .attr("height", h + m.top + m.bottom)
                                .append("g")
                                .attr("transform", "translate(" + m.left + "," + m.top + ")");




                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            //Draw histogram
                            var bar_pareto = svg_pareto.selectAll(".bar")
                                .data(sample_pareto)
                                .enter().append("g")
                                .attr("class", "bar")




                            bar_pareto.append("rect")
                                .attr("x", function (d) { return xScale(d.loss_description); })
                                .attr("width", xScale.bandwidth() - 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .attr("height", function (d) { return h - yhist(d.Occurence); })
                                .style("fill", function (d) {
                                    if (d.Percentage < 80) {
                                        return color(d.d)
                                    }
                                    else {
                                        return "#B8B0AF"
                                    }
                                })
                                .attr("fill", color)
                                .attr("text", function (d) { return `${d.Occurence}` })

                                .on("mouseout", function () {
                                    d3.select(this).style('Stroke', 'none');
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 1);
                                    tooltip.style("visibility", "hidden");
                                })

                                .on("mousemove", function (d) {
                                    var bar = d3.select(this);
                                    var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 4);
                                    d3.select(this).style('Stroke', 'black');
                                    d3.select(this).style('stroke-width', '2');
                                    d3.select(this).transition()
                                        .style("opacity", 2);
                                    tooltip.style("visibility", "visible")
                                        .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                    var text = 'Occurence: ' + d.Occurence + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                    tooltip.select("div").html(text)


                                })
                            //.on("click", function (d) {
                            //    get_Rejection_data(d.RejectionDescription);

                            //})


                            bar_pareto.selectAll(".bar-title")
                                .data(sample_pareto)
                                .enter()
                                .append("text")
                                .classed('bar-title', true)
                                .attr('text-anchor', 'middle')
                                .style("color", "black")
                                .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .text((a) => `${a.Occurence}`)


                            ////Draw CDF line
                            var guide = d3.line()
                                .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .y(function (d) { return ycum(d.Percentage) });


                            var line = svg_pareto.append('path')
                                .datum(sample_pareto)
                                .attr('d', guide)
                                .attr('class', 'line');
                            svg_pareto.selectAll(".line")
                                .data(sample_pareto)
                                .enter().append("circle")
                                .attr("r", 3.5)
                                .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .attr("cy", function (d) { return ycum(d.Percentage) });

                            //Draw axes
                            svg_pareto.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + h + ")")
                                .call(xAxis)
                                .selectAll("text")
                                .style("text-anchor", "end")
                                .attr("transform", "rotate(-65)");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .call(yAxis)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", -50)
                                .attr("dy", ".71em")
                                .style("text-anchor", "end")

                                .text("Occurence");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .attr("transform", "translate(" + [w, 0] + ")")
                                .call(yAxis2)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", 50)
                                .attr("dy", "-.71em")
                                .style("text-anchor", "end")
                                .text("Pareto Percentage");


                            svg_pareto.append("text")
                                .attr("class", "y label")
                                //.attr("text-anchor", "end")
                                .attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "rotate(-90)")
                                .text("Occurence");

                            svg_pareto.append("text")
                                .attr("class", "y label2")
                                //.attr("text-anchor", "end")
                                //.attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "translate(" + [w, 0] + ")")
                                .attr("transform", "rotate(-90)")
                                .attr("y", w + 40)
                                .text("Pareto Percentage %");

                        }
                        else {
                            $("#top_10_Occurence_pareto_chart").empty();
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            svg.append("text")
                                .text("No Data Available")
                                .style("font-size", "40px");
                        }
                    },
                    error: function (response) {

                    }
                });
            }
        }

        //custom
        else if (TimeSlot == "5") {
            if (FDate == "") {
                swal({
                    icon: "error",
                    title: "Please Select FromDate...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (TDate == "") {
                swal({
                    icon: "error",
                    title: "Please Select ToDate...!",
                    button: true,
                    timer: 4500
                })
                return;
            }

            if (Loss_Name == "") {
                swal({
                    icon: "error",
                    title: "Please Select Loss Name...!",
                    button: true,
                    timer: 4500
                })
                return;
            }


            if (Report_name == "1") {
                var myData = {
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "line": '@Session["LineCode"]',
                    "FDate": FDate,
                    "TDate": TDate,
                    "Machine": Machine,
                    /* "Loss": Loss_Name,*/
                    "Loss": Loss_id,
                };
                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Customwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#Custom_Specific_trend").show();
                        $("#Custom_Specific_trend_chart").show();

                        var rowsCnt = document.getElementById("datatable_specific_custom").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_specific_custom").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Year + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurance + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurance_per + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".Specific_custom_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });


                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Customwise',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (result) {

                        $("#Custom_Specific_trend").show();
                        $("#Custom_Specific_trend_chart").show();

                        d3.select("svg").remove();

                        // If data is not available
                        if (typeof result.data.Table === "undefined") {

                            // Output error
                            $(".Custom_chart_specific").text("No Data Available.");

                            // Otherwise
                        } else {

                            var data = result.data.Table;
                            // Set SVGs dimensions and margins
                            var margin = { top: 20, right: 20, bottom: 30, left: 50 },
                                width = 960 - margin.left - margin.right,
                                height = 300 - margin.top - margin.bottom;

                            // Setup ranges
                            var x = d3.scaleBand().range([0, width]),
                                y = d3.scaleLinear().range([height, 0]);


                            // Setup line
                            var valueline = d3.line()
                                .x(function (d) { return x(d.Year); })
                                .y(function (d) { return y(d.Occurance); });

                            // Setup tooltips
                            var div = d3.select(".Custom_chart_specific").append("div")
                                .attr("class", "tooltip")
                                .style("opacity", 0);

                            // Append SVG to container DIV, append group to SVG
                            var svg = d3.select(".Custom_chart_specific").append("svg")
                                .attr("width", width + margin.left + margin.right)
                                .attr("height", height + margin.top + margin.bottom)
                                .append("g")
                                .attr("transform",
                                    "translate( " + margin.left + ", " + margin.top + " )");

                            // Format the data
                            data.forEach(function (d) {
                                d.Year = d.Year;
                                d.Occurance = +d.Occurance;
                            });

                            x.domain(data.map(function (d) { return d.Year; }));

                            y.domain([0, d3.max(data, function (d) { return d.Occurance; })]);

                            // Append the line to the graph
                            svg.append("path")
                                .data([data])
                                .attr("class", "line")
                                .attr("d", valueline);

                            // Append tooltips to the graph
                            svg.selectAll("dot")
                                .data(data)
                                .enter().append("circle")
                                .attr("class", "node")
                                .attr("r", 5)
                                .attr("cx", function (d) { return x(d.Year); })
                                .attr("cy", function (d) { return y(d.Occurance); })
                                .on("mouseover", function (d) {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 1);
                                    div.html(d.Year + "<br/>" + d.Occurance)
                                })
                                .on("mousemove", function () {
                                    return div
                                        .style("top", (d3.event.pageY + 16) + "px")
                                        .style("left", (d3.event.pageX + 16) + "px");
                                })
                                .on("mouseout", function () {
                                    div.transition()
                                        .duration(200)
                                        .style("opacity", 0);
                                });

                            // Append X Axis to the graph
                            //svg.append("g")
                            //    .attr("transform", "translate( 10," + height + " )")
                            //    .call(d3.axisBottom(x))

                            //    .append("text")
                            //    .attr("dy", "0.32em")

                            //    .attr("fill", "#000")
                            //    .attr("font-weight", "bold")
                            //    .attr("text-anchor", "middle")
                            //    .attr('x', 450)
                            //    .attr('y', 40)
                            //    .text("Year")

                            svg.append('g')
                                .attr('transform', `translate(10, ${height})`)
                                .call(d3.axisBottom(x))
                                .selectAll("text")
                                .style("text-anchor", "end")
                                .attr("dx", "-.8em")
                                .attr("dy", ".15em")
                                .attr("transform", function (d) {
                                    return "rotate(-25)"
                                });

                            // Append Y Axis to the graph
                            svg.append("g")
                                .call(d3.axisLeft(y))
                                .append("text")
                                .attr("dy", "0.32em")
                                .attr("fill", "#000")
                                .attr("font-weight", "bold")
                                .attr("text-anchor", "start")
                                .text("Occurense");
                        }

                    },
                    error: function (result) {

                    }
                });

            }

            else if (Report_name == "3")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Custom',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "fromdate": FDate,
                    "todate": TDate,
                    "Machine_Code": Machine,
                    "report_type": '2',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#loss_div").html("Custom Duration of Loss - Table (MTTR)");

                        $("#Horly_duration_loss").show();

                        var rowsCnt = document.getElementById("datatable_horly_duration_loss").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_horly_duration_loss").deleteRow(1);
                            }
                        }
                        if (response.status != "Error") {
                            if (response.data.Table.length != 0) {
                                var duration_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    duration_tot += response.data.Table[i].duration;
                                }

                                var j = 1;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(2) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".hourly_loss_details").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else
                        {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#MTTR_loss_div").html("Custom Duration of Loss - Chart (MTTR)");

                        $("#MTTR_duration_loss_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var duration_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            duration_tot += response.data.Table[i].duration;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTTR_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.duration * 100) / duration_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2) })`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2) })`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "4" || Report_name == "5")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Custom',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "fromdate": FDate,
                    "todate": TDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };


                var myData_new = {
                    "QueryType": 'Custom_duration',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "fromdate": FDate,
                    "todate": TDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData_new,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_div").html("Custom Top 10 Losses based on Duration");

                        $("#top_10_duration_chart_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_duration_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_duration_table").deleteRow(1);
                            }
                        }
                        if (response.data.Table.length != 0)
                        {
                            var duration_tot = 0;

                            for (var i = 0; i < response.data.Table.length; i++) {
                                duration_tot += response.data.Table[i].duration;
                            }

                            var j = 1;
                            var Cum_percentage = 0;
                            for (var i = 0; i < response.data.Table.length; i++)
                            {
                                Cum_percentage += (response.data.Table[i].duration * 100) / duration_tot;
                                var newRow = $("<tr>");
                                var cols = '';
                                //cols += "<td> " + j + "</td> ";
                                cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                cols += "<td> " + response.data.Table[i].duration + "</td> ";
                                cols += "<td> " + ((response.data.Table[i].duration * 100) / duration_tot).toFixed(2) + "</td> ";
                                cols += "<td> " + Cum_percentage.toFixed(2) + "</td> ";
                                cols += "</tr>";
                                newRow.append(cols);
                                $(".top_10_duration_table").append(newRow);
                                j++;
                            }
                        }
                    },
                    error: function (response) {

                    }
                });

                if (Report_name == "4") {
                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {

                            $("#top_10_duration_loss_div").html("Custom Top 10 Losses based on duration - Chart");

                            $("#top_10_duration_loss_chart").show();

                            d3.select("svg").remove();

                            $(".legend").remove();

                            var duration_tot = 0;

                            for (var i = 0; i < response.data.Table.length; i++) {
                                duration_tot += response.data.Table[i].duration;
                            }

                            var data = response.data.Table;

                            var text = "";
                            var width = 200;
                            var height = 200;
                            var thickness = 40;
                            var duration = 750;
                            var padding = 10;
                            var opacity = 0.8;
                            var opacityHover = 1;
                            var otherOpacityOnHover = 0.8;
                            var tooltipMargin = 13;
                            var chart = ".duration_chart_details";

                            var radius = Math.min(width - padding, height - padding) / 2;
                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            var svg = d3
                                .select(chart)
                                .append("svg")
                                .attr("class", "pie")
                                .attr("width", width)
                                .attr("height", height);

                            var g = svg
                                .append("g")
                                .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                            var arc = d3
                                .arc()
                                .innerRadius(0)
                                .outerRadius(radius);

                            var pie = d3
                                .pie()
                                .value(function (d) {
                                    return (d.duration * 100) / duration_tot;
                                })
                                .sort(null);

                            var path = g
                                .selectAll("path")
                                .data(pie(data))
                                .enter()
                                .append("g")
                                .append("path")
                                .attr("d", arc)
                                .attr("fill", (d, i) => color(i))
                                .style("opacity", opacity)
                                .style("stroke", "white")
                                .on("mouseover", function (d) {
                                    d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                    d3.select(this).style("opacity", opacityHover);

                                    let g = d3
                                        .select("svg")
                                        .style("cursor", "pointer")
                                        .append("g")
                                        .attr("class", "tooltip")
                                        .style("opacity", 0);

                                    g.append("text")
                                        .attr("class", "name-text")
                                        .text(`${d.data.loss_description} (${((d.data.duration * 100) / duration_tot).toFixed(2)})`)
                                        .attr("text-anchor", "middle");

                                    let text = g.select("text");
                                    let bbox = text.node().getBBox();
                                    let padding = 2;
                                    g.insert("rect", "text")
                                        .attr("x", bbox.x - padding)
                                        .attr("y", bbox.y - padding)
                                        .attr("width", bbox.width + padding * 2)
                                        .attr("height", bbox.height + padding * 2)
                                        .style("fill", "white")
                                        .style("opacity", 0.75);
                                })
                                .on("mousemove", function (d) {
                                    let mousePosition = d3.mouse(this);
                                    let x = mousePosition[0] + width / 2;
                                    let y = mousePosition[1] + height / 2 - tooltipMargin;

                                    let text = d3.select(".tooltip text");
                                    let bbox = text.node().getBBox();
                                    if (x - bbox.width / 2 < 0) {
                                        x = bbox.width / 2;
                                    } else if (width - x - bbox.width / 2 < 0) {
                                        x = width - bbox.width / 2;
                                    }

                                    if (y - bbox.height / 2 < 0) {
                                        y = bbox.height + tooltipMargin * 2;
                                    } else if (height - y - bbox.height / 2 < 0) {
                                        y = height - bbox.height / 2;
                                    }

                                    d3.select(".tooltip")
                                        .style("opacity", 1)
                                        .attr("transform", `translate(${x}, ${y})`);
                                })
                                .on("mouseout", function (d) {
                                    d3.select("svg")
                                        .style("cursor", "none")
                                        .select(".tooltip")
                                        .remove();
                                    d3.selectAll("path").style("opacity", opacity);
                                })
                                .on("touchstart", function (d) {
                                    d3.select("svg").style("cursor", "none");
                                })
                                .each(function (d, i) {
                                    this._current = i;
                                });

                            let legend = d3
                                .select(chart)
                                .append("div")
                                .attr("class", "legend")
                                .style("margin-top", "30px");

                            let keys = legend
                                .selectAll(".key")
                                .data(data)
                                .enter()
                                .append("div")
                                .attr("class", "key")
                                .style("display", "flex")
                                .style("align-items", "center")
                                .style("margin-right", "20px");

                            keys
                                .append("div")
                                .attr("class", "symbol")
                                .style("height", "10px")
                                .style("width", "10px")
                                .style("margin", "5px 5px")
                                .style("background-color", (d, i) => color(i));

                            keys
                                .append("div")
                                .attr("class", "name")
                                .text(d => `${d.loss_description} (${((d.duration * 100) / duration_tot).toFixed(2)})`);

                            keys.exit().remove();

                        },
                        error: function (response) {

                        }
                    });
                }

                if (Report_name == "5") {
                    var losscat = ''
                    if ($("#Loss_Category").val() == "null") {
                        losscat = null
                    }
                    else {
                        losscat = $("#Loss_Category").val()
                    }
                    var myData = {
                        "QueryType": 'Custom_duration',
                        "CompanyCode": '@Session["CompanyCode"]',
                        "PlantCode": '@Session["PlantCode"]',
                        "Line_Code": '@Session["LineCode"]',
                        "fromdate": FDate,
                        "todate": TDate,
                        "Machine_Code": Machine,
                        "report_type": '1',
                        "loss_category":losscat
                    };

                    $.ajax({
                        type: "POST",
                        url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                        data: myData,
                        headers: {
                            Authorization: 'Bearer ' + user1
                        },
                        dataType: "json",
                        beforeSend: function () {
                            $('.loading').show();
                        },
                        complete: function () {
                            $('.loading').hide();
                        },
                        success: function (response) {
                            $("#top_10_duration_pareto").show();

                            d3.select("#top_10_pareto_chart svg").remove();

                            $("#top_10_pareto_div").html("Custom Top 10 Losses based on duration : Pareto");

                            if (response.status != "Error") {
                                sample_pareto = response.data.Table;

                                if (sample_pareto.length < 2) {
                                    $('#top_10_pareto_chart').css("width", "30%");
                                }

                                else if (sample_pareto.length < 5) {
                                    $('#top_10_pareto_chart').css("width", "50%");

                                }
                                else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                    $('#top_10_pareto_chart').css("width", "80%");
                                }
                                else {
                                    $('#top_10_pareto_chart').css("width", "100%");
                                }

                                const a = $('#top_10_pareto_chart').height();
                                const b = $('#top_10_pareto_chart').width();



                                var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                    , h = a - m.top - m.bottom - 25
                                    , w = b - m.left - m.right
                                    , barWidth = 5;

                                var dataset = null;
                                //typecast Amount to #, calculate total, and cumulative amounts


                                //Axes and scales
                                var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                                xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                                xScale.paddingInner(0.2)
                                xScale.paddingOuter(0.2);

                                var yhist = d3.scaleLinear()
                                    .domain([0, d3.max(sample_pareto, function (d) { return d.duration; })])
                                    .range([h, 0]);

                                var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                                var xAxis = d3.axisBottom()
                                    .scale(xScale);


                                var yAxis = d3.axisLeft()
                                    .scale(yhist)


                                var yAxis2 = d3.axisRight()
                                    .scale(ycum);

                                d3.selectAll(".custom > *").remove();

                                var tooltip = d3.select("#top_10_pareto_chart")
                                    .append("div")
                                    .style("opacity", 0)
                                    .attr("class", "tooltip")
                                    .style("background-color", "tranparent")
                                    .style("border", "solid")
                                    .style("border-width", "2px")
                                    .style("border-radius", "5px")
                                    .style("padding", "5px")



                                tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                    .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                                toolval = tooltip.append("div");

                                ////Draw svg
                                var svg_pareto = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", w + m.left + m.right)
                                    .attr("height", h + m.top + m.bottom)
                                    .append("g")
                                    .attr("transform", "translate(" + m.left + "," + m.top + ")");




                                var color = d3.scaleOrdinal(d3.schemeCategory10);

                                //Draw histogram
                                var bar_pareto = svg_pareto.selectAll(".bar")
                                    .data(sample_pareto)
                                    .enter().append("g")
                                    .attr("class", "bar")




                                bar_pareto.append("rect")
                                    .attr("x", function (d) { return xScale(d.loss_description); })
                                    .attr("width", xScale.bandwidth() - 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .attr("height", function (d) { return h - yhist(d.duration); })
                                    .style("fill", function (d) {
                                        if (d.Percentage < 80) {
                                            return color(d.d)
                                        }
                                        else {
                                            return "#B8B0AF"
                                        }
                                    })
                                    .attr("fill", color)
                                    .attr("text", function (d) { return `${d.duration}` })

                                    .on("mouseout", function () {
                                        d3.select(this).style('Stroke', 'none');
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 1);
                                        tooltip.style("visibility", "hidden");
                                    })

                                    .on("mousemove", function (d) {
                                        var bar = d3.select(this);
                                        var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                        d3.selectAll(".bar").transition()
                                            .style("opacity", 4);
                                        d3.select(this).style('Stroke', 'black');
                                        d3.select(this).style('stroke-width', '2');
                                        d3.select(this).transition()
                                            .style("opacity", 2);
                                        tooltip.style("visibility", "visible")
                                            .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                        var text = 'Duration: ' + d.duration + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                        tooltip.select("div").html(text)


                                    })
                                //.on("click", function (d) {
                                //    get_Rejection_data(d.RejectionDescription);

                                //})


                                bar_pareto.selectAll(".bar-title")
                                    .data(sample_pareto)
                                    .enter()
                                    .append("text")
                                    .classed('bar-title', true)
                                    .attr('text-anchor', 'middle')
                                    .style("color", "black")
                                    .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                    .attr("y", function (d) { return yhist(d.duration); })
                                    .text((a) => `${a.duration}`)


                                ////Draw CDF line
                                var guide = d3.line()
                                    .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .y(function (d) { return ycum(d.Percentage) });


                                var line = svg_pareto.append('path')
                                    .datum(sample_pareto)
                                    .attr('d', guide)
                                    .attr('class', 'line');
                                svg_pareto.selectAll(".line")
                                    .data(sample_pareto)
                                    .enter().append("circle")
                                    .attr("r", 3.5)
                                    .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                    .attr("cy", function (d) { return ycum(d.Percentage) });

                                //Draw axes
                                svg_pareto.append("g")
                                    .attr("class", "x axis")
                                    .attr("transform", "translate(0," + h + ")")
                                    .call(xAxis)
                                    .selectAll("text")
                                    .style("text-anchor", "end")
                                    .attr("transform", "rotate(-65)");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .call(yAxis)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", -50)
                                    .attr("dy", ".71em")
                                    .style("text-anchor", "end")

                                    .text("Duration");

                                svg_pareto.append("g")
                                    .attr("class", "y axis")
                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .call(yAxis2)
                                    .append("text")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", 50)
                                    .attr("dy", "-.71em")
                                    .style("text-anchor", "end")
                                    .text("Pareto Percentage");


                                svg_pareto.append("text")
                                    .attr("class", "y label")
                                    //.attr("text-anchor", "end")
                                    .attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "rotate(-90)")
                                    .text("Duration");

                                svg_pareto.append("text")
                                    .attr("class", "y label2")
                                    //.attr("text-anchor", "end")
                                    //.attr("y", -50)
                                    .attr("dy", ".75em")
                                    .attr('text-anchor', 'end')

                                    .attr("transform", "translate(" + [w, 0] + ")")
                                    .attr("transform", "rotate(-90)")
                                    .attr("y", w + 40)
                                    .text("Pareto Percentage %");

                            }
                            else {
                                $("#top_10_pareto_chart").empty();
                                var div_width = 400;
                                var div_height = 400;
                                var svg = d3.select("#top_10_pareto_chart").append("svg")
                                    .attr("width", div_width)
                                    .attr("height", div_height)
                                    .attr("preserveAspectRatio", "xMidYMid")
                                    .append("g")
                                    .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                                svg.append("text")
                                    .text("No Data Available")
                                    .style("font-size", "40px");
                            }
                        },
                        error: function (response) {

                        }
                    });
                }
            }

            else if (Report_name == "6")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Custom',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "fromdate": FDate,
                    "todate": TDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_MTBF_div").html("Custom Top 10 Losses based on MTBF");

                        $("#top_10_loss_MTBF_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_MTBF_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_MTBF_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0)
                            {
                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + response.data.Table[i].MTBF + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_MTBF_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else {
                            $(".pre_error").text(response.msg);
                        }
                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_loss_MTBF_div").html("Custom Top 10 Losses based on MTBF - Chart");

                        $("#top_10_loss_MTBF_chart").show();

                        d3.select("svg").remove();

                        $(".legend").remove();

                        var MTBF_tot = 0;

                        for (var i = 0; i < response.data.Table.length; i++) {
                            MTBF_tot += response.data.Table[i].MTBF;
                        }

                        var data = response.data.Table;

                        var text = "";
                        var width = 200;
                        var height = 200;
                        var thickness = 40;
                        var duration = 750;
                        var padding = 10;
                        var opacity = 0.8;
                        var opacityHover = 1;
                        var otherOpacityOnHover = 0.8;
                        var tooltipMargin = 13;
                        var chart = ".MTBF_chart_details";

                        var radius = Math.min(width - padding, height - padding) / 2;
                        var color = d3.scaleOrdinal(d3.schemeCategory10);

                        var svg = d3
                            .select(chart)
                            .append("svg")
                            .attr("class", "pie")
                            .attr("width", width)
                            .attr("height", height);

                        var g = svg
                            .append("g")
                            .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

                        var arc = d3
                            .arc()
                            .innerRadius(0)
                            .outerRadius(radius);

                        var pie = d3
                            .pie()
                            .value(function (d) {
                                return (d.MTBF * 100) / MTBF_tot;
                            })
                            .sort(null);

                        var path = g
                            .selectAll("path")
                            .data(pie(data))
                            .enter()
                            .append("g")
                            .append("path")
                            .attr("d", arc)
                            .attr("fill", (d, i) => color(i))
                            .style("opacity", opacity)
                            .style("stroke", "white")
                            .on("mouseover", function (d) {
                                d3.selectAll("path").style("opacity", otherOpacityOnHover);
                                d3.select(this).style("opacity", opacityHover);

                                let g = d3
                                    .select("svg")
                                    .style("cursor", "pointer")
                                    .append("g")
                                    .attr("class", "tooltip")
                                    .style("opacity", 0);

                                g.append("text")
                                    .attr("class", "name-text")
                                    .text(`${d.data.loss_description} (${((d.data.MTBF * 100) / MTBF_tot).toFixed(2)})`)
                                    .attr("text-anchor", "middle");

                                let text = g.select("text");
                                let bbox = text.node().getBBox();
                                let padding = 2;
                                g.insert("rect", "text")
                                    .attr("x", bbox.x - padding)
                                    .attr("y", bbox.y - padding)
                                    .attr("width", bbox.width + padding * 2)
                                    .attr("height", bbox.height + padding * 2)
                                    .style("fill", "white")
                                    .style("opacity", 0.75);
                            })
                            .on("mousemove", function (d) {
                                let mousePosition = d3.mouse(this);
                                let x = mousePosition[0] + width / 2;
                                let y = mousePosition[1] + height / 2 - tooltipMargin;

                                let text = d3.select(".tooltip text");
                                let bbox = text.node().getBBox();
                                if (x - bbox.width / 2 < 0) {
                                    x = bbox.width / 2;
                                } else if (width - x - bbox.width / 2 < 0) {
                                    x = width - bbox.width / 2;
                                }

                                if (y - bbox.height / 2 < 0) {
                                    y = bbox.height + tooltipMargin * 2;
                                } else if (height - y - bbox.height / 2 < 0) {
                                    y = height - bbox.height / 2;
                                }

                                d3.select(".tooltip")
                                    .style("opacity", 1)
                                    .attr("transform", `translate(${x}, ${y})`);
                            })
                            .on("mouseout", function (d) {
                                d3.select("svg")
                                    .style("cursor", "none")
                                    .select(".tooltip")
                                    .remove();
                                d3.selectAll("path").style("opacity", opacity);
                            })
                            .on("touchstart", function (d) {
                                d3.select("svg").style("cursor", "none");
                            })
                            .each(function (d, i) {
                                this._current = i;
                            });

                        let legend = d3
                            .select(chart)
                            .append("div")
                            .attr("class", "legend")
                            .style("margin-top", "30px");

                        let keys = legend
                            .selectAll(".key")
                            .data(data)
                            .enter()
                            .append("div")
                            .attr("class", "key")
                            .style("display", "flex")
                            .style("align-items", "center")
                            .style("margin-right", "20px");

                        keys
                            .append("div")
                            .attr("class", "symbol")
                            .style("height", "10px")
                            .style("width", "10px")
                            .style("margin", "5px 5px")
                            .style("background-color", (d, i) => color(i));

                        keys
                            .append("div")
                            .attr("class", "name")
                            .text(d => `${d.loss_description} (${((d.MTBF * 100) / MTBF_tot).toFixed(2)})`);

                        keys.exit().remove();

                    },
                    error: function (response) {

                    }
                });
            }

            else if (Report_name == "7")
            {
                var losscat = ''
                if ($("#Loss_Category").val() == "null") {
                    losscat = null
                }
                else {
                    losscat = $("#Loss_Category").val()
                }
                var myData = {
                    "QueryType": 'Custom_occurence',
                    "CompanyCode": '@Session["CompanyCode"]',
                    "PlantCode": '@Session["PlantCode"]',
                    "Line_Code": '@Session["LineCode"]',
                    "fromdate": FDate,
                    "todate": TDate,
                    "Machine_Code": Machine,
                    "report_type": '1',
                    "loss_category":losscat
                };

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {

                        $("#top_10_Pareto_div").html("Custom Top 10 Losses based on number of occurences : Pareto");

                        $("#top_10_loss_Pareto_table").show();

                        var rowsCnt = document.getElementById("datatable_top_10_Pareto_table").getElementsByTagName("tbody")[0].getElementsByTagName("tr").length;
                        if (rowsCnt > 0) {
                            for (var i = 0; i < rowsCnt; i++) {
                                document.getElementById("datatable_top_10_Pareto_table").deleteRow(1);
                            }
                        }
                        if (response.status != "Error")
                        {
                            if (response.data.Table.length != 0) {
                                var Occurence_tot = 0;

                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Occurence_tot += response.data.Table[i].Occurence;
                                }

                                var j = 1;
                                var Cum_percentage = 0;
                                for (var i = 0; i < response.data.Table.length; i++) {
                                    Cum_percentage += (response.data.Table[i].Occurence * 100) / Occurence_tot;
                                    var newRow = $("<tr>");
                                    var cols = '';
                                    //cols += "<td> " + j + "</td> ";
                                    cols += "<td> " + response.data.Table[i].loss_description + "</td> ";
                                    cols += "<td> " + response.data.Table[i].Occurence + "</td> ";
                                    cols += "<td> " + ((response.data.Table[i].Occurence * 100) / Occurence_tot).toFixed(1) + "</td> ";
                                    cols += "<td> " + Cum_percentage.toFixed(1) + "</td> ";
                                    cols += "</tr>";
                                    newRow.append(cols);
                                    $(".top_10_Pareto_detail").append(newRow);
                                    j++;
                                }
                            }
                        }
                        else
                        {
                            $(".pre_error").text(response.msg);
                        }

                    },
                    error: function (response) {

                    }
                });

                $.ajax({
                    type: "POST",
                    url: URL + 'api/Losses/Get_Loss_Occurence_chart',
                    data: myData,
                    headers: {
                        Authorization: 'Bearer ' + user1
                    },
                    dataType: "json",
                    beforeSend: function () {
                        $('.loading').show();
                    },
                    complete: function () {
                        $('.loading').hide();
                    },
                    success: function (response) {
                        $("#top_10_occurence_pareto").show();

                        d3.select("#top_10_Occurence_pareto_chart svg").remove();

                        $("#top_10_Occurence_pareto_div").html("Custom Top 10 Losses based on number of occurences : Pareto");

                        if (response.status != "Error") {
                            sample_pareto = response.data.Table;

                            if (sample_pareto.length < 2) {
                                $('#top_10_Occurence_pareto_chart').css("width", "30%");
                            }

                            else if (sample_pareto.length < 5) {
                                $('#top_10_Occurence_pareto_chart').css("width", "50%");

                            }
                            else if (sample_pareto.length > 5 && sample_pareto.length < 10) {
                                $('#top_10_Occurence_pareto_chart').css("width", "80%");
                            }
                            else {
                                $('#top_10_Occurence_pareto_chart').css("width", "100%");
                            }

                            const a = $('#top_10_Occurence_pareto_chart').height();
                            const b = $('#top_10_Occurence_pareto_chart').width();



                            var m = { top: 25, right: 50, bottom: 150, left: 50 }
                                , h = a - m.top - m.bottom - 25
                                , w = b - m.left - m.right
                                , barWidth = 5;

                            var dataset = null;
                            //typecast Amount to #, calculate total, and cumulative amounts


                            //Axes and scales
                            var xScale = d3.scaleBand().rangeRound([0, w], 0.1);
                            xScale.domain(sample_pareto.map(function (d) { return d.loss_description; }));
                            xScale.paddingInner(0.2)
                            xScale.paddingOuter(0.2);

                            var yhist = d3.scaleLinear()
                                .domain([0, d3.max(sample_pareto, function (d) { return d.Occurence; })])
                                .range([h, 0]);

                            var ycum = d3.scaleLinear().domain([0, 100]).range([h, 0]);

                            var xAxis = d3.axisBottom()
                                .scale(xScale);


                            var yAxis = d3.axisLeft()
                                .scale(yhist)


                            var yAxis2 = d3.axisRight()
                                .scale(ycum);

                            d3.selectAll(".custom > *").remove();

                            var tooltip = d3.select("#top_10_Occurence_pareto_chart")
                                .append("div")
                                .style("opacity", 0)
                                .attr("class", "tooltip")
                                .style("background-color", "tranparent")
                                .style("border", "solid")
                                .style("border-width", "2px")
                                .style("border-radius", "5px")
                                .style("padding", "5px")



                            tooltip = d3.select("body").append("div").style("width", "200px").style("height", "150px").style("background", "white")
                                .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px");
                            toolval = tooltip.append("div");

                            ////Draw svg
                            var svg_pareto = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", w + m.left + m.right)
                                .attr("height", h + m.top + m.bottom)
                                .append("g")
                                .attr("transform", "translate(" + m.left + "," + m.top + ")");




                            var color = d3.scaleOrdinal(d3.schemeCategory10);

                            //Draw histogram
                            var bar_pareto = svg_pareto.selectAll(".bar")
                                .data(sample_pareto)
                                .enter().append("g")
                                .attr("class", "bar")




                            bar_pareto.append("rect")
                                .attr("x", function (d) { return xScale(d.loss_description); })
                                .attr("width", xScale.bandwidth() - 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .attr("height", function (d) { return h - yhist(d.Occurence); })
                                .style("fill", function (d) {
                                    if (d.Percentage < 80) {
                                        return color(d.d)
                                    }
                                    else {
                                        return "#B8B0AF"
                                    }
                                })
                                .attr("fill", color)
                                .attr("text", function (d) { return `${d.Occurence}` })

                                .on("mouseout", function () {
                                    d3.select(this).style('Stroke', 'none');
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 1);
                                    tooltip.style("visibility", "hidden");
                                })

                                .on("mousemove", function (d) {
                                    var bar = d3.select(this);
                                    var label = d3.select(this.parentNode).selectAll('.label').data([d]);
                                    d3.selectAll(".bar").transition()
                                        .style("opacity", 4);
                                    d3.select(this).style('Stroke', 'black');
                                    d3.select(this).style('stroke-width', '2');
                                    d3.select(this).transition()
                                        .style("opacity", 2);
                                    tooltip.style("visibility", "visible")
                                        .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                    var text = 'Occurence: ' + d.Occurence + '<br/> Percentage: ' + d.Percentage + ' <br/> Loss Description: ' + d.loss_description + '';


                                    tooltip.select("div").html(text)


                                })
                            //.on("click", function (d) {
                            //    get_Rejection_data(d.RejectionDescription);

                            //})


                            bar_pareto.selectAll(".bar-title")
                                .data(sample_pareto)
                                .enter()
                                .append("text")
                                .classed('bar-title', true)
                                .attr('text-anchor', 'middle')
                                .style("color", "black")
                                .attr("x", d => xScale(d.loss_description) + xScale.bandwidth() / 2)
                                .attr("y", function (d) { return yhist(d.Occurence); })
                                .text((a) => `${a.Occurence}`)


                            ////Draw CDF line
                            var guide = d3.line()
                                .x(function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .y(function (d) { return ycum(d.Percentage) });


                            var line = svg_pareto.append('path')
                                .datum(sample_pareto)
                                .attr('d', guide)
                                .attr('class', 'line');
                            svg_pareto.selectAll(".line")
                                .data(sample_pareto)
                                .enter().append("circle")
                                .attr("r", 3.5)
                                .attr("cx", function (d) { return xScale(d.loss_description) + (xScale.bandwidth() / 2); })
                                .attr("cy", function (d) { return ycum(d.Percentage) });

                            //Draw axes
                            svg_pareto.append("g")
                                .attr("class", "x axis")
                                .attr("transform", "translate(0," + h + ")")
                                .call(xAxis)
                                .selectAll("text")
                                .style("text-anchor", "end")
                                .attr("transform", "rotate(-65)");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .call(yAxis)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", -50)
                                .attr("dy", ".71em")
                                .style("text-anchor", "end")

                                .text("Occurence");

                            svg_pareto.append("g")
                                .attr("class", "y axis")
                                .attr("transform", "translate(" + [w, 0] + ")")
                                .call(yAxis2)
                                .append("text")
                                .attr("transform", "rotate(-90)")
                                .attr("y", 50)
                                .attr("dy", "-.71em")
                                .style("text-anchor", "end")
                                .text("Pareto Percentage");


                            svg_pareto.append("text")
                                .attr("class", "y label")
                                //.attr("text-anchor", "end")
                                .attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "rotate(-90)")
                                .text("Occurence");

                            svg_pareto.append("text")
                                .attr("class", "y label2")
                                //.attr("text-anchor", "end")
                                //.attr("y", -50)
                                .attr("dy", ".75em")
                                .attr('text-anchor', 'end')

                                .attr("transform", "translate(" + [w, 0] + ")")
                                .attr("transform", "rotate(-90)")
                                .attr("y", w + 40)
                                .text("Pareto Percentage %");

                        }
                        else {
                            $("#top_10_Occurence_pareto_chart").empty();
                            var div_width = 400;
                            var div_height = 400;
                            var svg = d3.select("#top_10_Occurence_pareto_chart").append("svg")
                                .attr("width", div_width)
                                .attr("height", div_height)
                                .attr("preserveAspectRatio", "xMidYMid")
                                .append("g")
                                .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                            svg.append("text")
                                .text("No Data Available")
                                .style("font-size", "40px");
                        }
                    },
                    error: function (response) {

                    }
                });
            }

        }

    });


</script>
