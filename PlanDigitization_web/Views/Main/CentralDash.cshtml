
@{
    ViewBag.Title = "CentralDash";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<header class="page-header">
    <h2><span id="plantcode"> Central Dashboard</span></h2>
</header>


<div>
    <div id="">
        <section class="panel">
            
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-6">
                        <div class="input-daterange input-group">
                            <span class="input-group-addon">
                                <i class="fa fa-calendar"></i>
                            </span>
                            <input type="text" class="form-control datepics" style="text-align:left;z-index:0;" id="start" name="start" readonly>
                            <span class="input-group-addon">to</span>
                            <input type="text" class="form-control datepice" style="text-align:left;z-index:0;" id="end" name="end" readonly>
                        </div>
                    </div>
                    <div class="col-md-4">
                        @*<div class="btn-group">
                            <button type="button" id="search_mttr" class="mb-xs mt-xs mr-xs btn btn-primary">MTTR</button>
                        </div>
                        <div class="btn-group">
                            <button type="button" id="search_mtbf" class="mb-xs mt-xs mr-xs btn btn-primary">MTBF</button>
                        </div>*@
                        <div class="btn-group">
                            <button type="button" id="view" class="mb-xs mt-xs mr-xs btn btn-primary">VIEW</button>
                        </div>


                        @*<div class="btn-group">
            <button type="button" id="resetcustom" class="mb-xs mt-xs mr-xs btn btn-danger">Reset</button>
        </div>*@
                    </div>
                </div>
                <div id='mttr_container' class="mttr_graph" style="height: 400px; width: 50%; background-color: #e0e0e0; float: left ">
                </div>
                <div id='mtbf_container' class="mtbf_graph" style="height:400px;width:50%;background-color:#dec8c8;float:left">
                    <!--//e0e0e0-->
                </div>
            </div>
        </section>
    </div>

</div>

<script src="~/assets1/javascripts/swal.js"></script>
<script src="~/assets1/javascripts/swal_alert.js"></script>
<script src="~/assets1/datepicker_normal/datepicker_normal_jquery.min.js"></script>
<script src="~/assets1/datepicker_normal/jquery-ui-1.8.19.custom.min.js"></script>
<script src="~/Scripts/bootstrap-datepicker.js"></script>

<script type="text/javascript">
    $(function () {
        var todaydt = new Date();

        $(".datepics").datepicker({
            autoclose: true,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate());
            $('.datepice').datepicker('setStartDate', minDate);
        });

        var Fdate = $(".datepics").val();

        $(".datepice").datepicker({
            autoclose: true,
            startDate: Fdate,
            endDate: todaydt,
            format: 'yyyy-mm-dd'
        }).on('changeDate', function (selected) {
            var minDate = new Date(selected.date);
            minDate.setDate(minDate.getDate());
            $('.datepics').datepicker('setEndDate', minDate);
        });
    });


</script>



<script type="text/javascript">
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["url"]';

    document.getElementById("view").addEventListener("click", function () {

        var linecode = '@Session["LineCode"]';
        var start = $('#start').val();
        var end = $('#end').val();

        $('.updated_time').text(new Date().toLocaleString());
        $('.shift').text("N/A");

        var syear = start.substr(0, 4);
        var eyear = end.substr(0, 4);
        if (syear != eyear && end!='') {
            swal({
                icon: "error",
                title: "Please Select Same Year for Fromdate and Todate...!",
                button: false,
                timer: 4500
            })
            d3.select("svg").remove();

            return;
        }


        if (linecode == '') {
            swal({
                icon: "error",
                title: "Please Provide Line details",
                button: false,
                timer: 4500
            })
        }

        else if (start == '') {
            swal({
                icon: "error",
                title: "Please Provide start date",
                button: false,
                timer: 4500
            })
        }
        else if (end == '') {
            swal({
                icon: "error",
                title: "Please Provide End date",
                button: false,
                timer: 4500
            })
        }
        else {
            if (start > end) {
                swal({
                    icon: "error",
                    title: "Please Provide Dates correctly...",
                    button: false,
                    timer: 4500
                })
            }
            var myData = {
                "line": linecode,
                //"Machine": machinecode,
                //"records": records,
                "FromDate": start,
                "ToDate": end,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                "QueryType": 'MTBF'
            };
            //console.log(myData);
            var sample;
            var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/Get_LineReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    //console.log(response);
                    d3.select(".mtbf_graph svg").remove();
                    if (response.status != "Error") {
                        /* $('#custom_msg').text(response.data.Table1[0].MTBF);*/

                        sample = response.data.Table;
                        d3.select(".mtbf_graph").append("svg");
                        const svg = d3.select('.mtbf_graph svg');
                        const svgContainer = d3.select('.mtbf_graph');

                        const a = $('.mtbf_graph').height();
                        const b = $('.mtbf_graph').width();

                        //const margin = 50;
                        //const width = b - 2 * margin;
                        //const height = a - 2 * margin;

                        const margin = 50;
                        const width = b - 2 * margin - 10;
                        const height = a - 2 * margin - 10;


                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTBF; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".mtbf_graph")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")
                        tooltip = d3.select("body").append("div").style("width", "120px").style("height", "200px").style("background", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px").style("overflow-wrap","break-word");
                        toolval = tooltip.append("div");
                        //chart.append('g')
                        //    .attr('transform', `translate(10, ${height})`)
                        //    .call(d3.axisBottom(xScale))
                        //    .selectAll("text")
                        //    .style("text-anchor", "end")
                        //    .attr("dx", "-.8em")
                        //    .attr("dy", ".15em")
                        //    .attr("transform", function (d) {
                        //        return "rotate(-70)"
                        //    });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTBF))
                            .attr('height', (g) => height - yScale(g.MTBF))
                            .attr('width', xScale.bandwidth())

                            .on("mouseout", function () {
                                //d3.select(this).attr('fill', function(d) { return colorScale(window.bandClassifier(d.perChange,100));});
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })
                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 30) + "px").style("left", (d3.event.pageX + 20) + "px");

                                var text = '<b>Freq: ' + d.Frequency + '</b><b><br/>MTBF: ' + d.MTBF + '</b><br/>'+d.Alarm_Description;

                                //console.log(d3.mouse(this)[0])
                                tooltip.select("div").html(text)

                            })



                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.Frequency) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.Frequency}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            .text('MTBF(in minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text('')
                    }
                    else {
                        $(".mtbf_graph").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".mtbf_graph").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })
                    }
                }
            });


            console.log('at mttr');


            //MTTR

            var myData = {
                "line": linecode,
                /*"Machine": machinecode,*/
                "QueryType": 'MTTR',
                "FromDate": start,
                "ToDate": end,
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]'
            };
            var sample;
            var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
            //$.ajax({
            //    type: 'Get',
            //    url: URL + 'api/UserSettings/GetEmployee',
            //    headers: {
            //        Authorization: 'Bearer ' + user1
            //    },
            //    dataType: 'json'
            //}).success(function (response) {
            $.ajax({
                type: "POST",
                url: URL + 'api/Paretoanalysis/Get_LineReport',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: "json",
                beforeSend: function () {
                    $('.loading').show();
                },
                complete: function () {
                    $('.loading').hide();
                },
                success: function (response) {
                    d3.select(".mttr_graph svg").remove();
                    if (response.status != "Error") {


                        sample = response.data.Table;
                        var lineName = sample[0].lineName;


                        d3.select(".mttr_graph").append("svg");
                        const svg = d3.select('.mttr_graph svg');
                        const svgContainer = d3.select('.mttr_graph');

                        const a = $('.mttr_graph').height();
                        const b = $('.mttr_graph').width();

                        const margin = 50;
                        const width = b - 2 * margin - 10;
                        const height = a - 2 * margin - 10;

                        //const margin = 80;
                        //const width = 1000 - 2 * margin;
                        //const height = 700 - 2 * margin;

                        /* console.log(a+" : "+b);*/

                        const chart = svg.append('g')
                            .attr('transform', `translate(${margin}, ${margin})`);

                        const xScale = d3.scaleBand()
                            .range([0, width])
                            .domain(sample.map((s) => s.Alarm_Description))
                            .padding(0.4)

                        const yScale = d3.scaleLinear()
                            .range([height, 0])
                            .domain([0, d3.max(response.data.Table, function (d) { return d.MTTR; })])

                        const makeYLines = () => d3.axisLeft()
                            .scale(yScale)

                        var tooltip = d3.select(".mttr_graph")
                            .append("div")
                            .style("opacity", 0)
                            .attr("class", "tooltip")
                            .style("background-color", "tranparent")
                            .style("border", "solid")
                            .style("border-width", "2px")
                            .style("border-radius", "5px")
                            .style("padding", "5px")

                        tooltip = d3.select("body").append("div").style("width", "150px").style("height", "200px").style("background", "white")
                            .style("opacity", "1").style("position", "absolute").style("visibility", "hidden").style("padding", "5px").style("overflow-wrap", "break-word");
                        toolval = tooltip.append("div");

                        //chart.append('g')
                        //    .attr('transform', `translate(10, ${height})`)
                        //    .call(d3.axisBottom(xScale))
                        //    .selectAll("text")
                        //    .style("text-anchor", "end")
                        //    .attr("dx", "-.8em")
                        //    .attr("dy", ".15em")
                        //    .attr("transform", function (d) {
                        //        return "rotate(-70)"
                        //    });

                        chart.append('g')
                            .call(d3.axisLeft(yScale));

                        chart.append('g')
                            .attr('class', 'grid')
                            .call(makeYLines()
                                .tickSize(-width, 0, 0)
                                .tickFormat('')
                            )


                        const barGroups = chart.selectAll()
                            .data(sample)
                            .enter()
                            .append('g')


                        barGroups
                            .append('rect')
                            .attr('class', 'bar')
                            .attr('x', (g) => xScale(g.Alarm_Description))
                            .attr('y', (g) => yScale(g.MTTR))
                            .attr('height', (g) => height - yScale(g.MTTR))
                            .attr('width', xScale.bandwidth())

                            .on('mouseenter', function (actual, i) {
                                d3.selectAll('.value')
                                    .attr('opacity', 0)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .delay(300)
                                    .attr('opacity', 0.6)
                                    .attr('x', (a) => xScale(a.Alarm_Description) - 5)
                                    .attr('width', xScale.bandwidth() + 10)

                                const y = yScale(actual.MTTR)

                                line = chart.append('line')
                                    .attr('id', 'limit')
                                    .attr('x1', 0)
                                    .attr('y1', y)
                                    .attr('x2', width)
                                    .attr('y2', y)

                                barGroups.append('text')
                                    .attr('class', 'value')
                                    .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                                    .attr('y', (a) => yScale(a.MTTR) - 10)
                                    .attr('text-anchor', 'middle')
                                    .text((a) => `${a.MTTR}`)

                            })

                            .on("mouseout", function () {
                                d3.select(this).style("stroke", "none");
                                tooltip.style("visibility", "hidden");
                            })

                            .on("mousemove", function (d) {
                                tooltip.style("visibility", "visible")
                                    .style("top", (d3.event.pageY - 10) + "px").style("left", (d3.event.pageX + 5) + "px");

                                var text = '<b>Downtime: ' + d.tot_downtime + '</b><b> <br/> No of Occurence: ' + d.no_of_occurence + '</b></br>'+d.Alarm_Description;

                                tooltip.select("div").html(text)

                            })

                            .on('mouseleave', function () {
                                d3.selectAll('.value')
                                    .attr('opacity', 1)

                                d3.select(this)
                                    .transition()
                                    .duration(300)
                                    .attr('opacity', 1)
                                    .attr('x', (a) => xScale(a.Alarm_Description))
                                    .attr('width', xScale.bandwidth())

                                chart.selectAll('#limit').remove()
                                chart.selectAll('.divergence').remove()
                                chart.selectAll('.value').remove()
                            })

                        barGroups
                            .append('text')
                            .attr('class', 'value')
                            .attr('x', (a) => xScale(a.Alarm_Description) + xScale.bandwidth() / 2)
                            .attr('y', (a) => yScale(a.MTTR) + -10)
                            .attr('text-anchor', 'middle')
                            .text((a) => `${a.MTTR}`)

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', -(height / 2) - margin)
                            .attr('y', margin / 2.4)
                            .attr('transform', 'rotate(-90)')
                            .attr('text-anchor', 'middle')
                            //.text('Time(in minutes)')
                            .text('MTTR (in Minutes)')

                        svg.append('text')
                            .attr('class', 'label')
                            .attr('x', width / 2 + margin)
                            .attr('y', height + margin * 1.7)
                            .attr('text-anchor', 'middle')
                            .text("")
                    }
                    else {
                        $(".mttr_graph").empty();

                        var div_width = 400;
                        var div_height = 400;
                        var svg = d3.select(".mttr_graph").append("svg")
                            .attr("width", div_width)
                            .attr("height", div_height)
                            .attr("preserveAspectRatio", "xMidYMid")
                            .append("g")
                            .attr("transform", "translate(" + (div_width / 2 - 50) + "," + (div_height / 2 - 50) + ")");

                        svg.append("text")
                            .text("No Data Available")
                            .style("font-size", "40px");
                    }

                },
                error: function (response) {
                    if (response.status == "401") {
                        swal({
                            icon: "warning",
                            title: "Session Timeout",
                            button: true,
                            closeModal: false
                        })
                        window.location = R_url;
                    }
                    else {
                        swal({
                            icon: "warning",
                            title: response.responseText,
                            button: true,
                            closeModal: false
                        })

                    }
                }
            });

        }



    })


</script>

