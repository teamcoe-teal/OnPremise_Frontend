
@{
    ViewBag.Title = "Dashboard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .grid {
        display: grid;
        grid-template-columns: repeat(5, 2fr);
        grid-auto-rows: auto;
        grid-gap: 6px;
    }


    /*.half-donut .label {
      font-size: 3rem;
    }*/

    .itemgrid {
        display: grid;
        grid-template-columns: repeat(5, 2fr);
        grid-auto-rows: auto;
        grid-gap: 10px;
        text-align: center;
    }

    .box {
        width: auto;
        height: auto;
    }

    .red {
        background: red;
    }

    .yellow {
        background: yellow;
    }

    .grey {
        background: grey;
    }

    .green {
        background: green;
    }

    .blue {
        background: blue;
    }

    .lightgray {
        background: #D3D3D3;
    }

    .flex-container {
        float: left;
        /*display: flex;
        flex-wrap: nowrap;
        overflow: auto;
        overflow-x: scroll;
        overflow-y: hidden;*/
    }


    div.image {
        align-content: center;
        width: auto; /*width of your image*/
        height: 180px; /*height of your image*/
        background-image: url('../../assets1/map.png');
        background-repeat: no-repeat;
        margin: 0; /* If you want no margin */
        padding: 0; /*if your want to padding */
    }

    .legend {
        padding: 5px;
        font: 10px sans-serif;
        background: yellow;
        box-shadow: 2px 2px 1px #888;
        top: 100px;
    }
</style>
<header class="page-header">
    <h2><span id="plantcode"></span></h2>
</header>

@if ((HttpContext.Current.Session["CompanyCode"] != null) && (HttpContext.Current.Session["CompanyCode"].ToString().Length != 0) && (HttpContext.Current.Session["PlantCode"] != null) && (HttpContext.Current.Session["PlantCode"].ToString().Length != 0) && (HttpContext.Current.Session["LineCode"] != null) && (HttpContext.Current.Session["LineCode"].ToString().Length != 0))
{
    <header class='panel-heading' style="border-style:solid;border-width:thin;border-color:black;text-align:center;background-color:teal;color:white;">


        <span id="line_heading" style="float:left;padding-left:2%;"></span>
        <span id="linetype" style="float: right; padding-right: 2%;"></span>
        <label style="font-weight:bold;text-align:center;font-size:medium;font-weight:lighter;font-size-adjust:inherit">LINE: <span class=" itemname" id="linenamee"></span></label>
    </header>
    <div class='col-md-12 col-xl-12' style="background-color:#DBE3E6;border-style:solid;border-width:thin;border-color:black;">

        <div class='' style="">


            <div class="mainbody">

                <div class="col-sm-10 col-md-10 col-lg-10">


                    <div class='col-sm-12 col-md-12 col-lg-12'>

                        <div class='col-sm-12 col-md-12 col-lg-12'>

                            <div style="padding:0%;">
                                <div class='col-sm-3 col-md-3 col-lg-3' style='align-content:center;padding-left:2%;'>

                                    <svg class="chart" id="chartid" style="align-content:center;"></svg>


                                </div>
                                <div class='col-sm-3 col-md-3 col-lg-3' style='align-content:center;padding-left:2%;'>

                                    <svg class="chart1" id="chartid1" style="align-content:center;"></svg>


                                </div>
                                <div class='col-sm-3 col-md-3 col-lg-3' style='align-content:center;padding-left:2%;'>

                                    <svg class="chart2" id="chartid2" style="align-content:center;"></svg>


                                </div>
                                <div class='col-sm-3 col-md-3 col-lg-3' style='align-content:center;padding-left:2%;'>

                                    <svg class="chart3" id="chartid3" style="align-content:center;"></svg>


                                </div>

                            </div>

                        </div>


                    </div>

                    <div class='col-sm-12 col-md-12 col-lg-12'>

                        <div class='col-sm-3 col-md-3 col-lg-3' style="text-align:center;padding-top:2%;">
                            <header style='border-style:solid;border-width:thin;border-color:black;text-align:center;background-color:teal;color:white;'>
                                Variant Details

                            </header>

                            <br />
                            <div class="row">
                                <div class="">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="width:100%;float:left;background-color:#002929;color:white;"><span id="variant" style="float:left;font-weight:bold;"></span></button>

                                </div>

                                <div class="">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="width:100%;float:left;background-color:#002929;color:white;"><span id="totalok" style="float:left;font-weight:bold;"></span></button>

                                </div>
                                <div class="">
                                    <button type="button" class="mb-xs mt-xs mr-xs btn btn-sm btn-default" style="width:100%;float:left;background-color:#002929;color:white;"><span id="totalnok" style="float:left;font-weight:bold;"></span></button>

                                </div>
                            </div>


                        </div>

                        <div class=' col-sm-3 col-md-3 col-lg-3' style="text-align:center;padding-top:2%;">
                            <header style='border-style:solid;border-width:thin;border-color:black;text-align:center;background-color:teal;color:white;'>
                                Machines
                                <div id="tooltip11">
                                    <span class="glyphicon glyphicon-info-sign gi-8x">

                                    </span>
                                    <table class="tooltiptext">
                                        <thead>

                                        </thead>
                                        <tbody>
                                            <tr>
                                                <td><input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:red;" /></td>
                                                <td style="float:left;">M/c Stopped</td>
                                            </tr>
                                            <tr>
                                                <td><input type="button" class="small" style="border-style:solid;border-width:thin;border-color:black;height:9px;width:8px;background-color:green;" /></td>
                                                <td style="float:left;">M/c Running</td>
                                            </tr>
                                            <tr>
                                                <td><input type="button" class="small" style="border-style: solid;border-width: thin;border-color: black;height: 9px;width: 8px;background-color: yellow;" /></td>
                                                <td style="float:left;">M/c Running with Error</td>
                                            </tr>
                                            <tr>
                                                <td><input type="button" class="small" style="border-style: solid;border-width: thin;border-color: black;height: 9px;width: 8px;background-color: grey;" /></td>
                                                <td style="float:left;">M/c Break</td>
                                            </tr>
                                            <tr>
                                                <td><input type="button" class="small" style="border-style: solid;border-width: thin;border-color: black;height: 9px;width: 8px;background-color: blue;" /></td>
                                                <td style="float:left;">M/c not Running</td>
                                            </tr>

                                        </tbody>
                                    </table>
                                </div>
                            </header>

                            <br />
                            <div class="col-sm-12 col-md-12 col-lg-12" style='padding-top:1%;padding-bottom:1%;border-style:solid;border-width:thin;border-color:black;align-content:center'>

                                <div class='grid machinecount'>

                                </div>
                            </div>


                        </div>

                        <div class='col-sm-6 col-md-6 col-lg-6' style="padding-top:2%;align-content:center;">
                            <header style='border-style:solid;border-width:thin;border-color:black;text-align:center;background-color:teal;color:white;'>
                                Utilization

                            </header>
                            <div class='row col-sm-12 col-md-12 col-lg-12' style='align-content:center;'>

                                <svg class="time1" id="time1" style="align-content:center;text-align:center;justify-content:center;margin-left:-90px;width:500px;"></svg>


                            </div>


                        </div>



                    </div>


                </div>

                <div class="row col-sm-2 col-md-2 col-lg-2">
                    <div class='row col-sm-12 col-md-12 col-lg-12'>

                        <div class="row quicklink ">

                        </div>
                    </div>

                </div>


            </div>


            <div class="mainbodyemty emptydata">

            </div>



        </div>
    </div>
    @*<script src="~/Scripts/d3.v4.js"></script>
        <script src="~/Scripts/d3-scale-chromatic.js"></script>*@
    @*<script src="https://d3js.org/d3.v4.js"></script>
        <script src="https://d3js.org/d3-scale-chromatic.v1.min.js"></script>*@

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/jqueryval")

    <script src="~/assets1/javascripts/swal.js"></script>
    <script src="~/assets1/javascripts/swal_alert.js"></script>


    <script>
    var linename = ''
     var shift_prev = '';
        var linenameS = '';
        var performanceS = '';
        var tokS = '';
    var URL = '@System.Configuration.ConfigurationManager.AppSettings["signalr_url"]';


    $(document).ready(function () {

        getData();
        //sendsms();


    });

    function getData() {

        //$(".itemname").html('');

         var list = [];
        var list1 = [];
            var myData = {
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                "Line_Code" : '@Session["LineCode"]',
        };
       var R_url = '@Url.Action("Login", "Main")';
        var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';

            //$.ajax({
            //    type: 'Post',
            //    url: URL + 'api/OEE/GetEmployee',
            //    headers: {
            //        Authorization: 'Bearer ' + user1
            //    },
            //    dataType: 'json'
            //}).success(function (response) {
            $.ajax({
                type: 'POST',
                url: URL + 'api/OEE/GetLineOEE',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: 'json'
            }).success(function (response) {

                //$("#lineitem").html('');

                //var t = "Welcome to "+response.data[0].CompanyCode+"";
                ////$('#tex').val(t);
                //$('#tex').val(t);
                 $(".prev").hide();

                var t = "Welcome to Plant-Digitization Portal";

                $('#tex').text(t);


                var t0 = " Dashboard";
                //$('#plantcode').val(t0);
                $('#plantcode').text(t0);


                for (i = 0; i < response.data.length; i++) {
                    list.push(response.data[i].Line_Code);
                    list1.push(response.data[i].line_name);
                    //list.push("W5K");
                    //list.push("W5K");
                }
                linename = list[0];
                linefullname = list1[0];
                getlineitems();



            }).error(function (response) {
                if (response.status == "401") {
                    swal({
                        icon: "warning",
                        title: response.responseText,//"Session Timeout",
                        button: true,
                        closeModal: false
                    })
                    window.location = R_url;
                }
                else {
                    swal({
                        icon: "warning",
                        title: response.responseText,
                        button: true,
                        closeModal: false
                    })

                }
            });
             //}).error(function (response) {
             //    swal({
             //        icon: "warning",
             //        title: "Session Timeout",
             //        button: true,
             //        closeModal: false
             //    })
             //    window.location = R_url;
             //});
            // setTimeout(getData, 10000);

             }


        function getlineitems() {
             var R_url = '@Url.Action("Login", "Main")';
            var user1 = '@Session["Token"]' + ':' + '@Session["UserName"]';
            //$.ajax({
            //    type: 'Post',
            //    url: URL + 'api/OEE/GetEmployee',
            //    headers: {
            //        Authorization: 'Bearer ' + user1
            //    },
            //    dataType: 'json'
            //}).success(function (response) {
            var myData = {
                "CompanyCode": '@Session["CompanyCode"]',
                "PlantCode": '@Session["PlantCode"]',
                "Line_Code": '@Session["LineCode"]',
             };
            $.ajax({
                type: 'POST',
                url: URL + 'api/OEE/GetDashboardOEEData',
                headers: {
                    Authorization: 'Bearer ' + user1
                },
                data: myData,
                dataType: 'json'
            }).success(function (response) {


                $("#linenamee").html('');
                $('.machinecount').html('');
                $('.chart').html('');
                 $('.chart1').html('');
                $('.chart2').html('');
                $('.chart3').html('');
                $('.time1').html('');
                $('#totalok').html('');
                $('#totalnok').html('');
                $('#variant').html('');
                $("#details1").empty();

                //$('.quicklink').html('');
                //$('#assetscount').val(response.data[0].MachineCount+1);

                $("#linenamee").text(linefullname+'_'+linename);

                if (response.data.length != 0) {

                    $(".mainbody").show();

                    $(".mainbodyempty").hide();

                    $(".emptydata").html('');


                    var count = response.data[0].MachineCount ;
                    document.getElementById('line_heading').textContent = 'No of assets connected:' + count + '';

                    document.getElementById('linetype').textContent = 'Type: '+response.data[0].Dept_name;
                    //$('#assetscount').text(response.data[0].MachineCount+1);
                    $('.updated_time').text(new Date().toLocaleString());
                    $('.shift').text(response.data[0].shift_id);

                    //for (var i = 0; i < response.data.length; i++) {
                    //   var numb_array = [];
                    //    var mc_high_no = response.data[i].MachineIndex
                    //   numb_array.push(parseInt(mc_high_no));

                    //}
                    //var max = numb_array.reduce(function (a, b) {
                    //   return Math.max(a, b);
                    //});
                    var final_oee = 0;
                    var final_Availability = 0;
                    var final_Performance = 0;
                    var final_Quality = 0;
                    var final_uptime = 0;
                    var final_downtime = 0;
                    var final_breaktime = 0;
                    var final_losstime = 0;
                    for (var i = 0; i < response.data.length; i++) {
                        if (response.data[i].MachineIndex == 1) {
                            final_oee = response.data[i].OEE;
                            document.getElementById('variant').textContent = 'Variant: '+response.data[i].variant_name;
                            //$('#variant').text(response.data[i].variant_name);
                            final_Availability = response.data[i].Availability;
                            final_Performance = response.data[i].Performance;
                            final_Quality = response.data[i].Quality;
                            final_uptime = response.data[i].uptime;
                            final_downtime = response.data[i].downtime;
                            final_breaktime = response.data[i].breaktime;
                            final_losstime = response.data[i].losstime;
                        }
                    }

                    //alert(final_oee)

                    for (var i = 0; i < 1; i++)
                    {


                       // $("#linenamee").text(response.data[i].line_name+'_'+response.data[i].Line_Code);

                        //$('#totalok').text(response.data[i].totalok);
                        //$('#totalnok').text(response.data[i].totalnok);
                        document.getElementById('totalok').textContent = 'Total OK Parts Produced: ' + response.data[i].totalok;
                        document.getElementById('totalnok').textContent = 'Total Parts Rejected: '+response.data[i].totalnok;
                        //document.getElementById('uptime').textContent = 'UpTime: ' + response.data[i].uptime;
                        //document.getElementById('downtime').textContent = 'DownTime: ' + response.data[i].downtime;
                        //document.getElementById('losstime').textContent = 'LossTime: ' + response.data[i].losstime;
                        //document.getElementById('breaktime').textContent = 'BreakTime: '+response.data[i].losstime;


                           $('.quicklink').html("<header>&nbsp;</header><div class='col-lg-12 col-md-12 col-sm-12' style ='background-color:#00ACF7;color:black;border-style:solid;border-width:thin;border-color:black;'>"+
                            "<header style='font-weight:bolder;color:black;text-content:center;align-content:center;'>RealTime Dashboard</header>" +
                            "<div class='' style='text-align:center;width:100%;align-content:center;padding-bottom:2%;'>"+
                             "<div class='' style='text-align:center;width:100%;align-content:center;'>"+
                            "<a href='/Quality/QualityLiveDashboard?" + linename + "'' style='text-decoration:none'><button type='button' class=' btn btn-xs btn-default' style='width:100%;background-color:#028A72;color:black;'><i class='fa fa-bar-chart-o fa-lg' aria-hidden='true' style='color:#000203'></i></br><span style='font-size-adjust:initial;font-size:small;color:black'>Production</span></button></a>" +
                            "</div>"+
                            "<div class='' style='text-align:center;width:100%;align-content:center;'>" +
                            "<a href='/FirstPassYield/HourlyTrackerLive?" + linename + "' style='text-decoration:none'><button type='button' class=' btn btn-xs btn-default' style='width:100%;background-color:#028A72;color:black;'><i class='fa fa-clock-o fa-lg' aria-hidden='true' style='color:#000203'></i></br><span style='font-size-adjust:initial;font-size:small;color:black'>Hourly&nbsp;Tracker</span></button></a>" +
                            "</div>"+
                            "<div class='' style='text-align:center;width:100%;align-content:center;'>" +
                            "<a href='/Availability/AvailabilityLiveDashboard?" + linename + "' style='text-decoration:none'><button type='button' class=' btn btn-xs btn-default' style='width:100%;background-color:#028A72;color:black;'><i class='fa fa-history fa-lg' aria-hidden='true' style='color:#000203'></i></br><span style='font-size-adjust:initial;font-size:small;color:black'>Machine<br/>Availability</span></button></a>" +
                            "</div>"+
                            "<div class='' style='text-align:center;width:100%;align-content:center;'>" +
                            "<a href='/OEE/OEELiveDashboard?" + linename + "' style='text-decoration:none'><button type='button' class=' btn btn-xs btn-default' style='width:100%;background-color:#028A72;color:black;'><i class='fa fa-dashboard fa-lg' aria-hidden='true' style='color:#000203'></i></br><span style='font-size-adjust:initial;font-size:small;color:black'>OEE</span></button></a>" +
                            "</div>"+
                            "<div class='' style='text-align:center;width:100%;align-content:center;'>" +
                            "<a href='/OperatorEfficiency/OperatorEfficiencyLive?" + linename + "' style='text-decoration:none'><button type='button' class=' btn btn-xs btn-default' style='width:100%;background-color:#028A72;color:black;'><i class='fa fa-user fa-lg' aria-hidden='true' style='color:#000203'></i></br><span style='font-size-adjust:initial;font-size:small;color:black'>Operator<br/>Efficiency</span></button></a>" +
                            "</div>"+
                            "<div class='' style='text-align:center;width:100%;align-content:center;'>" +
                            "<a href='/ToolLife/ToolLifeLiveDashboard?" + linename + "' style='text-decoration:none'><button type='button' class=' btn btn-xs btn-default' style='width:100%;background-color:#028A72;color:black;'><i class='fa  fa-th-list fa-lg' aria-hidden='true' style='color:#000203'></i></br><span style='font-size-adjust:initial;font-size:small;color:black'>Preventive<br/>Maintenance</span></button></a>" +
                            "</div>"+
                            "<div class='' style='text-align:center;width:100%;align-content:center;'>" +
                             "<a href='/FirstPassYield/FirstPassYieldLiveDashboard?" + linename + "' style='text-decoration:none'><button type='button' class=' btn btn-xs btn-default' style='width:100%;background-color:#028A72;color:black;'><i class='fa fa-check-square-o fa-lg' aria-hidden='true' style='color:#000203'></i></br><span style='font-size-adjust:initial;font-size:small;color:black'>FirstPass&nbsp;Yield</span></button>"+
                            "</div>" +
                            "</div>"+
                            //"<a href='/Quality/QualityLiveDashboard?"+linename+"' style='text-decoration:none'><span style='font-size-adjust:inherit;color:black'>Production Dashboard</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />"+
                            //"<a href='/FirstPassYield/HourlyTrackerLive?"+linename+"' style='text-decoration:none'><span style='font-size-adjust:inherit;color:black'>Hourly Tracker</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />"+
                            //"<a href='/FirstPassYield/FirstPassYieldLiveDashboard?" + linename + "' style='text-decoration:none'><span style='font-size-adjust:inherit;color:black'>FirstPass Yield</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />" +
                            //"<a href='/Availability/AvailabilityLiveDashboard?" + linename + "' style='text-decoration:none'><span style='font-size-adjust:inherit;color:black'>Machine Availability</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />" +
                            //"<a href='/OEE/OEELiveDashboard?" + linename + "' style='text-decoration:none'><span style='font-size-adjust:inherit;color:black'>OEE</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />" +
                            //"<a href='/OperatorEfficiency/OperatorEfficiencyLive?" + linename + "' style='text-decoration:none'><span style='font-size-adjust:inherit;color:black'>Operator Efficiency</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />" +
                            //"<a href='/ToolLife/ToolLifeLiveDashboard?" + linename + "' style='text-decoration:none'><span style='font-size-adjust:inherit;color:black'>Preventive Maintenance</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />" +
                            //"<a href='/Paretoanalysis/AndonLive?" + linename + "' style='text-decoration:none'><span style='font-size-adjust: inherit; color: black'>AndON</span>&nbsp;<span class='fa fa-external-link' style='color:black'></span></a><br />" +

                             "</div > ");

                        chec(final_oee, 100 - final_oee);
                        chec1(final_Availability, 100 - final_Availability);
                        chec2(final_Performance, 100 - final_Performance);
                        chec3(final_Quality, 100 - final_Quality);
                        time11(final_uptime,final_downtime,final_losstime,final_breaktime);
                        //time11(60,110,42,83);


                        for (var j = 0; j < response.data[0].MachineCount; j++)
                        {

                            var color = '';
                            if (response.data[j].MachineStatus == "0") {
                                color = 'red';
                            }
                            if (response.data[j].MachineStatus == '1') {
                                color = 'green';
                            }
                            if (response.data[j].MachineStatus == '2') {
                                color = 'yellow';
                            }
                            if (response.data[j].MachineStatus == '3') {
                                color = 'yellow';
                            }
                            if (response.data[j].MachineStatus == '4') {
                                color = 'grey';
                            }
                            if (response.data[j].MachineStatus == '5') {
                                color = 'blue';
                            }
                            //$('.machinecount').append("<div class='' title='" + response.data[j].MachineCode + "' style='border-style:none;'><img src='/Images/working-factory-svgrepo-com.svg' style='background-color:"+color+";' /> </div>");
                           $('.machinecount').append("<div class='box "+color+"' title='" + response.data[j].MachineCode + "' style='border-style:solid;border-width:thin;border-color:black'><p></p> </div>");
                        }

                          var newRow = $("<tr>");
                            var cols = '';
                            cols += "<td style='text-align:center;'> <table border='1' style='border-collapse:collapse;width:100%;background-color:#1bb7cb;color:black;'><tr><td>A</td><td>P</td><td>Q</td></tr><tr><td> " + response.data[i].Availability + "</td><td> " + response.data[i].Performance + "</td><td> " + response.data[i].Quality + "</td></tr></table></td>";
                            cols += "</tr>"

                            newRow.append(cols);

                            $("#details1").append(newRow);

                    }
                    //alert("came")
                    //$('.hideline').hide();
                    //$('.lineitemname' + aa + '').show();
                }
                else
                {
                    $(".mainbody").hide();

                    $(".mainbodyempty").show();

                    $(".emptydata").html('');

                    $('.updated_time').text("N/A");
                    $('.shift').text("N/A");

                    document.getElementById('line_heading').textContent = '';

                    document.getElementById('linetype').textContent = '';

                    var cols = '';
                    cols += "<div class='col-md-12 col-xl-12' style='font-weight:bold;font-size:15px;color:red;align-content:center;text-align:center;'> No Data Available...!</div>";
                    $(".emptydata").html(cols);
                }
            }).error(function (response) {
                if (response.status == "401") {
                    swal({
                        icon: "warning",
                        title: response.responseText,//"Session Timeout",
                        button: true,
                        closeModal: false
                    })
                    window.location = R_url;
                }
                else {
                    swal({
                        icon: "warning",
                        title: response.responseText,
                        button: true,
                        closeModal: false
                    })

                }
            });
            //}).error(function (response) {

            //    swal({
            //        icon: "warning",
            //        title: "Session Timeout",
            //        button: true,
            //        closeModal: false
            //    })
            //    window.location = R_url;

            //});
            //sendsms();
             setTimeout(getlineitems, 120000);
        }

    </script>

    <script>

        function chec(aa, bb) {


            // Data
            var value = aa / 100

            if (value >= 1) {
                value = 1;
            }

            var text = Math.round(value * 100) + '%'


            var data = [value, 1 - value]

            // Settings
            var width = $('#chartid').width()
            var height = $('#chartid').height()
            var anglesRange = 0.5 * Math.PI
            var radis = Math.min(width, 2 * height) / 2
            var thickness = 30
            // Utility
            //     var colors = d3.scale.category10();
            // Create dummy data

            var color = '';

            if (aa >= 81 && aa <= 100) {
                color = '#009900';
            }
            else if (aa >= 61 && aa <= 80) {
                color = '#d95f02';
            }
            else if (aa >= 41 && aa <= 60) {
                color = '#000099';
            }
            else if (aa >= 0 && aa <= 40) {
                color = '#FF0000';
            }
            else {
                color = '#ad1337';
            }
            var colors = [color, "#F5F5F5"]

            var pies = d3.pie()
                .value(d => d)
                .sort(null)
                .startAngle(anglesRange * -1)
                .endAngle(anglesRange)

            var arc = d3.arc()
                .outerRadius(radis)
                .innerRadius(radis - thickness)

            var translation = (x, y) => `translate(${x}, ${y})`

            // Feel free to change or delete any of the code you see in this editor!
            var svg = d3.select(".chart").append("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("class", "half-donut")
                .append("g")
                .attr("transform", translation(width / 2, height))


            svg.selectAll("path")
                .data(pies(data))
                .enter()
                .append("path")
                .attr("fill", (d, i) => colors[i])
                .attr("d", arc)

            svg.append("text")
                .attr("text-anchor", "middle")
                //.attr('font-size', '-3rem')
                .attr('y', 5)
                .attr("dy", "-3rem")
                .text(d => text)


            svg.append("text")
                .text("OEE")
                .attr("dy", "-0.5rem")
                .attr("class", "label")
                .attr("text-anchor", "middle")
            //.attr('font-size', '-4em')


        }

        function chec1(aa, bb) {


            // Data
            var value = aa / 100

            if (value >= 1) {
                value = 1;
            }

            var text = Math.round(value * 100) + '%'


            var data = [value, 1 - value]

            // Settings
            var width = $('#chartid1').width()
            var height = $('#chartid1').height()
            var anglesRange = 0.5 * Math.PI
            var radis = Math.min(width, 2 * height) / 2
            var thickness = 30
            // Utility
            //     var colors = d3.scale.category10();
            // Create dummy data

            var color = '';

            if (aa >= 81 && aa <= 100) {
                color = '#009900';
            }
            else if (aa >= 61 && aa <= 80) {
                color = '#d95f02';
            }
            else if (aa >= 41 && aa <= 60) {
                color = '#000099';
            }
            else if (aa >= 0 && aa <= 40) {
                color = '#FF0000';
            }
            else {
                color = '#ad1337';
            }
            var colors = [color, "#F5F5F5"]

            var pies = d3.pie()
                .value(d => d)
                .sort(null)
                .startAngle(anglesRange * -1)
                .endAngle(anglesRange)

            var arc = d3.arc()
                .outerRadius(radis)
                .innerRadius(radis - thickness)

            var translation = (x, y) => `translate(${x}, ${y})`

            // Feel free to change or delete any of the code you see in this editor!
            var svg = d3.select(".chart1").append("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("class", "half-donut")
                .append("g")
                .attr("transform", translation(width / 2, height))


            svg.selectAll("path")
                .data(pies(data))
                .enter()
                .append("path")
                .attr("fill", (d, i) => colors[i])
                .attr("d", arc)

            svg.append("text")
                .attr("text-anchor", "middle")
                //.attr('font-size', '-3rem')
                .attr('y', 5)
                .attr("dy", "-3rem")
                .text(d => text)


            svg.append("text")
                .text("Availability")
                .attr("dy", "-0.5rem")
                .attr("class", "label")
                .attr("text-anchor", "middle")
            //.attr('font-size', '-4em')


        }

        function chec2(aa, bb) {


            // Data
            var value = aa / 100

            if (value >= 1) {
                value = 1;
            }

            var text = Math.round(value * 100) + '%'


            var data = [value, 1 - value]

            // Settings
            var width = $('#chartid2').width()
            var height = $('#chartid2').height()
            var anglesRange = 0.5 * Math.PI
            var radis = Math.min(width, 2 * height) / 2
            var thickness = 30
            // Utility
            //     var colors = d3.scale.category10();
            // Create dummy data

            var color = '';

            if (aa >= 81 && aa <= 100) {
                color = '#009900';
            }
            else if (aa >= 61 && aa <= 80) {
                color = '#d95f02';
            }
            else if (aa >= 41 && aa <= 60) {
                color = '#000099';
            }
            else if (aa >= 0 && aa <= 40) {
                color = '#FF0000';
            }
            else {
                color = '#ad1337';
            }
            var colors = [color, "#F5F5F5"]

            var pies = d3.pie()
                .value(d => d)
                .sort(null)
                .startAngle(anglesRange * -1)
                .endAngle(anglesRange)

            var arc = d3.arc()
                .outerRadius(radis)
                .innerRadius(radis - thickness)

            var translation = (x, y) => `translate(${x}, ${y})`

            // Feel free to change or delete any of the code you see in this editor!
            var svg = d3.select(".chart2").append("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("class", "half-donut")
                .append("g")
                .attr("transform", translation(width / 2, height))


            svg.selectAll("path")
                .data(pies(data))
                .enter()
                .append("path")
                .attr("fill", (d, i) => colors[i])
                .attr("d", arc)

            svg.append("text")
                .attr("text-anchor", "middle")
                //.attr('font-size', '-3rem')
                .attr('y', 5)
                .attr("dy", "-3rem")
                .text(d => text)


            svg.append("text")
                .text("Performance")
                .attr("dy", "-0.5rem")
                .attr("class", "label")
                .attr("text-anchor", "middle")
            //.attr('font-size', '-4em')

        }

        function chec3(aa, bb) {


            // Data
            var value = aa / 100

            if (value >= 1) {
                value = 1;
            }

            var text = Math.round(value * 100) + '%'


            var data = [value, 1 - value]
            var data = [value, 1 - value]

            // Settings
            var width = $('#chartid3').width()
            var height = $('#chartid3').height()
            var anglesRange = 0.5 * Math.PI
            var radis = Math.min(width, 2 * height) / 2
            var thickness = 30
            // Utility
            //     var colors = d3.scale.category10();
            // Create dummy data

            var color = '';

            if (aa >= 81 && aa <= 100) {
                color = '#009900';
            }
            else if (aa >= 61 && aa <= 80) {
                color = '#d95f02';
            }
            else if (aa >= 41 && aa <= 60) {
                color = '#000099';
            }
            else if (aa >= 0 && aa <= 40) {
                color = '#FF0000';
            }
            else {
                color = '#ad1337';
            }
            var colors = [color, "#F5F5F5"]


            var pies = d3.pie()
                .value(d => d)
                .sort(null)
                .startAngle(anglesRange * -1)
                .endAngle(anglesRange)

            var arc = d3.arc()
                .outerRadius(radis)
                .innerRadius(radis - thickness)

            var translation = (x, y) => `translate(${x}, ${y})`

            // Feel free to change or delete any of the code you see in this editor!
            var svg = d3.select(".chart3").append("svg")
                .attr("width", width)
                .attr("height", height)
                .attr("class", "half-donut")
                .append("g")
                .attr("transform", translation(width / 2, height))


            svg.selectAll("path")
                .data(pies(data))
                .enter()
                .append("path")
                .attr("fill", (d, i) => colors[i])
                .attr("d", arc)

            svg.append("text")
                .attr("text-anchor", "middle")
                //.attr('font-size', '-3rem')
                .attr('y', 5)
                .attr("dy", "-3rem")
                .text(d => text)


            svg.append("text")
                .text("Quality")
                .attr("dy", "-0.5rem")
                .attr("class", "label")
                .attr("text-anchor", "middle")
            //.attr('font-size', '-4em')


        }

    </script>

    @*<script type="text/javascript">

            function time(a, b, c, d) {

                var width = $('.time1').width()
                height = $('.time1').height()
                margin = 5

                //var width = 140
                //height = 140
                //margin = 10

                // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
                var radius = Math.min(width, height) / 2 - margin;

                // append the svg object to the div called 'availabilitychart'
                var svg = d3.select(".time1")
                    .append("svg")
                    .attr("width", width)
                    .attr("height", height)
                    .append("g")
                    .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");


                // Create dummy data
                var data = {"Uptime": a,"DownTime": b,"LossTime": c,"BreakTime": d }

                //var color = '';

                //if (aa >= 81 && aa <= 100) {
                //    color = '#009900';
                //}
                //else if (aa >= 61 && aa <= 80) {
                //    color = '#d95f02';
                //}
                //else if (aa >= 41 && aa <= 60) {
                //    color = '#000099';
                //}
                //else if (aa >= 0 && aa <= 40) {
                //    color = '#FF0000';
                //}

                var color = d3.scaleOrdinal(['#4daf4a','#377eb8','#ff7f00','#984ea3','#e41a1c']);
                //var color = d3.scale.category20();

                // set the color scale
                //var color = d3.scaleOrdinal()
                //    .domain(["a", "b","c","d"])
                //    .range([color, "#d3dee0"]);

                // Compute the position of each group on the pie:
                var pie = d3.pie()
                    .sort(null) // Do not sort group by size
                    .value(function (d) { return d.value; })
                var data_ready = pie(d3.entries(data))

                // The arc generator
                var arc = d3.arc()
                    .innerRadius(radius * 0.5)         // This is the size of the donut hole
                    .outerRadius(radius * 0.8)

                // Another arc that won't be drawn. Just for labels positioning
                var outerArc = d3.arc()
                    .innerRadius(radius * 0.9)
                    .outerRadius(radius * 0.9)


                // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.

                svg
                    .selectAll('allSlices')
                    .data(data_ready)
                    .enter()
                    .append('path')
                    .attr('d', arc)
                    .attr('fill', function (d) { return (color(d.data.key)) })

                svg.append("text")
                    .attr("text-anchor", "middle")
                    .attr('font-size', '4em')
                    .attr('y', 5)
                    .text("Utilization");
            }

        </script>*@

    <script>

        //function time(a, b, c, d) {

        //    // set the dimensions and margins of the graph

        //    var width = $('.time1').width()
        //    height = $('.time1').height()
        //    margin = 5

        //    var legendRectSize = 18;
        //var legendSpacing = 4;

        //    //var width = 450
        //    //    height = 450
        //    //    margin = 40

        //    // The radius of the pieplot is half the width or half the height (smallest one). I subtract a bit of margin.
        //    var radius = Math.min(width, height) / 2 - margin

        //    // append the svg object to the div called 'my_dataviz'
        //    var svg = d3.select(".time1")
        //        .append("svg")
        //        .attr("width", width)
        //        .attr("height", height)
        //        .append("g")
        //        .attr("transform", "translate(" + width / 2 + "," + height / 2 + ")");

        //    var data = {};



        //    if (a == 0 && b == 0 && c == 0 && d == 0) {
        //        data = { "upTime": 0, "DownTime": 0, "LossTime": 0, "BreakTime": 0, "No Production": 1 }
        //    }
        //    else {
        //        data = { "upTime": a, "DownTime": b, "LossTime": c, "BreakTime": d, "No Production": 0 }
        //    }


        //    // set the color scale
        //    //var color = d3.scaleOrdinal()
        //    //    .domain(["a", "b", "c", "d"])
        //    //    .range(d3.scale.category10());

        //    var color = d3.scaleOrdinal() // v4
        //        //.domain(['green', 'red', 'blue', 'orange', 'white']),'#F0F0F0'
        //        .range(['#00ff00', '#ff0000', '#0000ff', '#f56c0a', '#D1D1D1']);


        //    // Compute the position of each group on the pie:
        //    var pie = d3.pie()
        //        .sort(null) // Do not sort group by size
        //        .value(function (d) { return d.value; })

        //    //var tooltip = d3.select('.time11')
        //    //    .append('div')
        //    //    .attr('class', 'tooltip');

        //    //    tooltip.append('div')
        //    //    .attr('class', 'label');

        //    //    tooltip.append('div')
        //    //    .attr('class', 'count');

        //    //    //tooltip.append('div')
        //    //    //.attr('class', 'percent');



        //    var data_ready = pie(d3.entries(data))

        //    //alert(JSON.stringify(data_ready))

        //    // The arc generator
        //    var arc = d3.arc()
        //        .innerRadius(radius * 0.5)         // This is the size of the donut hole
        //        .outerRadius(radius * 0.8)


        //    // Another arc that won't be drawn. Just for labels positioning
        //    var outerArc = d3.arc()
        //        .innerRadius(radius * 0.9)
        //        .outerRadius(radius * 0.9)

        //    // Build the pie chart: Basically, each part of the pie is a path that we build using the arc function.
        //    svg
        //        .selectAll('allSlices')
        //        .data(data_ready)
        //        .enter()
        //        .append('path')
        //        .attr('d', arc)
        //        .attr('fill', function (d) { return (color(d.data.key)) })
        //        .attr("stroke", "white")
        //        .style("stroke-width", "2px")
        //        .style("opacity", 0.7)

        //  //  svg
        //  //      .on('mouseenter', function (data_ready) {
        //  //       alert(data_ready.value)
        //  //  //var total = d3.sum(data_ready.map(function(d) {                // NEW
        //  //  //  return d.data.value;                                           // NEW
        //  //  //}));                                                        // NEW
        //  //  //var percent = Math.round(1000 * d.data.count / total) / 10; // NEW
        //  //  tooltip.select('.label').html(data_ready.data.value);                // NEW
        //  //  tooltip.select('.count').html(data_ready.data.value);                // NEW
        //  //  //tooltip.select('.percent').html(percent + '%');             // NEW
        //  //  tooltip.style('display', 'block');                          // NEW
        //  //});                                                           // NEW

        //  //svg.on('mouseout', function() {                              // NEW
        //  //  tooltip.style('display', 'none');                           // NEW
        //  //});




        //    //// Add the polylines between chart and labels:
        //    //svg
        //    //    .selectAll('allPolylines')
        //    //    .data(data_ready)
        //    //    .enter()
        //    //    .append('polyline')
        //    //    .attr("stroke", "black")
        //    //    .style("fill", "none")
        //    //    .attr("stroke-width", 1)
        //    //    .attr('points', function (d) {
        //    //        var posA = arc.centroid(d) // line insertion in the slice
        //    //        var posB = outerArc.centroid(d) // line break: we use the other arc generator that has been built only for that
        //    //        var posC = outerArc.centroid(d); // Label position = almost the same as posB
        //    //        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2 // we need the angle to see if the X position will be at the extreme right or extreme left
        //    //        posC[0] = radius * 0.95 * (midangle < Math.PI ? 1 : -1); // multiply by 1 or -1 to put it on the right or on the left
        //    //        return [posA, posB, posC]
        //    //    })

        //    //// Add the polylines between chart and labels:
        //    //svg
        //    //    .selectAll('allLabels')
        //    //    .data(data_ready)
        //    //    .enter()
        //    //    .append('text')
        //    //    .text(function (d) { console.log(d.data.value); return d.data.value })
        //    //    .attr('transform', function (d) {
        //    //        var pos = outerArc.centroid(d);
        //    //        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
        //    //        pos[0] = radius * 0.99 * (midangle < Math.PI ? 1 : -1);
        //    //        return 'translate(' + pos + ')';
        //    //    })
        //    //    .style('text-anchor', function (d) {
        //    //        var midangle = d.startAngle + (d.endAngle - d.startAngle) / 2
        //    //        return (midangle < Math.PI ? 'start' : 'end')
        //    //    })

        //    var legend = svg.selectAll('.legend')
        //    .data(color.domain())
        //    .enter()
        //    .append('g')
        //    .attr('class', 'legend')
        //    .attr('transform', function(d, i) {
        //      var height = (legendRectSize + legendSpacing)/1.5;
        //      var offset =  height * color.domain().length / 2;
        //      var horz = -2 * legendRectSize;
        //      var vert = i * height - offset;
        //      return 'translate(' + horz + ',' + vert + ')';
        //    });

        //  legend.append('rect')
        //    .attr('width', legendRectSize)
        //    .attr('height', legendRectSize)
        //    .style('fill', color)
        //    .style('stroke', color);

        //    legend.append('text')
        //        .data(data_ready)
        //    .attr('x', legendRectSize + legendSpacing)
        //      .attr('y', legendRectSize - legendSpacing)
        //      .text(function (d) { return d.data.value+" mins"; });
        //}

        function time11(aa, bb, cc, dd) {


            var width = $('#time1').width()
            var height = $('#time1').height() - 10
            var anglesRange = 0.5 * Math.PI
            var radius = Math.min(width, 2 * height) / 3
            var thickness = 30


            var labelr = radius + 30; // radius for label anchor
            //array of colors for the pie (in the same order as the dataset)

            var color11 = '';

            //var color = d3.scaleOrdinal()
            //    .range(['#2b5eac', '#0dadd3', '#ffea61', '#ff917e', '#ff3e41']);

            if (aa == 0 && bb == 0 && cc == 0 && dd == 0) {
                data = [{ label: 'No Production', value: 1 }];
                color11 = ["darkgrey"];
            }
            else if (aa == 0 && bb == 0 && cc == 0) {
                data = [{ label: 'BreakTime', value: dd }];
                color11 = ["blue"];
            }
            else if (aa == 0 && bb == 0 && dd == 0) {
                data = [{ label: 'LossTime', value: cc }];
                color11 = ["#f0640f"];
            }
            else if (aa == 0 && cc == 0 && dd == 0) {
                data = [{ label: 'DownTime', value: bb }];
                color11 = ["red"];
            }
            else if (bb == 0 && cc == 0 && dd == 0) {
                data = [{ label: 'UpTime', value: aa }];
                color11 = ["green"];
            }
            else if (aa == 0 && bb == 0) {
                data = [{ label: 'LossTime', value: cc }, { label: 'BreakTime', value: dd }, { label: 'dummy', value: 3 }];
                color11 = ["#f0640f", "blue", "white"];
            }
            else if (aa == 0 && cc == 0) {
                data = [{ label: 'DownTime', value: bb }, { label: 'BreakTime', value: dd }, { label: 'dummy', value: 3 }];
                color11 = ["red", "blue", "white"];
            }
            else if (aa == 0 && dd == 0) {
                data = [{ label: 'DownTime', value: bb }, { label: 'LossTime', value: cc }, { label: 'dummy', value: 3 }];
                color11 = ["red", "#f0640f", "white"];
            }
            else if (bb == 0 && cc == 0) {
                data = [{ label: 'UpTime', value: aa }, { label: 'BreakTime', value: dd }, { label: 'dummy', value: 3 }];
                color11 = ["green", "blue", "white"];
            }
            else if (bb == 0 && dd == 0) {
                data = [{ label: 'UpTime', value: aa }, { label: 'LossTime', value: cc }, { label: 'dummy', value: 3 }];
                color11 = ["green", "#f0640f", "white"];
            }
            else if (cc == 0 && dd == 0) {
                data = [{ label: 'UpTime', value: aa }, { label: 'DownTime', value: bb }, { label: 'dummy', value: 3 }];
                color11 = ["green", "red", "white"];
            }
            else if (aa == 0) {
                data = [{ label: 'DownTime', value: bb }, { label: 'LossTime', value: cc }, { label: 'BreakTime', value: dd }, { label: 'dummy', value: 3 }];
                color11 = ["red", "#f0640f", "blue", "white"];
            }
            else if (bb == 0) {
                data = [{ label: 'UpTime', value: aa }, { label: 'LossTime', value: cc }, { label: 'BreakTime', value: dd }, { label: 'dummy', value: 3 }];
                color11 = ["green", "#f0640f", "blue", "white"];
            }
            else if (cc == 0) {
                data = [{ label: 'UpTime', value: aa }, { label: 'DownTime', value: bb }, { label: 'BreakTime', value: dd }, { label: 'dummy', value: 3 }];
                color11 = ["green", "red", "blue", "white"];
            }
            else if (dd == 0) {
                data = [{ label: 'UpTime', value: aa }, { label: 'DownTime', value: bb }, { label: 'LossTime', value: cc }, { label: 'dummy', value: 3 }];
                color11 = ["green", "red", "#f0640f", "white"];
            }
            else {
                data = [{ label: 'UpTime', value: aa }, { label: 'DownTime', value: bb }, { label: 'LossTime', value: cc }, { label: 'BreakTime', value: dd }, { label: 'dummy', value: 3 }];
                color11 = ["green", "red", "#f0640f", "blue", "white"];
            }

            var color = d3.scaleOrdinal()
                .range(color11);


            var vis = d3.select("#time1")
                .append("svg") //create the SVG element inside the <body>
                .data([data]) //associate our data with the document
                .attr("width", width) //set the width and height of our visualization (these will be attributes of the <svg> tag
                .attr("height", height)
                .append("svg:g") //make a group to hold our pie chart
                .attr('transform', 'translate(' + (width / 2) + ',' + (height) + ')'); //move the center of the pie chart from 0, 0 to radius, radius


            var arc = d3.arc() //this will create <path> elements for us using arc data
                .innerRadius(radius - thickness)
                //  								.outerRadius(radius);
                .outerRadius(radius) // full height semi pie
            //.innerRadius(0);


            var pie = d3.pie() //this will create arc data for us given a list of values
                //.startAngle(-90 * (Math.PI / 180))
                //.endAngle(90 * (Math.PI / 180))
                .startAngle(anglesRange * -1)
                .endAngle(anglesRange)
                .padAngle(.02) // some space between slices
                .sort(null) //No! we don't want to order it by size
                .value(function (d) {
                    return d.value;
                }); //we must tell it out to access the value of each element in our data array

            var arcs = vis.selectAll("g.slice") //this selects all <g> elements with class slice (there aren't any yet)
                .data(pie) //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties)
                .enter() //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
                .append("svg:g") //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                .attr("class", "slice"); //allow us to style things in the slices (like text)

            arcs.append("svg:path")
                .attr("fill", function (d, i) {
                    return color(i);
                }) //set the color for each slice to be chosen from the color function defined above
                .attr("d", arc); //this creates the actual SVG path using the associated data (pie) with the arc drawing function

            const textEl = arcs.append("svg:text")
                .attr("class", "labels") //add a label to each slice
                .attr("fill", "grey")
                .attr("transform", function (d) {
                    var c = arc.centroid(d),
                        xp = c[0],
                        yp = c[1],
                        // pythagorean theorem for hypotenuse
                        hp = Math.sqrt(xp * xp + yp * yp);
                    return "translate(" + (xp / hp * labelr) + ',' +
                        (yp / hp * labelr) + ")";
                })
                .attr("text-anchor", "middle"); //center the text on it's origin


            var color_hash = data;

            var svg = d3.select("#time1")

            var w = 400;
            var h = 300;
            var legend = svg.append("g")
                .attr("class", "legend")
                .attr("x", w - 65)
                .attr("y", 55)
                .attr("height", 100)
                .attr("width", 100)

            legend.selectAll('g').data(data)
                .enter()
                .append('g')
                .each(function (d, i) {
                    var g = d3.select(this);
                    if (color_hash[i].label != 'dummy') {
                        g.append("rect")
                            .attr("x", w - 35)
                            .attr("y", (i + 1) * 25)
                            .attr("width", 12)
                            .attr("height", 10)
                            .style("margin-top", "100px")
                            .style("fill", color(i));

                        g.append("text")
                            .attr("x", w - 20)
                            .attr("y", (i + 1) * 25 + 8)
                            .attr("height", 40)
                            .attr("width", 300)
                            .style("fill", "black")
                            .style("margin-top", "100px")
                            .text(color_hash[i].label + " - " + color_hash[i].value + " mins");
                    }

                });


        }

                                //function time1(aa, bb, cc, dd) {



                                //    sample = [{ "Name": "upTime", "Value": aa }, { "Name": "DownTime", "Value": bb }, { "Name": "LossTime", "Value": cc }, { "Name": "BreakTime", "Value": dd }]


                                //                //const svg = d3.select('.year_report').append('svg');
                                //                d3.select(".time1").append("svg");
                                //                const svg = d3.select('svg');

                                //                //const svgContainer = d3.select('#container');

                                //                const a = $('.timediv').height();
                                //                const b = $('.timediv').width();

                                //                const margin = 0;
                                //                const width = b - 2 * margin;
                                //                const height = a - 2 * margin;

                                //                //const margin = 80;
                                //                //const width = 1000 - 2 * margin;
                                //                //const height = 600 - 2 * margin;

                                //                const chart = svg.append('g')
                                //                    .attr('transform', `translate(${margin}, ${margin})`);

                                //                const xScale = d3.scaleBand()
                                //                    .range([0, width])
                                //                    .domain(sample.map((s) => s.Name))
                                //                    .padding(0.4)

                                //                const yScale = d3.scaleLinear()
                                //                    .range([height, 0])
                                //                    .domain([0, d3.max(sample, function (d) { return d.Value; })]);

                                //                const makeYLines = () => d3.axisLeft()
                                //                    .scale(yScale)

                                //                chart.append('g')
                                //                    .attr('transform', `translate(0, ${height})`)
                                //                    .call(d3.axisBottom(xScale));

                                //                chart.append('g')
                                //                    .call(d3.axisLeft(yScale));

                                //                chart.append('g')
                                //                    .attr('class', 'grid')
                                //                    .call(makeYLines()
                                //                        .tickSize(-width, 0, 0)
                                //                        .tickFormat('')
                                //                    )

                                //                const barGroups = chart.selectAll()
                                //                    .data(sample)
                                //                    .enter()
                                //                    .append('g')

                                //                barGroups
                                //                    .append('rect')
                                //                    .attr('class', 'bar')
                                //                    .attr('x', (g) => xScale(g.Name))
                                //                    .attr('y', (g) => yScale(g.Value))
                                //                    .attr('height', (g) => height - yScale(g.Value))
                                //                    .attr('width', xScale.bandwidth())

                                //                    .on('mouseleave', function () {
                                //                        d3.selectAll('.value')
                                //                            .attr('opacity', 1)

                                //                        d3.select(this)
                                //                            .transition()
                                //                            .duration(300)
                                //                            .attr('opacity', 1)
                                //                            .attr('x', (a) => xScale(a.Name))
                                //                            .attr('width', xScale.bandwidth())

                                //                        chart.selectAll('#limit').remove()
                                //                        chart.selectAll('.divergence').remove()
                                //                    })



                                //                barGroups
                                //                    .append('text')
                                //                    .attr('class', 'value')
                                //                    .attr('x', (a) => xScale(a.Name) + xScale.bandwidth() / 2)
                                //                    .attr('y', (a) => yScale(a.Value) + -10)
                                //                    .attr('text-anchor', 'middle')
                                //                    .text((a) => `${a.Value}`)

                                //                svg.append('text')
                                //                    .attr('class', 'label')
                                //                    .attr('x', -(height / 2) - margin)
                                //                    .attr('y', margin / 2.4)
                                //                    .attr('transform', 'rotate(-90)')
                                //                    .attr('text-anchor', 'middle')
                                //                    .text('Value(in min)')

                                //                svg.append('text')
                                //                    .attr('class', 'label')
                                //                    .attr('x', width / 2 + margin)
                                //                    .attr('y', height + margin * 1.7)
                                //                    .attr('text-anchor', 'middle')
                                //                    .text('Utilization')


                                //}

    </script>

    <script>

                                //function time2(aa, bb, cc, dd) {

                                //    //Width and height
                                //    var w = 300;
                                //    var h = 300;

                                //    var dataset = [5, 10, 20, 45, 6, 25];

                                //    var outerRadius = w / 2;
                                //    var innerRadius = 0;
                                //    var arc = d3.arc()
                                //        .innerRadius(innerRadius)
                                //        .outerRadius(outerRadius);

                                //    var pie = d3.pie();

                                //    var color = d3.scaleOrdinal() // v4
                                //        .domain(['green', 'red', 'blue', 'orange', 'white'])
                                //        .range(['#00ff00', '#ff0000', '#0000ff', '#f56c0a', '#F0F0F0']);


                                //    // Create SVG element
                                //    var svg = d3.select(".time1")
                                //        .append("svg")
                                //        .attr("width", w)
                                //        .attr("height", h);

                                //    // Set up groups
                                //    var arcs = svg.selectAll("g.arc")
                                //        .data(pie(dataset))
                                //        .enter()
                                //        .append("g")
                                //        .attr("class", "arc")
                                //        .attr("transform", "translate(" + outerRadius + "," + outerRadius + ")")
                                //        .on("mouseover", function (d) {
                                //            d3.select("#tooltip")
                                //                .style("left", d3.event.pageX + "px")
                                //                .style("top", d3.event.pageY + "px")
                                //                .style("opacity", 1)
                                //                .select("#value")
                                //                .text(d.value);
                                //        })
                                //        .on("mouseout", function () {
                                //            // Hide the tooltip
                                //            d3.select("#tooltip")
                                //                .style("opacity", 0);;
                                //        });

                                //    // Draw arc paths
                                //    arcs.append("path")
                                //        .attr("fill", function (d, i) {
                                //            return color(i);
                                //        })
                                //        .attr("d", arc);

                                //    // Labels
                                //    arcs.append("text")
                                //        .attr("transform", function (d) {
                                //            return "translate(" + arc.centroid(d) + ")";
                                //        })
                                //        .attr("text-anchor", "middle")
                                //        .text(function (d) {
                                //            return d.value;
                                //        });

                                //}

    </script>

    @*<style>

                text {
            font-family: sans-serif;
            font-size: 12px;
            fill: white;
        }
        #tooltip {
            position: absolute;
            width: 200px;
            height: auto;
            padding: 10px;
            background-color: white;
            -webkit-border-radius: 10px;
            -moz-border-radius: 10px;
            border-radius: 10px;
            -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
            -mox-box-shadow: 4px 4px 4px 10px rgba(0, 0, 0, 0.4);
            box-shadow: 4px 4px 10px rbga(0, 0, 0, 0.4) pointer-events: none;
        }
        #tooltip.hidden {
            opacity: 0;
        }
        #tooltip p {
            margin: 0;
            font-family: sans-serif;
            font-size: 16px;
            line-height: 20px;
        }

            </style>*@


    <style>
        #tooltip11 {
            position: relative;
            display: inline-block;
            border-bottom: 1px dotted black;
        }

            #tooltip11 .tooltiptext {
                visibility: hidden;
                width: 180px;
                background-color: #555;
                color: #fff;
                text-align: center;
                border-radius: 6px;
                padding: 5px 0;
                position: absolute;
                z-index: 5;
                /*bottom: 1%;*/
                top: 1%;
                left: 50%;
                margin-left: -60px;
                opacity: 0;
                transition: opacity 0.3s;
            }

                #tooltip11 .tooltiptext::after {
                    content: "";
                    position: absolute;
                    top: 100%;
                    left: 50%;
                    margin-left: -5px;
                    border-width: 5px;
                    border-style: solid;
                    border-color: #555 transparent transparent transparent;
                }

            #tooltip11:hover .tooltiptext {
                visibility: visible;
                opacity: 1;
            }
    </style>
}

@if ((HttpContext.Current.Session["CompanyCode"] == null) || (HttpContext.Current.Session["CompanyCode"].ToString().Length == 0))
{
    <div>
        <br /><br />
        <label style="font-weight:bolder;text-align:center">Select Company</label>
        <br />
        <label style="font-weight:lighter;text-align:center">NOTE : Choose "Select Customer" from Profile Dropdown on Top-Right corner</label>
    </div>
}
@if ((HttpContext.Current.Session["PlantCode"] == null) || (HttpContext.Current.Session["PlantCode"].ToString().Length == 0))
{
    <div>
        <br /><br />
        <label style="font-weight:bolder;text-align:center">Select Plant</label>
    </div>
}
@if ((HttpContext.Current.Session["LineCode"] == null) || (HttpContext.Current.Session["LineCode"].ToString().Length == 0))
{
    <div>
        <br /><br />
        <label style="font-weight:bolder;text-align:center">Select Line</label>
    </div>
}


